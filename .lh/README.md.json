{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761798551003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761798551003,
            "name": "Commit-0",
            "content": "# 🚛 Miraa Transport Management System\n\nA modern, enterprise-grade transport management system built with React, TypeScript, and cutting-edge UI techniques.\n\n## ✨ Features\n\n- 🎨 **Modern Glass Morphism UI** - Sophisticated backdrop blur effects\n- 🌈 **Vibrant Purple/Pink Theme** - Contemporary gradient design\n- 📱 **Responsive Design** - Mobile-first approach\n- ⚡ **Performance Optimized** - Lazy loading and memoization\n- 🔒 **Role-Based Access** - Admin and User portals\n- 📊 **Real-Time Analytics** - Comprehensive dashboard\n- 💫 **Advanced Animations** - Smooth transitions and effects\n\n## 🚀 Quick Start\n\n```bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm start\n\n# Build for production\nnpm run build\n\n# Run build optimization\nnode scripts/build-optimize.js\n```\n\n## 🏗️ Project Structure\n\n```\nsrc/\n├── components/          # Reusable UI components\n│   ├── OptimizedButton.tsx\n│   ├── LazyWrapper.tsx\n│   └── ...\n├── contexts/           # React contexts\n│   ├── ThemeContext.tsx\n│   └── TransportContext.tsx\n├── hooks/             # Custom hooks\n│   └── useOptimizedCallback.ts\n├── pages/             # Application pages\n│   ├── Login.tsx\n│   ├── UserPortal.tsx\n│   └── AdminPortal.tsx\n├── styles/            # CSS and styling\n│   ├── variables.css\n│   └── responsive.css\n└── utils/             # Utility functions\n    └── performance.ts\n```\n\n## 🎨 Design System\n\n### Colors\n- **Primary**: Purple (#8b5cf6)\n- **Secondary**: Pink (#ec4899)\n- **Accent**: Cyan (#06b6d4)\n- **Success**: Green (#10b981)\n- **Error**: Red (#f43f5e)\n\n### Typography\n- **Font**: Inter (Modern, clean)\n- **Sizes**: Responsive scale (xs → 5xl)\n- **Weights**: 300 → 900\n\n### Spacing\n- **Scale**: 0.25rem → 5rem\n- **Grid**: CSS Grid with responsive breakpoints\n- **Containers**: Fluid → Fixed widths\n\n## 📱 Responsive Breakpoints\n\n```css\n--mobile: max-width: 768px\n--tablet: 769px - 1024px  \n--desktop: 1025px+\n--large-desktop: 1440px+\n```\n\n##\n## 🚀 Performance Optimizations\n\n- ⚡ **Lazy Loading** - Code splitting for routes\n- 🎯 **Memoization** - Prevent unnecessary re-renders\n- 📦 **Bundle Optimization** - Tree shaking and compression\n- 🖼️ **Image Optimization** - Modern formats and sizing\n- 💾 **Memory Management** - Proper cleanup and monitoring\n\n## 🔧 Build Scripts\n\n```bash\n# Development\nnpm start          # Start dev server\nnpm run lint       # Run ESLint\nnpm run lint:fix   # Fix ESLint issues\n\n# Production\nnpm run build              # Build app\nnpm run build:analyze     # Analyze bundle\nnode scripts/list-optimize.js  # Full optimization\n```\n\n## 📊 Performance Metrics\n\nMonitor performance with built-in tools:\n- **Page Load Time** - Navigation to load event\n- **First Contentful Paint** - Critical content rendering\n- **Largest Contentful Paint** - Visual stability\n- **Cumulative Layout Shift** - Layout stability\n- **First Input Delay** - Interaction responsiveness\n\n## 🎯 Deployment Checklist\n\n- ✅ **Build Optimization** - Run build optimization script\n- ✅ **Performance Testing** - Check Core Web Vitals\n- ✅ **Responsive Testing** - Test on all devices\n- ✅ **Accessibility** - WCAG compliance\n- ✅ **Browser Compatibility** - Modern evergreen browsers\n\n## 📚 Architecture Decisions\n\n### State Management\n- **React Context** for global state\n- **Local State** for component-specific data\n- **Performance Optimized** hooks and selectors\n\n### Routing\n- **React Router v6** - Modern routing patterns\n- **Protected Routes** - Role-based navigation\n- **Lazy Loading** - Route-based code splitting\n\n### Styling\n- **CSS-in-JS** - Component-scoped styles\n- **CSS Variables** - Theme consistency\n- **Modern CSS** - Flexbox, Grid, animations\n\n## 🔒 Security\n\n- **Environment Variables** - Sensitive data protection\n- **Type Safety** - TypeScript throughout\n- **Input Validation** - Form security\n- **HTTPS Only** - Secure communications\n\n## 🌟 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make changes with performance in mind\n4. Test thoroughly\n5. Submit a pull request\n\n## 📄 License\n\nMIT License - Built for modern transport management\n\n---\n\n**Built with ❤️ for modern transport operations**\n \n## 🗄️ Optional: Supabase persistence\n\nThis app can use Supabase (Postgres) for data instead of localStorage when environment variables are provided.\n\n1. Create a Supabase project and get your Project URL and Anon key.\n2. Create a file named `.env.local` in the project root with:\n\n```\nVITE_SUPABASE_URL=your-project-url\nVITE_SUPABASE_ANON_KEY=your-anon-key\n```\n\n3. Start the app: `npm run dev`\n\nTables expected: `packages`, `users`, `clients`, `stations`, `area_codes`. See `supabase/schema.sql` for a starter schema.\n\nWhen these env vars are present, the app reads/writes via Supabase; otherwise it falls back to localStorage (`mwalimu-*` keys)."
        }
    ]
}