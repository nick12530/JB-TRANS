{
    "sourceFile": "src/contexts/BookingContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1757643179153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757644819520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,14 @@\n   phone: string;\r\n   email: string;\r\n   address: string;\r\n   workingHours: string;\r\n-  services: string[];\r\n+  services: Array<{\r\n+    name: string;\r\n+    price: number;\r\n+    duration: string;\r\n+    description: string;\r\n+  }>;\r\n   shopImage: string;\r\n   description: string;\r\n   acceptsHouseCalls?: boolean;\r\n   coordinates?: { lat: number; lng: number };\r\n"
                },
                {
                    "date": 1757644908319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,11 @@\n   travelFee: number;\r\n   subtotal: number;\r\n   total: number;\r\n   notes: string;\r\n+  customerName: string;\r\n+  customerPhone: string;\r\n+  customerEmail: string;\r\n }\r\n \r\n interface BookingContextType {\r\n   bookingData: BookingData;\r\n"
                },
                {
                    "date": 1757644922978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,12 @@\n   distance: 0,\r\n   travelFee: 0,\r\n   subtotal: 0,\r\n   total: 0,\r\n-  notes: ''\r\n+  notes: '',\r\n+  customerName: '',\r\n+  customerPhone: '',\r\n+  customerEmail: ''\r\n };\r\n \r\n export const BookingProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n   const [bookingData, setBookingData] = useState<BookingData>(initialBookingData);\r\n"
                }
            ],
            "date": 1757643179153,
            "name": "Commit-0",
            "content": "import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\ninterface Service {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  duration: string;\r\n  category: string;\r\n  image: string;\r\n  description: string;\r\n  basePrice?: number;\r\n}\r\n\r\ninterface Barber {\r\n  id: number;\r\n  name: string;\r\n  specialty: string;\r\n  rating: number;\r\n  location: string;\r\n  county: string;\r\n  shopName: string;\r\n  available: boolean;\r\n  experience: string;\r\n  image: string;\r\n  price: string;\r\n  phone: string;\r\n  email: string;\r\n  address: string;\r\n  workingHours: string;\r\n  services: string[];\r\n  shopImage: string;\r\n  description: string;\r\n  acceptsHouseCalls?: boolean;\r\n  coordinates?: { lat: number; lng: number };\r\n}\r\n\r\ninterface SelectedService extends Service {\r\n  quantity: number;\r\n  totalPrice: number;\r\n}\r\n\r\ninterface BookingData {\r\n  barber: Barber | null;\r\n  selectedServices: SelectedService[];\r\n  date: string;\r\n  time: string;\r\n  isHouseCall: boolean;\r\n  customerAddress: string;\r\n  customerCoordinates: { lat: number; lng: number } | null;\r\n  distance: number;\r\n  travelFee: number;\r\n  subtotal: number;\r\n  total: number;\r\n  notes: string;\r\n}\r\n\r\ninterface BookingContextType {\r\n  bookingData: BookingData;\r\n  updateBarber: (barber: Barber | null) => void;\r\n  addService: (service: Service) => void;\r\n  removeService: (serviceId: string) => void;\r\n  updateServiceQuantity: (serviceId: string, quantity: number) => void;\r\n  updateBookingDetails: (details: Partial<BookingData>) => void;\r\n  calculateDistance: (lat1: number, lng1: number, lat2: number, lng2: number) => number;\r\n  calculateTravelFee: (distance: number) => number;\r\n  calculateTotal: () => void;\r\n  clearBooking: () => void;\r\n}\r\n\r\nconst BookingContext = createContext<BookingContextType | undefined>(undefined);\r\n\r\nexport const useBooking = () => {\r\n  const context = useContext(BookingContext);\r\n  if (!context) {\r\n    throw new Error('useBooking must be used within a BookingProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nconst initialBookingData: BookingData = {\r\n  barber: null,\r\n  selectedServices: [],\r\n  date: '',\r\n  time: '',\r\n  isHouseCall: false,\r\n  customerAddress: '',\r\n  customerCoordinates: null,\r\n  distance: 0,\r\n  travelFee: 0,\r\n  subtotal: 0,\r\n  total: 0,\r\n  notes: ''\r\n};\r\n\r\nexport const BookingProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [bookingData, setBookingData] = useState<BookingData>(initialBookingData);\r\n\r\n  // Haversine formula to calculate distance between two coordinates\r\n  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n              Math.sin(dLng/2) * Math.sin(dLng/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  };\r\n\r\n  // Calculate travel fee based on distance\r\n  const calculateTravelFee = (distance: number): number => {\r\n    const baseFee = 100; // KSh 100 base fee\r\n    const perKmRate = 15; // KSh 15 per kilometer\r\n    return baseFee + (distance * perKmRate);\r\n  };\r\n\r\n  // Calculate total booking cost\r\n  const calculateTotal = () => {\r\n    const subtotal = bookingData.selectedServices.reduce((sum, service) => sum + service.totalPrice, 0);\r\n    const travelFee = bookingData.isHouseCall ? calculateTravelFee(bookingData.distance) : 0;\r\n    const total = subtotal + travelFee;\r\n\r\n    setBookingData(prev => ({\r\n      ...prev,\r\n      subtotal,\r\n      travelFee,\r\n      total\r\n    }));\r\n  };\r\n\r\n  // Update barber selection\r\n  const updateBarber = (barber: Barber | null) => {\r\n    setBookingData(prev => ({\r\n      ...prev,\r\n      barber,\r\n      selectedServices: [] // Clear services when barber changes\r\n    }));\r\n  };\r\n\r\n  // Add service to booking\r\n  const addService = (service: Service) => {\r\n    setBookingData(prev => {\r\n      const existingServiceIndex = prev.selectedServices.findIndex(s => s.id === service.id);\r\n      \r\n      if (existingServiceIndex >= 0) {\r\n        // Update quantity if service already exists\r\n        const updatedServices = [...prev.selectedServices];\r\n        updatedServices[existingServiceIndex].quantity += 1;\r\n        updatedServices[existingServiceIndex].totalPrice = \r\n          updatedServices[existingServiceIndex].quantity * service.price;\r\n        return { ...prev, selectedServices: updatedServices };\r\n      } else {\r\n        // Add new service\r\n        const newService: SelectedService = {\r\n          ...service,\r\n          quantity: 1,\r\n          totalPrice: service.price\r\n        };\r\n        return {\r\n          ...prev,\r\n          selectedServices: [...prev.selectedServices, newService]\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  // Remove service from booking\r\n  const removeService = (serviceId: string) => {\r\n    setBookingData(prev => ({\r\n      ...prev,\r\n      selectedServices: prev.selectedServices.filter(s => s.id !== serviceId)\r\n    }));\r\n  };\r\n\r\n  // Update service quantity\r\n  const updateServiceQuantity = (serviceId: string, quantity: number) => {\r\n    if (quantity <= 0) {\r\n      removeService(serviceId);\r\n      return;\r\n    }\r\n\r\n    setBookingData(prev => ({\r\n      ...prev,\r\n      selectedServices: prev.selectedServices.map(service =>\r\n        service.id === serviceId\r\n          ? { ...service, quantity, totalPrice: service.price * quantity }\r\n          : service\r\n      )\r\n    }));\r\n  };\r\n\r\n  // Update booking details\r\n  const updateBookingDetails = (details: Partial<BookingData>) => {\r\n    setBookingData(prev => {\r\n      const updated = { ...prev, ...details };\r\n      \r\n      // Recalculate distance and travel fee if coordinates changed\r\n      if (details.customerCoordinates && prev.barber?.coordinates) {\r\n        const distance = calculateDistance(\r\n          details.customerCoordinates.lat,\r\n          details.customerCoordinates.lng,\r\n          prev.barber.coordinates.lat,\r\n          prev.barber.coordinates.lng\r\n        );\r\n        updated.distance = distance;\r\n        updated.travelFee = updated.isHouseCall ? calculateTravelFee(distance) : 0;\r\n      }\r\n      \r\n      return updated;\r\n    });\r\n  };\r\n\r\n  // Clear booking data\r\n  const clearBooking = () => {\r\n    setBookingData(initialBookingData);\r\n  };\r\n\r\n  // Recalculate total when services or house call status changes\r\n  useEffect(() => {\r\n    calculateTotal();\r\n  }, [bookingData.selectedServices, bookingData.isHouseCall, bookingData.distance]);\r\n\r\n  // Save booking data to localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('bookingData', JSON.stringify(bookingData));\r\n  }, [bookingData]);\r\n\r\n  const value: BookingContextType = {\r\n    bookingData,\r\n    updateBarber,\r\n    addService,\r\n    removeService,\r\n    updateServiceQuantity,\r\n    updateBookingDetails,\r\n    calculateDistance,\r\n    calculateTravelFee,\r\n    calculateTotal,\r\n    clearBooking\r\n  };\r\n\r\n  return (\r\n    <BookingContext.Provider value={value}>\r\n      {children}\r\n    </BookingContext.Provider>\r\n  );\r\n};\r\n"
        }
    ]
}