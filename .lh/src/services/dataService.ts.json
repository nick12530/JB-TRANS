{
    "sourceFile": "src/services/dataService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1761798483328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761800439072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,86 +35,236 @@\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return readLocal(localKeys.packages, [] as Package[]);\r\n     const { data, error } = await supabase.from('packages').select('*').order('created_at', { ascending: false });\r\n     if (error) return readLocal(localKeys.packages, [] as Package[]);\r\n-    return (data ?? []) as Package[];\r\n+    return (data ?? []).map(fromDbPackage);\r\n   },\r\n \r\n   async upsertPackages(items: Package[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.packages, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.packages, items);\r\n     // Replace all for simplicity (can optimize to diffs later)\r\n     await supabase.from('packages').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('packages').insert(items);\r\n+    if (items.length) await supabase.from('packages').insert(items.map(toDbPackage));\r\n   },\r\n \r\n   async listUsers(): Promise<User[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.users, [] as User[]);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return readLocal(localKeys.users, [] as User[]);\r\n     const { data, error } = await supabase.from('users').select('*');\r\n     if (error) return readLocal(localKeys.users, [] as User[]);\r\n-    return (data ?? []) as User[];\r\n+    return (data ?? []).map(fromDbUser);\r\n   },\r\n \r\n   async upsertUsers(items: User[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.users, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.users, items);\r\n     await supabase.from('users').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('users').insert(items);\r\n+    if (items.length) await supabase.from('users').insert(items.map(toDbUser));\r\n   },\r\n \r\n   async listClients(): Promise<Client[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.clients, [] as Client[]);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return readLocal(localKeys.clients, [] as Client[]);\r\n     const { data, error } = await supabase.from('clients').select('*');\r\n     if (error) return readLocal(localKeys.clients, [] as Client[]);\r\n-    return (data ?? []) as Client[];\r\n+    return (data ?? []).map(fromDbClient);\r\n   },\r\n \r\n   async upsertClients(items: Client[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.clients, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.clients, items);\r\n     await supabase.from('clients').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('clients').insert(items);\r\n+    if (items.length) await supabase.from('clients').insert(items.map(toDbClient));\r\n   },\r\n \r\n   async listStations(): Promise<PickupStation[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.stations, [] as PickupStation[]);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return readLocal(localKeys.stations, [] as PickupStation[]);\r\n     const { data, error } = await supabase.from('stations').select('*').order('name');\r\n     if (error) return readLocal(localKeys.stations, [] as PickupStation[]);\r\n-    return (data ?? []) as PickupStation[];\r\n+    return (data ?? []).map(fromDbStation);\r\n   },\r\n \r\n   async upsertStations(items: PickupStation[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.stations, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.stations, items);\r\n     await supabase.from('stations').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('stations').insert(items);\r\n+    if (items.length) await supabase.from('stations').insert(items.map(toDbStation));\r\n   },\r\n \r\n   async listAreaCodes(): Promise<AreaCode[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.area_codes, [] as AreaCode[]);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return readLocal(localKeys.area_codes, [] as AreaCode[]);\r\n-    const { data, error } = await supabase.from('area_codes').select('*').order('minRange');\r\n+    const { data, error } = await supabase.from('area_codes').select('*').order('minrange');\r\n     if (error) return readLocal(localKeys.area_codes, [] as AreaCode[]);\r\n-    return (data ?? []) as AreaCode[];\r\n+    return (data ?? []).map(fromDbAreaCode);\r\n   },\r\n \r\n   async upsertAreaCodes(items: AreaCode[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.area_codes, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.area_codes, items);\r\n     await supabase.from('area_codes').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('area_codes').insert(items);\r\n+    if (items.length) await supabase.from('area_codes').insert(items.map(toDbAreaCode));\r\n   },\r\n };\r\n \r\n+// ---------- Mappers: app types <-> DB row shapes (lowercase column names) ----------\r\n \r\n+function toDbPackage(p: Package): any {\r\n+  return {\r\n+    id: p.id,\r\n+    trackingnumber: p.trackingNumber,\r\n+    areacode: p.areaCode,\r\n+    sendername: p.senderName,\r\n+    senderphone: p.senderPhone,\r\n+    recipientname: p.recipientName,\r\n+    recipientphone: p.recipientPhone,\r\n+    destination: p.destination,\r\n+    weight: p.weight,\r\n+    status: p.status,\r\n+    registeredby: p.registeredBy,\r\n+    registeredat: p.registeredAt,\r\n+    station: p.station,\r\n+    notes: p.notes ?? null,\r\n+  };\r\n+}\r\n+\r\n+function fromDbPackage(r: any): Package {\r\n+  return {\r\n+    id: r.id,\r\n+    trackingNumber: r.trackingnumber,\r\n+    areaCode: r.areacode,\r\n+    senderName: r.sendername,\r\n+    senderPhone: r.senderphone,\r\n+    recipientName: r.recipientname,\r\n+    recipientPhone: r.recipientphone,\r\n+    destination: r.destination,\r\n+    weight: Number(r.weight),\r\n+    status: r.status,\r\n+    registeredBy: r.registeredby,\r\n+    registeredAt: r.registeredat,\r\n+    station: r.station,\r\n+    notes: r.notes ?? undefined,\r\n+  } as Package;\r\n+}\r\n+\r\n+function toDbUser(u: User): any {\r\n+  return {\r\n+    id: u.id,\r\n+    name: u.name,\r\n+    role: u.role,\r\n+    email: u.email ?? null,\r\n+    phonenumber: u.phoneNumber ?? null,\r\n+    status: u.status,\r\n+    createdat: u.createdAt ?? null,\r\n+    updatedat: u.updatedAt ?? null,\r\n+    lastlogin: u.lastLogin ?? null,\r\n+    department: u.department ?? null,\r\n+    assignedstation: u.assignedStation ?? null,\r\n+  };\r\n+}\r\n+\r\n+function fromDbUser(r: any): User {\r\n+  return {\r\n+    id: r.id,\r\n+    name: r.name,\r\n+    role: r.role,\r\n+    email: r.email ?? undefined,\r\n+    phoneNumber: r.phonenumber ?? undefined,\r\n+    status: r.status,\r\n+    createdAt: r.createdat ?? undefined,\r\n+    updatedAt: r.updatedat ?? undefined,\r\n+    lastLogin: r.lastlogin ?? undefined,\r\n+    department: r.department ?? undefined,\r\n+    assignedStation: r.assignedstation ?? undefined,\r\n+  } as User;\r\n+}\r\n+\r\n+function toDbClient(c: Client): any {\r\n+  return {\r\n+    id: (c as any).id,\r\n+    name: (c as any).name,\r\n+    phonenumber: (c as any).phoneNumber ?? null,\r\n+    email: (c as any).email ?? null,\r\n+    address: (c as any).address ?? null,\r\n+  };\r\n+}\r\n+\r\n+function fromDbClient(r: any): Client {\r\n+  return {\r\n+    id: r.id,\r\n+    name: r.name,\r\n+    phoneNumber: r.phonenumber ?? undefined,\r\n+    email: r.email ?? undefined,\r\n+    address: r.address ?? undefined,\r\n+  } as Client;\r\n+}\r\n+\r\n+function toDbStation(s: PickupStation): any {\r\n+  return {\r\n+    id: s.id,\r\n+    name: s.name,\r\n+    code: s.code,\r\n+    region: s.region,\r\n+    location: s.location,\r\n+    status: s.status,\r\n+    manager: s.manager ?? null,\r\n+    contact: s.contact,\r\n+    capacity: s.capacity ?? null,\r\n+    currentinventory: s.currentInventory ?? null,\r\n+  };\r\n+}\r\n+\r\n+function fromDbStation(r: any): PickupStation {\r\n+  return {\r\n+    id: r.id,\r\n+    name: r.name,\r\n+    code: r.code,\r\n+    region: r.region,\r\n+    location: r.location,\r\n+    status: r.status,\r\n+    manager: r.manager ?? undefined,\r\n+    contact: r.contact,\r\n+    capacity: r.capacity == null ? undefined : Number(r.capacity),\r\n+    currentInventory: r.currentinventory == null ? undefined : Number(r.currentinventory),\r\n+  } as PickupStation;\r\n+}\r\n+\r\n+function toDbAreaCode(a: AreaCode): any {\r\n+  return {\r\n+    id: a.id,\r\n+    code: a.code,\r\n+    name: a.name,\r\n+    region: a.region,\r\n+    minrange: a.minRange,\r\n+    maxrange: a.maxRange,\r\n+    status: a.status,\r\n+    assignedto: a.assignedTo ?? null,\r\n+    notes: a.notes ?? null,\r\n+  };\r\n+}\r\n+\r\n+function fromDbAreaCode(r: any): AreaCode {\r\n+  return {\r\n+    id: r.id,\r\n+    code: r.code,\r\n+    name: r.name,\r\n+    region: r.region,\r\n+    minRange: Number(r.minrange),\r\n+    maxRange: Number(r.maxrange),\r\n+    status: r.status,\r\n+    assignedTo: r.assignedto ?? undefined,\r\n+    notes: r.notes ?? undefined,\r\n+  } as AreaCode;\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1761800521290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,9 @@\n   async upsertPackages(items: Package[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.packages, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.packages, items);\r\n-    // Replace all for simplicity (can optimize to diffs later)\r\n-    await supabase.from('packages').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('packages').insert(items.map(toDbPackage));\r\n+    if (items.length) await supabase.from('packages').upsert(items.map(toDbPackage), { onConflict: 'id' });\r\n   },\r\n \r\n   async listUsers(): Promise<User[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.users, [] as User[]);\r\n@@ -60,10 +58,9 @@\n   async upsertUsers(items: User[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.users, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.users, items);\r\n-    await supabase.from('users').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('users').insert(items.map(toDbUser));\r\n+    if (items.length) await supabase.from('users').upsert(items.map(toDbUser), { onConflict: 'id' });\r\n   },\r\n \r\n   async listClients(): Promise<Client[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.clients, [] as Client[]);\r\n@@ -77,10 +74,9 @@\n   async upsertClients(items: Client[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.clients, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.clients, items);\r\n-    await supabase.from('clients').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('clients').insert(items.map(toDbClient));\r\n+    if (items.length) await supabase.from('clients').upsert(items.map(toDbClient), { onConflict: 'id' });\r\n   },\r\n \r\n   async listStations(): Promise<PickupStation[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.stations, [] as PickupStation[]);\r\n@@ -94,10 +90,9 @@\n   async upsertStations(items: PickupStation[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.stations, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.stations, items);\r\n-    await supabase.from('stations').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('stations').insert(items.map(toDbStation));\r\n+    if (items.length) await supabase.from('stations').upsert(items.map(toDbStation), { onConflict: 'id' });\r\n   },\r\n \r\n   async listAreaCodes(): Promise<AreaCode[]> {\r\n     if (!isSupabaseEnabled()) return readLocal(localKeys.area_codes, [] as AreaCode[]);\r\n@@ -111,10 +106,9 @@\n   async upsertAreaCodes(items: AreaCode[]): Promise<void> {\r\n     if (!isSupabaseEnabled()) return writeLocal(localKeys.area_codes, items);\r\n     const supabase = getSupabaseClient();\r\n     if (!supabase) return writeLocal(localKeys.area_codes, items);\r\n-    await supabase.from('area_codes').delete().neq('id', '-');\r\n-    if (items.length) await supabase.from('area_codes').insert(items.map(toDbAreaCode));\r\n+    if (items.length) await supabase.from('area_codes').upsert(items.map(toDbAreaCode), { onConflict: 'id' });\r\n   },\r\n };\r\n \r\n // ---------- Mappers: app types <-> DB row shapes (lowercase column names) ----------\r\n"
                },
                {
                    "date": 1761800555332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,15 +193,15 @@\n   };\r\n }\r\n \r\n function fromDbClient(r: any): Client {\r\n-  return {\r\n+  return ({\r\n     id: r.id,\r\n     name: r.name,\r\n     phoneNumber: r.phonenumber ?? undefined,\r\n     email: r.email ?? undefined,\r\n     address: r.address ?? undefined,\r\n-  } as Client;\r\n+  } as unknown) as Client;\r\n }\r\n \r\n function toDbStation(s: PickupStation): any {\r\n   return {\r\n"
                }
            ],
            "date": 1761798483328,
            "name": "Commit-0",
            "content": "import { getSupabaseClient, isSupabaseEnabled } from '../lib/supabaseClient';\r\nimport type { AreaCode, Client, Package, PickupStation, User } from '../types';\r\n\r\ntype Tables = 'packages' | 'users' | 'clients' | 'stations' | 'area_codes' | 'notifications';\r\n\r\nconst localKeys: Record<Tables, string> = {\r\n  packages: 'mwalimu-packages',\r\n  users: 'mwalimu-users',\r\n  clients: 'mwalimu-clients',\r\n  stations: 'mwalimu-stations',\r\n  area_codes: 'mwalimu-area-codes',\r\n  notifications: 'mwalimu-notifications',\r\n};\r\n\r\nfunction readLocal<T>(key: string, fallback: T): T {\r\n  try {\r\n    const raw = localStorage.getItem(key);\r\n    if (!raw) return fallback;\r\n    const parsed = JSON.parse(raw);\r\n    return parsed as T;\r\n  } catch {\r\n    return fallback;\r\n  }\r\n}\r\n\r\nfunction writeLocal<T>(key: string, value: T): void {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch {}\r\n}\r\n\r\nexport const dataService = {\r\n  async listPackages(): Promise<Package[]> {\r\n    if (!isSupabaseEnabled()) return readLocal(localKeys.packages, [] as Package[]);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return readLocal(localKeys.packages, [] as Package[]);\r\n    const { data, error } = await supabase.from('packages').select('*').order('created_at', { ascending: false });\r\n    if (error) return readLocal(localKeys.packages, [] as Package[]);\r\n    return (data ?? []) as Package[];\r\n  },\r\n\r\n  async upsertPackages(items: Package[]): Promise<void> {\r\n    if (!isSupabaseEnabled()) return writeLocal(localKeys.packages, items);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return writeLocal(localKeys.packages, items);\r\n    // Replace all for simplicity (can optimize to diffs later)\r\n    await supabase.from('packages').delete().neq('id', '-');\r\n    if (items.length) await supabase.from('packages').insert(items);\r\n  },\r\n\r\n  async listUsers(): Promise<User[]> {\r\n    if (!isSupabaseEnabled()) return readLocal(localKeys.users, [] as User[]);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return readLocal(localKeys.users, [] as User[]);\r\n    const { data, error } = await supabase.from('users').select('*');\r\n    if (error) return readLocal(localKeys.users, [] as User[]);\r\n    return (data ?? []) as User[];\r\n  },\r\n\r\n  async upsertUsers(items: User[]): Promise<void> {\r\n    if (!isSupabaseEnabled()) return writeLocal(localKeys.users, items);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return writeLocal(localKeys.users, items);\r\n    await supabase.from('users').delete().neq('id', '-');\r\n    if (items.length) await supabase.from('users').insert(items);\r\n  },\r\n\r\n  async listClients(): Promise<Client[]> {\r\n    if (!isSupabaseEnabled()) return readLocal(localKeys.clients, [] as Client[]);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return readLocal(localKeys.clients, [] as Client[]);\r\n    const { data, error } = await supabase.from('clients').select('*');\r\n    if (error) return readLocal(localKeys.clients, [] as Client[]);\r\n    return (data ?? []) as Client[];\r\n  },\r\n\r\n  async upsertClients(items: Client[]): Promise<void> {\r\n    if (!isSupabaseEnabled()) return writeLocal(localKeys.clients, items);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return writeLocal(localKeys.clients, items);\r\n    await supabase.from('clients').delete().neq('id', '-');\r\n    if (items.length) await supabase.from('clients').insert(items);\r\n  },\r\n\r\n  async listStations(): Promise<PickupStation[]> {\r\n    if (!isSupabaseEnabled()) return readLocal(localKeys.stations, [] as PickupStation[]);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return readLocal(localKeys.stations, [] as PickupStation[]);\r\n    const { data, error } = await supabase.from('stations').select('*').order('name');\r\n    if (error) return readLocal(localKeys.stations, [] as PickupStation[]);\r\n    return (data ?? []) as PickupStation[];\r\n  },\r\n\r\n  async upsertStations(items: PickupStation[]): Promise<void> {\r\n    if (!isSupabaseEnabled()) return writeLocal(localKeys.stations, items);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return writeLocal(localKeys.stations, items);\r\n    await supabase.from('stations').delete().neq('id', '-');\r\n    if (items.length) await supabase.from('stations').insert(items);\r\n  },\r\n\r\n  async listAreaCodes(): Promise<AreaCode[]> {\r\n    if (!isSupabaseEnabled()) return readLocal(localKeys.area_codes, [] as AreaCode[]);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return readLocal(localKeys.area_codes, [] as AreaCode[]);\r\n    const { data, error } = await supabase.from('area_codes').select('*').order('minRange');\r\n    if (error) return readLocal(localKeys.area_codes, [] as AreaCode[]);\r\n    return (data ?? []) as AreaCode[];\r\n  },\r\n\r\n  async upsertAreaCodes(items: AreaCode[]): Promise<void> {\r\n    if (!isSupabaseEnabled()) return writeLocal(localKeys.area_codes, items);\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) return writeLocal(localKeys.area_codes, items);\r\n    await supabase.from('area_codes').delete().neq('id', '-');\r\n    if (items.length) await supabase.from('area_codes').insert(items);\r\n  },\r\n};\r\n\r\n\r\n"
        }
    ]
}