{
    "sourceFile": "src/components/DataTable.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1759566761831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759906173227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,118 @@\n-import React from 'react';\r\n-import { Edit, Trash2, Eye, Search, ArrowUpDown } from 'lucide-react';\r\n+import React, { useState, useMemo, useRef, useEffect } from 'react';\r\n+import { \r\n+  Edit, \r\n+  Trash2, \r\n+  Eye, \r\n+  Search, \r\n+  ArrowUpDown, \r\n+  ChevronUp, \r\n+  ChevronDown,\r\n+  Filter,\r\n+  Download,\r\n+  MoreHorizontal,\r\n+  CheckSquare,\r\n+  Square,\r\n+  RefreshCw,\r\n+  AlertCircle,\r\n+  CheckCircle,\r\n+  Clock,\r\n+  X\r\n+} from 'lucide-react';\r\n import { clsx } from 'clsx';\r\n \r\n interface Column<T> {\r\n   key: keyof T;\r\n   label: string;\r\n   render?: (value: any, row: T) => React.ReactNode;\r\n   sortable?: boolean;\r\n+  filterable?: boolean;\r\n+  width?: string;\r\n+  align?: 'left' | 'center' | 'right';\r\n+  headerAlign?: 'left' | 'center' | 'right';\r\n+  className?: string;\r\n+  headerClassName?: string;\r\n }\r\n \r\n+interface FilterOption {\r\n+  key: string;\r\n+  label: string;\r\n+  type: 'text' | 'select' | 'date' | 'number';\r\n+  options?: Array<{ value: string; label: string }>;\r\n+}\r\n+\r\n interface DataTableProps<T> {\r\n   data: T[];\r\n   columns: Column<T>[];\r\n   onEdit?: (row: T) => void;\r\n   onDelete?: (row: T) => void;\r\n   onView?: (row: T) => void;\r\n+  onBulkAction?: (action: string, selectedRows: T[]) => void;\r\n   searchable?: boolean;\r\n   searchPlaceholder?: string;\r\n   emptyMessage?: string;\r\n+  loading?: boolean;\r\n+  pagination?: boolean;\r\n+  pageSize?: number;\r\n+  selectable?: boolean;\r\n+  bulkActions?: Array<{ label: string; value: string; icon?: React.ReactNode; variant?: 'default' | 'danger' }>;\r\n+  filters?: FilterOption[];\r\n+  exportable?: boolean;\r\n+  onExport?: (data: T[]) => void;\r\n+  refreshable?: boolean;\r\n+  onRefresh?: () => void;\r\n+  className?: string;\r\n+  rowClassName?: (row: T) => string;\r\n+  onRowClick?: (row: T) => void;\r\n+  actions?: Array<{\r\n+    label: string;\r\n+    icon: React.ReactNode;\r\n+    onClick: (row: T) => void;\r\n+    variant?: 'default' | 'danger' | 'warning';\r\n+    condition?: (row: T) => boolean;\r\n+  }>;\r\n }\r\n \r\n export function DataTable<T extends { id: string }>({\r\n   data,\r\n   columns,\r\n   onEdit,\r\n   onDelete,\r\n   onView,\r\n+  onBulkAction,\r\n   searchable = true,\r\n   searchPlaceholder = 'Search...',\r\n   emptyMessage = 'No data available',\r\n+  loading = false,\r\n+  pagination = true,\r\n+  pageSize = 10,\r\n+  selectable = false,\r\n+  bulkActions = [],\r\n+  filters = [],\r\n+  exportable = false,\r\n+  onExport,\r\n+  refreshable = false,\r\n+  onRefresh,\r\n+  className,\r\n+  rowClassName,\r\n+  onRowClick,\r\n+  actions = [],\r\n }: DataTableProps<T>) {\r\n-  const [searchTerm, setSearchTerm] = React.useState('');\r\n-  const [sortColumn, setSortColumn] = React.useState<keyof T | null>(null);\r\n-  const [sortDirection, setSortDirection] = React.useState<'asc' | 'desc'>('asc');\r\n+  const [searchTerm, setSearchTerm] = useState('');\r\n+  const [sortColumn, setSortColumn] = useState<keyof T | null>(null);\r\n+  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set());\r\n+  const [showFilters, setShowFilters] = useState(false);\r\n+  const [activeFilters, setActiveFilters] = useState<Record<string, any>>({});\r\n+  const [showBulkActions, setShowBulkActions] = useState(false);\r\n+  const tableRef = useRef<HTMLDivElement>(null);\r\n \r\n-  const filteredData = React.useMemo(() => {\r\n+  // Filter and sort data\r\n+  const processedData = useMemo(() => {\r\n     let filtered = data;\r\n \r\n+    // Apply search\r\n     if (searchTerm) {\r\n       filtered = data.filter((item) =>\r\n         columns.some((col) => {\r\n           const value = item[col.key];\r\n@@ -45,20 +120,43 @@\n         })\r\n       );\r\n     }\r\n \r\n+    // Apply filters\r\n+    Object.entries(activeFilters).forEach(([key, value]) => {\r\n+      if (value !== '' && value !== null && value !== undefined) {\r\n+        filtered = filtered.filter((item) => {\r\n+          const itemValue = item[key as keyof T];\r\n+          if (typeof value === 'string') {\r\n+            return String(itemValue).toLowerCase().includes(value.toLowerCase());\r\n+          }\r\n+          return itemValue === value;\r\n+        });\r\n+      }\r\n+    });\r\n+\r\n+    // Apply sorting\r\n     if (sortColumn) {\r\n       filtered.sort((a, b) => {\r\n-        const aVal = a[sortColumn];\r\n-        const bVal = b[sortColumn];\r\n-        const result = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\r\n-        return sortDirection === 'asc' ? result : -result;\r\n+        const aValue = a[sortColumn];\r\n+        const bValue = b[sortColumn];\r\n+        \r\n+        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\r\n+        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\r\n+        return 0;\r\n       });\r\n     }\r\n \r\n     return filtered;\r\n-  }, [data, searchTerm, sortColumn, sortDirection]);\r\n+  }, [data, searchTerm, sortColumn, sortDirection, activeFilters, columns]);\r\n \r\n+  // Pagination\r\n+  const totalPages = Math.ceil(processedData.length / pageSize);\r\n+  const startIndex = (currentPage - 1) * pageSize;\r\n+  const endIndex = startIndex + pageSize;\r\n+  const paginatedData = pagination ? processedData.slice(startIndex, endIndex) : processedData;\r\n+\r\n+  // Handle sorting\r\n   const handleSort = (column: keyof T) => {\r\n     if (sortColumn === column) {\r\n       setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n     } else {\r\n@@ -66,92 +164,405 @@\n       setSortDirection('asc');\r\n     }\r\n   };\r\n \r\n+  // Handle selection\r\n+  const handleSelectAll = () => {\r\n+    if (selectedRows.size === paginatedData.length) {\r\n+      setSelectedRows(new Set());\r\n+    } else {\r\n+      setSelectedRows(new Set(paginatedData.map(row => row.id)));\r\n+    }\r\n+  };\r\n+\r\n+  const handleSelectRow = (id: string) => {\r\n+    const newSelected = new Set(selectedRows);\r\n+    if (newSelected.has(id)) {\r\n+      newSelected.delete(id);\r\n+    } else {\r\n+      newSelected.add(id);\r\n+    }\r\n+    setSelectedRows(newSelected);\r\n+  };\r\n+\r\n+  // Handle bulk actions\r\n+  const handleBulkAction = (action: string) => {\r\n+    const selectedData = data.filter(row => selectedRows.has(row.id));\r\n+    onBulkAction?.(action, selectedData);\r\n+    setSelectedRows(new Set());\r\n+    setShowBulkActions(false);\r\n+  };\r\n+\r\n+  // Handle export\r\n+  const handleExport = () => {\r\n+    onExport?.(processedData);\r\n+  };\r\n+\r\n+  // Clear filters\r\n+  const clearFilters = () => {\r\n+    setActiveFilters({});\r\n+    setSearchTerm('');\r\n+  };\r\n+\r\n+  // Reset pagination when data changes\r\n+  useEffect(() => {\r\n+    setCurrentPage(1);\r\n+  }, [searchTerm, activeFilters]);\r\n+\r\n+  // Show bulk actions when rows are selected\r\n+  useEffect(() => {\r\n+    setShowBulkActions(selectedRows.size > 0);\r\n+  }, [selectedRows]);\r\n+\r\n+  const getSortIcon = (column: keyof T) => {\r\n+    if (sortColumn !== column) {\r\n+      return <ArrowUpDown className=\"h-4 w-4 text-gray-400\" />;\r\n+    }\r\n+    return sortDirection === 'asc' ? \r\n+      <ChevronUp className=\"h-4 w-4 text-bright-green\" /> : \r\n+      <ChevronDown className=\"h-4 w-4 text-bright-green\" />;\r\n+  };\r\n+\r\n+  const getStatusIcon = (row: T) => {\r\n+    // This is a placeholder - you can customize based on your data structure\r\n+    if ('status' in row) {\r\n+      const status = (row as any).status;\r\n+      switch (status) {\r\n+        case 'active':\r\n+        case 'completed':\r\n+        case 'delivered':\r\n+          return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n+        case 'pending':\r\n+        case 'in-progress':\r\n+          return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n+        case 'error':\r\n+        case 'failed':\r\n+          return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n+        default:\r\n+          return null;\r\n+      }\r\n+    }\r\n+    return null;\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"space-y-4\">\r\n-      {searchable && (\r\n-        <div className=\"relative\">\r\n-          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder={searchPlaceholder}\r\n-            value={searchTerm}\r\n-            onChange={(e) => setSearchTerm(e.target.value)}\r\n-            className=\"input-field pl-10\"\r\n-          />\r\n+    <div className={`space-y-4 ${className}`} ref={tableRef}>\r\n+      {/* Header Controls */}\r\n+      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\r\n+        {/* Search and Filters */}\r\n+        <div className=\"flex flex-col sm:flex-row gap-3 flex-1\">\r\n+          {searchable && (\r\n+            <div className=\"relative\">\r\n+              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n+              <input\r\n+                type=\"text\"\r\n+                value={searchTerm}\r\n+                onChange={(e) => setSearchTerm(e.target.value)}\r\n+                placeholder={searchPlaceholder}\r\n+                className=\"pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-bright-green focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 w-full sm:w-64\"\r\n+              />\r\n+            </div>\r\n+          )}\r\n+\r\n+          {filters.length > 0 && (\r\n+            <button\r\n+              onClick={() => setShowFilters(!showFilters)}\r\n+              className={clsx(\r\n+                'flex items-center space-x-2 px-3 py-2 rounded-lg border transition-colors',\r\n+                showFilters \r\n+                  ? 'bg-bright-green text-white border-bright-green' \r\n+                  : 'border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n+              )}\r\n+            >\r\n+              <Filter className=\"h-4 w-4\" />\r\n+              <span>Filters</span>\r\n+              {Object.values(activeFilters).some(v => v !== '' && v !== null && v !== undefined) && (\r\n+                <span className=\"px-1.5 py-0.5 bg-red-500 text-white text-xs rounded-full\">\r\n+                  {Object.values(activeFilters).filter(v => v !== '' && v !== null && v !== undefined).length}\r\n+                </span>\r\n+              )}\r\n+            </button>\r\n+          )}\r\n+\r\n+          {refreshable && (\r\n+            <button\r\n+              onClick={onRefresh}\r\n+              disabled={loading}\r\n+              className=\"flex items-center space-x-2 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors disabled:opacity-50\"\r\n+            >\r\n+              <RefreshCw className={clsx('h-4 w-4', loading && 'animate-spin')} />\r\n+              <span>Refresh</span>\r\n+            </button>\r\n+          )}\r\n         </div>\r\n+\r\n+        {/* Export and Bulk Actions */}\r\n+        <div className=\"flex items-center space-x-2\">\r\n+          {exportable && (\r\n+            <button\r\n+              onClick={handleExport}\r\n+              className=\"flex items-center space-x-2 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n+            >\r\n+              <Download className=\"h-4 w-4\" />\r\n+              <span>Export</span>\r\n+            </button>\r\n+          )}\r\n+\r\n+          {showBulkActions && bulkActions.length > 0 && (\r\n+            <div className=\"flex items-center space-x-2\">\r\n+              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n+                {selectedRows.size} selected\r\n+              </span>\r\n+              {bulkActions.map((action) => (\r\n+                <button\r\n+                  key={action.value}\r\n+                  onClick={() => handleBulkAction(action.value)}\r\n+                  className={clsx(\r\n+                    'flex items-center space-x-1 px-3 py-2 rounded-lg text-sm font-medium transition-colors',\r\n+                    action.variant === 'danger' \r\n+                      ? 'bg-red-600 hover:bg-red-700 text-white'\r\n+                      : 'bg-bright-green hover:bg-green-600 text-white'\r\n+                  )}\r\n+                >\r\n+                  {action.icon}\r\n+                  <span>{action.label}</span>\r\n+                </button>\r\n+              ))}\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {/* Filters Panel */}\r\n+      {showFilters && filters.length > 0 && (\r\n+        <div className=\"p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600\">\r\n+          <div className=\"flex items-center justify-between mb-4\">\r\n+            <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">Filters</h3>\r\n+            <button\r\n+              onClick={clearFilters}\r\n+              className=\"text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200\"\r\n+            >\r\n+              Clear all\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+            {filters.map((filter) => (\r\n+              <div key={filter.key}>\r\n+                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n+                  {filter.label}\r\n+                </label>\r\n+                {filter.type === 'text' && (\r\n+                  <input\r\n+                    type=\"text\"\r\n+                    value={activeFilters[filter.key] || ''}\r\n+                    onChange={(e) => setActiveFilters({ ...activeFilters, [filter.key]: e.target.value })}\r\n+                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-bright-green focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n+                  />\r\n+                )}\r\n+                {filter.type === 'select' && (\r\n+                  <select\r\n+                    value={activeFilters[filter.key] || ''}\r\n+                    onChange={(e) => setActiveFilters({ ...activeFilters, [filter.key]: e.target.value })}\r\n+                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-bright-green focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n+                  >\r\n+                    <option value=\"\">All</option>\r\n+                    {filter.options?.map((option) => (\r\n+                      <option key={option.value} value={option.value}>\r\n+                        {option.label}\r\n+                      </option>\r\n+                    ))}\r\n+                  </select>\r\n+                )}\r\n+                {filter.type === 'date' && (\r\n+                  <input\r\n+                    type=\"date\"\r\n+                    value={activeFilters[filter.key] || ''}\r\n+                    onChange={(e) => setActiveFilters({ ...activeFilters, [filter.key]: e.target.value })}\r\n+                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-bright-green focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n+                  />\r\n+                )}\r\n+                {filter.type === 'number' && (\r\n+                  <input\r\n+                    type=\"number\"\r\n+                    value={activeFilters[filter.key] || ''}\r\n+                    onChange={(e) => setActiveFilters({ ...activeFilters, [filter.key]: e.target.value })}\r\n+                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-bright-green focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n+                  />\r\n+                )}\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+        </div>\r\n       )}\r\n \r\n+      {/* Table */}\r\n       <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n-          <thead className=\"bg-gray-50 dark:bg-gray-800\">\r\n-            <tr>\r\n+        <table className=\"w-full border-collapse\">\r\n+          <thead>\r\n+            <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n+              {selectable && (\r\n+                <th className=\"px-4 py-3 text-left\">\r\n+                  <button\r\n+                    onClick={handleSelectAll}\r\n+                    className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n+                  >\r\n+                    {selectedRows.size === paginatedData.length && paginatedData.length > 0 ? (\r\n+                      <CheckSquare className=\"h-4 w-4\" />\r\n+                    ) : (\r\n+                      <Square className=\"h-4 w-4\" />\r\n+                    )}\r\n+                  </button>\r\n+                </th>\r\n+              )}\r\n               {columns.map((column) => (\r\n                 <th\r\n                   key={String(column.key)}\r\n                   className={clsx(\r\n-                    'px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider',\r\n-                    column.sortable && 'cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700'\r\n+                    'px-4 py-3 text-sm font-medium text-gray-700 dark:text-gray-300',\r\n+                    column.headerAlign === 'center' && 'text-center',\r\n+                    column.headerAlign === 'right' && 'text-right',\r\n+                    column.headerClassName\r\n                   )}\r\n-                  onClick={() => column.sortable && handleSort(column.key)}\r\n+                  style={{ width: column.width }}\r\n                 >\r\n-                  <div className=\"flex items-center space-x-1\">\r\n-                    <span>{column.label}</span>\r\n-                    {column.sortable && (\r\n-                      <ArrowUpDown className=\"h-3 w-3\" />\r\n-                    )}\r\n-                  </div>\r\n+                  {column.sortable ? (\r\n+                    <button\r\n+                      onClick={() => handleSort(column.key)}\r\n+                      className=\"flex items-center space-x-1 hover:text-gray-900 dark:hover:text-gray-100 transition-colors\"\r\n+                    >\r\n+                      <span>{column.label}</span>\r\n+                      {getSortIcon(column.key)}\r\n+                    </button>\r\n+                  ) : (\r\n+                    column.label\r\n+                  )}\r\n                 </th>\r\n               ))}\r\n-              {(onEdit || onDelete || onView) && (\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n+              {(onEdit || onDelete || onView || actions.length > 0) && (\r\n+                <th className=\"px-4 py-3 text-right text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                   Actions\r\n                 </th>\r\n               )}\r\n             </tr>\r\n           </thead>\r\n-          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\r\n-            {filteredData.length === 0 ? (\r\n+          <tbody>\r\n+            {loading ? (\r\n               <tr>\r\n-                <td\r\n-                  colSpan={columns.length + (onEdit || onDelete || onView ? 1 : 0)}\r\n-                  className=\"px-6 py-12 text-center text-gray-500 dark:text-gray-400\"\r\n-                >\r\n-                  {emptyMessage}\r\n+                <td colSpan={columns.length + (selectable ? 1 : 0) + ((onEdit || onDelete || onView || actions.length > 0) ? 1 : 0)} className=\"px-4 py-8 text-center\">\r\n+                  <div className=\"flex items-center justify-center space-x-2\">\r\n+                    <RefreshCw className=\"h-5 w-5 animate-spin text-bright-green\" />\r\n+                    <span className=\"text-gray-600 dark:text-gray-400\">Loading...</span>\r\n+                  </div>\r\n                 </td>\r\n               </tr>\r\n+            ) : paginatedData.length === 0 ? (\r\n+              <tr>\r\n+                <td colSpan={columns.length + (selectable ? 1 : 0) + ((onEdit || onDelete || onView || actions.length > 0) ? 1 : 0)} className=\"px-4 py-8 text-center\">\r\n+                  <div className=\"text-gray-500 dark:text-gray-400\">\r\n+                    <AlertCircle className=\"h-8 w-8 mx-auto mb-2\" />\r\n+                    <p>{emptyMessage}</p>\r\n+                  </div>\r\n+                </td>\r\n+              </tr>\r\n             ) : (\r\n-              filteredData.map((row) => (\r\n-                <tr key={row.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\r\n+              paginatedData.map((row) => (\r\n+                <tr\r\n+                  key={row.id}\r\n+                  className={clsx(\r\n+                    'border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors',\r\n+                    onRowClick && 'cursor-pointer',\r\n+                    rowClassName?.(row)\r\n+                  )}\r\n+                  onClick={() => onRowClick?.(row)}\r\n+                >\r\n+                  {selectable && (\r\n+                    <td className=\"px-4 py-3\">\r\n+                      <button\r\n+                        onClick={(e) => {\r\n+                          e.stopPropagation();\r\n+                          handleSelectRow(row.id);\r\n+                        }}\r\n+                        className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n+                      >\r\n+                        {selectedRows.has(row.id) ? (\r\n+                          <CheckSquare className=\"h-4 w-4 text-bright-green\" />\r\n+                        ) : (\r\n+                          <Square className=\"h-4 w-4\" />\r\n+                        )}\r\n+                      </button>\r\n+                    </td>\r\n+                  )}\r\n                   {columns.map((column) => (\r\n-                    <td key={String(column.key)} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\">\r\n-                      {column.render ? column.render(row[column.key], row) : String(row[column.key])}\r\n+                    <td\r\n+                      key={String(column.key)}\r\n+                      className={clsx(\r\n+                        'px-4 py-3 text-sm text-gray-900 dark:text-gray-100',\r\n+                        column.align === 'center' && 'text-center',\r\n+                        column.align === 'right' && 'text-right',\r\n+                        column.className\r\n+                      )}\r\n+                    >\r\n+                      {column.render ? column.render(row[column.key], row) : String(row[column.key] || '-')}\r\n                     </td>\r\n                   ))}\r\n-                  {(onEdit || onDelete || onView) && (\r\n-                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n-                      <div className=\"flex items-center space-x-2\">\r\n+                  {(onEdit || onDelete || onView || actions.length > 0) && (\r\n+                    <td className=\"px-4 py-3 text-right\">\r\n+                      <div className=\"flex items-center justify-end space-x-2\">\r\n+                        {actions.map((action, index) => {\r\n+                          if (action.condition && !action.condition(row)) return null;\r\n+                          return (\r\n+                            <button\r\n+                              key={index}\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                action.onClick(row);\r\n+                              }}\r\n+                              className={clsx(\r\n+                                'p-1 rounded-md transition-colors',\r\n+                                action.variant === 'danger' \r\n+                                  ? 'text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20'\r\n+                                  : action.variant === 'warning'\r\n+                                  ? 'text-yellow-600 hover:bg-yellow-50 dark:hover:bg-yellow-900/20'\r\n+                                  : 'text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n+                              )}\r\n+                              title={action.label}\r\n+                            >\r\n+                              {action.icon}\r\n+                            </button>\r\n+                          );\r\n+                        })}\r\n                         {onView && (\r\n                           <button\r\n-                            onClick={() => onView(row)}\r\n-                            className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300\"\r\n+                            onClick={(e) => {\r\n+                              e.stopPropagation();\r\n+                              onView(row);\r\n+                            }}\r\n+                            className=\"p-1 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-md transition-colors\"\r\n+                            title=\"View\"\r\n                           >\r\n                             <Eye className=\"h-4 w-4\" />\r\n                           </button>\r\n                         )}\r\n                         {onEdit && (\r\n                           <button\r\n-                            onClick={() => onEdit(row)}\r\n-                            className=\"text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300\"\r\n+                            onClick={(e) => {\r\n+                              e.stopPropagation();\r\n+                              onEdit(row);\r\n+                            }}\r\n+                            className=\"p-1 text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors\"\r\n+                            title=\"Edit\"\r\n                           >\r\n                             <Edit className=\"h-4 w-4\" />\r\n                           </button>\r\n                         )}\r\n                         {onDelete && (\r\n                           <button\r\n-                            onClick={() => onDelete(row)}\r\n-                            className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300\"\r\n+                            onClick={(e) => {\r\n+                              e.stopPropagation();\r\n+                              onDelete(row);\r\n+                            }}\r\n+                            className=\"p-1 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors\"\r\n+                            title=\"Delete\"\r\n                           >\r\n                             <Trash2 className=\"h-4 w-4\" />\r\n                           </button>\r\n                         )}\r\n@@ -163,7 +574,51 @@\n             )}\r\n           </tbody>\r\n         </table>\r\n       </div>\r\n+\r\n+      {/* Pagination */}\r\n+      {pagination && totalPages > 1 && (\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n+            Showing {startIndex + 1} to {Math.min(endIndex, processedData.length)} of {processedData.length} results\r\n+          </div>\r\n+          <div className=\"flex items-center space-x-2\">\r\n+            <button\r\n+              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\r\n+              disabled={currentPage === 1}\r\n+              className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n+            >\r\n+              Previous\r\n+            </button>\r\n+            <div className=\"flex items-center space-x-1\">\r\n+              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\r\n+                const page = i + 1;\r\n+                return (\r\n+                  <button\r\n+                    key={page}\r\n+                    onClick={() => setCurrentPage(page)}\r\n+                    className={clsx(\r\n+                      'px-3 py-2 rounded-lg transition-colors',\r\n+                      currentPage === page\r\n+                        ? 'bg-bright-green text-white'\r\n+                        : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n+                    )}\r\n+                  >\r\n+                    {page}\r\n+                  </button>\r\n+                );\r\n+              })}\r\n+            </div>\r\n+            <button\r\n+              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\r\n+              disabled={currentPage === totalPages}\r\n+              className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n+            >\r\n+              Next\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760602445653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -573,8 +573,9 @@\n               ))\r\n             )}\r\n           </tbody>\r\n         </table>\r\n+        </div>\r\n       </div>\r\n \r\n       {/* Pagination */}\r\n       {pagination && totalPages > 1 && (\r\n"
                },
                {
                    "date": 1760602709591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -573,9 +573,8 @@\n               ))\r\n             )}\r\n           </tbody>\r\n         </table>\r\n-        </div>\r\n       </div>\r\n \r\n       {/* Pagination */}\r\n       {pagination && totalPages > 1 && (\r\n"
                },
                {
                    "date": 1760603198462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,10 +394,10 @@\n         </div>\r\n       )}\r\n \r\n       {/* Table */}\r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"w-full border-collapse\">\r\n+      <div className=\"w-full\">\r\n+        <table className=\"w-full border-collapse table-fixed\">\r\n           <thead>\r\n             <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n               {selectable && (\r\n                 <th className=\"px-4 py-3 text-left\">\r\n"
                },
                {
                    "date": 1760603260852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,9 +416,9 @@\n               {columns.map((column) => (\r\n                 <th\r\n                   key={String(column.key)}\r\n                   className={clsx(\r\n-                    'px-4 py-3 text-sm font-medium text-gray-700 dark:text-gray-300',\r\n+                    'px-2 py-2 text-xs font-medium text-gray-700 dark:text-gray-300',\r\n                     column.headerAlign === 'center' && 'text-center',\r\n                     column.headerAlign === 'right' && 'text-right',\r\n                     column.headerClassName\r\n                   )}\r\n"
                },
                {
                    "date": 1760603279421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n         <table className=\"w-full border-collapse table-fixed\">\r\n           <thead>\r\n             <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n               {selectable && (\r\n-                <th className=\"px-4 py-3 text-left\">\r\n+                <th className=\"px-2 py-2 text-left\">\r\n                   <button\r\n                     onClick={handleSelectAll}\r\n                     className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                   >\r\n@@ -494,9 +494,9 @@\n                   {columns.map((column) => (\r\n                     <td\r\n                       key={String(column.key)}\r\n                       className={clsx(\r\n-                        'px-4 py-3 text-sm text-gray-900 dark:text-gray-100',\r\n+                        'px-2 py-2 text-xs text-gray-900 dark:text-gray-100',\r\n                         column.align === 'center' && 'text-center',\r\n                         column.align === 'right' && 'text-right',\r\n                         column.className\r\n                       )}\r\n"
                },
                {
                    "date": 1760603289891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -437,9 +437,9 @@\n                   )}\r\n                 </th>\r\n               ))}\r\n               {(onEdit || onDelete || onView || actions.length > 0) && (\r\n-                <th className=\"px-4 py-3 text-right text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n+                <th className=\"px-2 py-2 text-right text-xs font-medium text-gray-700 dark:text-gray-300\">\r\n                   Actions\r\n                 </th>\r\n               )}\r\n             </tr>\r\n"
                },
                {
                    "date": 1760603314243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -474,9 +474,9 @@\n                   )}\r\n                   onClick={() => onRowClick?.(row)}\r\n                 >\r\n                   {selectable && (\r\n-                    <td className=\"px-4 py-3\">\r\n+                    <td className=\"px-2 py-2\">\r\n                       <button\r\n                         onClick={(e) => {\r\n                           e.stopPropagation();\r\n                           handleSelectRow(row.id);\r\n"
                },
                {
                    "date": 1760603328178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -504,9 +504,9 @@\n                       {column.render ? column.render(row[column.key], row) : String(row[column.key] || '-')}\r\n                     </td>\r\n                   ))}\r\n                   {(onEdit || onDelete || onView || actions.length > 0) && (\r\n-                    <td className=\"px-4 py-3 text-right\">\r\n+                    <td className=\"px-2 py-2 text-right\">\r\n                       <div className=\"flex items-center justify-end space-x-2\">\r\n                         {actions.map((action, index) => {\r\n                           if (action.condition && !action.condition(row)) return null;\r\n                           return (\r\n"
                },
                {
                    "date": 1760603750147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,10 +394,10 @@\n         </div>\r\n       )}\r\n \r\n       {/* Table */}\r\n-      <div className=\"w-full\">\r\n-        <table className=\"w-full border-collapse table-fixed\">\r\n+      <div className=\"w-full overflow-hidden\">\r\n+        <table className=\"w-full border-collapse\">\r\n           <thead>\r\n             <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n               {selectable && (\r\n                 <th className=\"px-2 py-2 text-left\">\r\n"
                },
                {
                    "date": 1760603765206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,9 +397,9 @@\n       {/* Table */}\r\n       <div className=\"w-full overflow-hidden\">\r\n         <table className=\"w-full border-collapse\">\r\n           <thead>\r\n-            <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n+            <tr className=\"border-b-2 border-emerald-200 dark:border-emerald-700 bg-gradient-to-r from-emerald-50 to-teal-50 dark:from-emerald-900/20 dark:to-teal-900/20\">\r\n               {selectable && (\r\n                 <th className=\"px-2 py-2 text-left\">\r\n                   <button\r\n                     onClick={handleSelectAll}\r\n"
                },
                {
                    "date": 1760603779054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,9 +467,9 @@\n               paginatedData.map((row) => (\r\n                 <tr\r\n                   key={row.id}\r\n                   className={clsx(\r\n-                    'border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors',\r\n+                    'border-b border-gray-100 dark:border-gray-700 hover:bg-gradient-to-r hover:from-emerald-50 hover:to-teal-50 dark:hover:from-emerald-900/10 dark:hover:to-teal-900/10 transition-all duration-200',\r\n                     onRowClick && 'cursor-pointer',\r\n                     rowClassName?.(row)\r\n                   )}\r\n                   onClick={() => onRowClick?.(row)}\r\n"
                },
                {
                    "date": 1760605210193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,14 @@\n   ChevronUp, \r\n   ChevronDown,\r\n   Filter,\r\n   Download,\r\n-  MoreHorizontal,\r\n   CheckSquare,\r\n   Square,\r\n   RefreshCw,\r\n   AlertCircle,\r\n   CheckCircle,\r\n-  Clock,\r\n-  X\r\n+  Clock\r\n } from 'lucide-react';\r\n import { clsx } from 'clsx';\r\n \r\n interface Column<T> {\r\n@@ -222,26 +220,8 @@\n       <ChevronDown className=\"h-4 w-4 text-bright-green\" />;\r\n   };\r\n \r\n   const getStatusIcon = (row: T) => {\r\n-    // This is a placeholder - you can customize based on your data structure\r\n-    if ('status' in row) {\r\n-      const status = (row as any).status;\r\n-      switch (status) {\r\n-        case 'active':\r\n-        case 'completed':\r\n-        case 'delivered':\r\n-          return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n-        case 'pending':\r\n-        case 'in-progress':\r\n-          return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n-        case 'error':\r\n-        case 'failed':\r\n-          return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n-        default:\r\n-          return null;\r\n-      }\r\n-    }\r\n     return null;\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1760605245657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,9 @@\n   Download,\r\n   CheckSquare,\r\n   Square,\r\n   RefreshCw,\r\n-  AlertCircle,\r\n-  CheckCircle,\r\n-  Clock\r\n+  AlertCircle\r\n } from 'lucide-react';\r\n import { clsx } from 'clsx';\r\n \r\n interface Column<T> {\r\n@@ -219,12 +217,8 @@\n       <ChevronUp className=\"h-4 w-4 text-bright-green\" /> : \r\n       <ChevronDown className=\"h-4 w-4 text-bright-green\" />;\r\n   };\r\n \r\n-  const getStatusIcon = (row: T) => {\r\n-    return null;\r\n-  };\r\n-\r\n   return (\r\n     <div className={`space-y-4 ${className}`} ref={tableRef}>\r\n       {/* Header Controls */}\r\n       <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\r\n"
                }
            ],
            "date": 1759566761831,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Edit, Trash2, Eye, Search, ArrowUpDown } from 'lucide-react';\r\nimport { clsx } from 'clsx';\r\n\r\ninterface Column<T> {\r\n  key: keyof T;\r\n  label: string;\r\n  render?: (value: any, row: T) => React.ReactNode;\r\n  sortable?: boolean;\r\n}\r\n\r\ninterface DataTableProps<T> {\r\n  data: T[];\r\n  columns: Column<T>[];\r\n  onEdit?: (row: T) => void;\r\n  onDelete?: (row: T) => void;\r\n  onView?: (row: T) => void;\r\n  searchable?: boolean;\r\n  searchPlaceholder?: string;\r\n  emptyMessage?: string;\r\n}\r\n\r\nexport function DataTable<T extends { id: string }>({\r\n  data,\r\n  columns,\r\n  onEdit,\r\n  onDelete,\r\n  onView,\r\n  searchable = true,\r\n  searchPlaceholder = 'Search...',\r\n  emptyMessage = 'No data available',\r\n}: DataTableProps<T>) {\r\n  const [searchTerm, setSearchTerm] = React.useState('');\r\n  const [sortColumn, setSortColumn] = React.useState<keyof T | null>(null);\r\n  const [sortDirection, setSortDirection] = React.useState<'asc' | 'desc'>('asc');\r\n\r\n  const filteredData = React.useMemo(() => {\r\n    let filtered = data;\r\n\r\n    if (searchTerm) {\r\n      filtered = data.filter((item) =>\r\n        columns.some((col) => {\r\n          const value = item[col.key];\r\n          return String(value).toLowerCase().includes(searchTerm.toLowerCase());\r\n        })\r\n      );\r\n    }\r\n\r\n    if (sortColumn) {\r\n      filtered.sort((a, b) => {\r\n        const aVal = a[sortColumn];\r\n        const bVal = b[sortColumn];\r\n        const result = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\r\n        return sortDirection === 'asc' ? result : -result;\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  }, [data, searchTerm, sortColumn, sortDirection]);\r\n\r\n  const handleSort = (column: keyof T) => {\r\n    if (sortColumn === column) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortColumn(column);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {searchable && (\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder={searchPlaceholder}\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"input-field pl-10\"\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\r\n            <tr>\r\n              {columns.map((column) => (\r\n                <th\r\n                  key={String(column.key)}\r\n                  className={clsx(\r\n                    'px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider',\r\n                    column.sortable && 'cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                  )}\r\n                  onClick={() => column.sortable && handleSort(column.key)}\r\n                >\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <span>{column.label}</span>\r\n                    {column.sortable && (\r\n                      <ArrowUpDown className=\"h-3 w-3\" />\r\n                    )}\r\n                  </div>\r\n                </th>\r\n              ))}\r\n              {(onEdit || onDelete || onView) && (\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                  Actions\r\n                </th>\r\n              )}\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\r\n            {filteredData.length === 0 ? (\r\n              <tr>\r\n                <td\r\n                  colSpan={columns.length + (onEdit || onDelete || onView ? 1 : 0)}\r\n                  className=\"px-6 py-12 text-center text-gray-500 dark:text-gray-400\"\r\n                >\r\n                  {emptyMessage}\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              filteredData.map((row) => (\r\n                <tr key={row.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\r\n                  {columns.map((column) => (\r\n                    <td key={String(column.key)} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\">\r\n                      {column.render ? column.render(row[column.key], row) : String(row[column.key])}\r\n                    </td>\r\n                  ))}\r\n                  {(onEdit || onDelete || onView) && (\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        {onView && (\r\n                          <button\r\n                            onClick={() => onView(row)}\r\n                            className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300\"\r\n                          >\r\n                            <Eye className=\"h-4 w-4\" />\r\n                          </button>\r\n                        )}\r\n                        {onEdit && (\r\n                          <button\r\n                            onClick={() => onEdit(row)}\r\n                            className=\"text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300\"\r\n                          >\r\n                            <Edit className=\"h-4 w-4\" />\r\n                          </button>\r\n                        )}\r\n                        {onDelete && (\r\n                          <button\r\n                            onClick={() => onDelete(row)}\r\n                            className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300\"\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              ))\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}