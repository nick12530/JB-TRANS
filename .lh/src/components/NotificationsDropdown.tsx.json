{
    "sourceFile": "src/components/NotificationsDropdown.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759905442447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759905442447,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from 'react';\r\nimport { Bell, X, CheckCircle, AlertTriangle, Info, AlertCircle, Trash2 } from 'lucide-react';\r\nimport { useNotifications } from '../context/NotificationsContext';\r\nimport { formatDate } from '../utils/helpers';\r\n\r\ninterface NotificationsDropdownProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const NotificationsDropdown: React.FC<NotificationsDropdownProps> = ({ isOpen, onClose }) => {\r\n  const { notifications, unreadCount, markAsRead, markAllAsRead, removeNotification } = useNotifications();\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  const getNotificationIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'success':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'warning':\r\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\r\n      case 'error':\r\n        return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\r\n      default:\r\n        return <Info className=\"h-4 w-4 text-blue-600\" />;\r\n    }\r\n  };\r\n\r\n  const getNotificationBgColor = (type: string) => {\r\n    switch (type) {\r\n      case 'success':\r\n        return 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800';\r\n      case 'warning':\r\n        return 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800';\r\n      case 'error':\r\n        return 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800';\r\n      default:\r\n        return 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800';\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div\r\n      ref={dropdownRef}\r\n      className=\"absolute right-0 mt-2 w-96 bg-white dark:bg-gray-800 rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 z-50\"\r\n    >\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Bell className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\r\n          <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">Notifications</h3>\r\n          {unreadCount > 0 && (\r\n            <span className=\"px-2 py-1 bg-red-500 text-white text-xs rounded-full\">\r\n              {unreadCount}\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          {unreadCount > 0 && (\r\n            <button\r\n              onClick={markAllAsRead}\r\n              className=\"text-xs text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\r\n            >\r\n              Mark all read\r\n            </button>\r\n          )}\r\n          <button\r\n            onClick={onClose}\r\n            className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\r\n          >\r\n            <X className=\"h-4 w-4 text-gray-500\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Notifications List */}\r\n      <div className=\"max-h-96 overflow-y-auto\">\r\n        {notifications.length === 0 ? (\r\n          <div className=\"p-8 text-center\">\r\n            <Bell className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\r\n            <p className=\"text-gray-500 dark:text-gray-400 font-medium\">No notifications</p>\r\n            <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-1\">\r\n              You're all caught up!\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"p-2\">\r\n            {notifications.map((notification) => (\r\n              <div\r\n                key={notification.id}\r\n                className={`p-3 rounded-lg border mb-2 transition-all duration-200 hover:shadow-md ${\r\n                  notification.read \r\n                    ? 'bg-gray-50 dark:bg-gray-700/50' \r\n                    : getNotificationBgColor(notification.type)\r\n                }`}\r\n              >\r\n                <div className=\"flex items-start space-x-3\">\r\n                  <div className=\"flex-shrink-0 mt-0.5\">\r\n                    {getNotificationIcon(notification.type)}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <p className={`text-sm font-medium ${\r\n                          notification.read \r\n                            ? 'text-gray-600 dark:text-gray-400' \r\n                            : 'text-gray-900 dark:text-gray-100'\r\n                        }`}>\r\n                          {notification.title}\r\n                        </p>\r\n                        <p className={`text-sm mt-1 ${\r\n                          notification.read \r\n                            ? 'text-gray-500 dark:text-gray-500' \r\n                            : 'text-gray-700 dark:text-gray-300'\r\n                        }`}>\r\n                          {notification.message}\r\n                        </p>\r\n                        <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-2\">\r\n                          {formatDate(notification.timestamp.toISOString())}\r\n                        </p>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center space-x-1 ml-2\">\r\n                        {!notification.read && (\r\n                          <button\r\n                            onClick={() => markAsRead(notification.id)}\r\n                            className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-600 rounded transition-colors\"\r\n                            title=\"Mark as read\"\r\n                          >\r\n                            <CheckCircle className=\"h-3 w-3 text-gray-400\" />\r\n                          </button>\r\n                        )}\r\n                        <button\r\n                          onClick={() => removeNotification(notification.id)}\r\n                          className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-600 rounded transition-colors\"\r\n                          title=\"Remove notification\"\r\n                        >\r\n                          <Trash2 className=\"h-3 w-3 text-gray-400\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {notification.action && (\r\n                      <button\r\n                        onClick={notification.action.onClick}\r\n                        className=\"mt-2 text-xs text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\r\n                      >\r\n                        {notification.action.label} â†’\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      {notifications.length > 0 && (\r\n        <div className=\"p-3 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50 rounded-b-xl\">\r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\r\n            {notifications.length} notification{notifications.length !== 1 ? 's' : ''} total\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}