{
    "sourceFile": "src/components/FormInput.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1759566551419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759906151944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,255 @@\n-import React from 'react';\r\n+import React, { useState, useRef } from 'react';\r\n import { clsx } from 'clsx';\r\n+import { Eye, EyeOff, AlertCircle, CheckCircle, Info } from 'lucide-react';\r\n \r\n interface FormInputProps {\r\n   label: string;\r\n   type?: string;\r\n   value: string | number;\r\n   onChange: (value: string | number) => void;\r\n   error?: string;\r\n+  success?: string;\r\n+  info?: string;\r\n   required?: boolean;\r\n   placeholder?: string;\r\n   disabled?: boolean;\r\n   className?: string;\r\n+  min?: number;\r\n+  max?: number;\r\n+  step?: number;\r\n+  pattern?: string;\r\n+  maxLength?: number;\r\n+  minLength?: number;\r\n+  autoComplete?: string;\r\n+  autoFocus?: boolean;\r\n+  readOnly?: boolean;\r\n+  showPasswordToggle?: boolean;\r\n+  leftIcon?: React.ReactNode;\r\n+  rightIcon?: React.ReactNode;\r\n+  validation?: {\r\n+    required?: boolean;\r\n+    min?: number;\r\n+    max?: number;\r\n+    pattern?: RegExp;\r\n+    custom?: (value: string) => string | null;\r\n+  };\r\n+  onBlur?: () => void;\r\n+  onFocus?: () => void;\r\n+  onKeyDown?: (e: React.KeyboardEvent) => void;\r\n }\r\n \r\n export const FormInput: React.FC<FormInputProps> = ({\r\n   label,\r\n   type = 'text',\r\n   value,\r\n   onChange,\r\n   error,\r\n+  success,\r\n+  info,\r\n   required = false,\r\n   placeholder,\r\n   disabled = false,\r\n   className,\r\n+  min,\r\n+  max,\r\n+  step,\r\n+  pattern,\r\n+  maxLength,\r\n+  minLength,\r\n+  autoComplete,\r\n+  autoFocus = false,\r\n+  readOnly = false,\r\n+  showPasswordToggle = false,\r\n+  leftIcon,\r\n+  rightIcon,\r\n+  validation,\r\n+  onBlur,\r\n+  onFocus,\r\n+  onKeyDown,\r\n }) => {\r\n+  const [showPassword, setShowPassword] = useState(false);\r\n+  const [isFocused, setIsFocused] = useState(false);\r\n+  const [validationError, setValidationError] = useState<string | null>(null);\r\n+  const inputRef = useRef<HTMLInputElement>(null);\r\n+\r\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const newValue = type === 'number' ? Number(e.target.value) : e.target.value;\r\n+    onChange(newValue);\r\n+    \r\n+    // Real-time validation\r\n+    if (validation) {\r\n+      const error = validateInput(e.target.value, validation);\r\n+      setValidationError(error);\r\n+    }\r\n+  };\r\n+\r\n+  const validateInput = (value: string, rules: NonNullable<FormInputProps['validation']>): string | null => {\r\n+    if (rules.required && !value.trim()) {\r\n+      return 'This field is required';\r\n+    }\r\n+    \r\n+    if (rules.min && value.length < rules.min) {\r\n+      return `Minimum length is ${rules.min} characters`;\r\n+    }\r\n+    \r\n+    if (rules.max && value.length > rules.max) {\r\n+      return `Maximum length is ${rules.max} characters`;\r\n+    }\r\n+    \r\n+    if (rules.pattern && !rules.pattern.test(value)) {\r\n+      return 'Invalid format';\r\n+    }\r\n+    \r\n+    if (rules.custom) {\r\n+      return rules.custom(value);\r\n+    }\r\n+    \r\n+    return null;\r\n+  };\r\n+\r\n+  const handleFocus = () => {\r\n+    setIsFocused(true);\r\n+    onFocus?.();\r\n+  };\r\n+\r\n+  const handleBlur = () => {\r\n+    setIsFocused(false);\r\n+    onBlur?.();\r\n+  };\r\n+\r\n+  const getInputType = () => {\r\n+    if (type === 'password' && showPasswordToggle) {\r\n+      return showPassword ? 'text' : 'password';\r\n+    }\r\n+    return type;\r\n+  };\r\n+\r\n+  const getStatusIcon = () => {\r\n+    if (error || validationError) {\r\n+      return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n+    }\r\n+    if (success) {\r\n+      return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n+    }\r\n+    if (info) {\r\n+      return <Info className=\"h-4 w-4 text-blue-500\" />;\r\n+    }\r\n+    return null;\r\n+  };\r\n+\r\n+  const getStatusColor = () => {\r\n+    if (error || validationError) {\r\n+      return 'border-red-500 focus:ring-red-500 focus:border-red-500';\r\n+    }\r\n+    if (success) {\r\n+      return 'border-green-500 focus:ring-green-500 focus:border-green-500';\r\n+    }\r\n+    if (isFocused) {\r\n+      return 'border-bright-green focus:ring-bright-green focus:border-bright-green';\r\n+    }\r\n+    return 'border-gray-300 dark:border-gray-600 focus:ring-bright-green focus:border-bright-green';\r\n+  };\r\n+\r\n   return (\r\n-    <div className={`space-y-1 ${className}`}>\r\n-      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n-        {label}\r\n-        {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n+    <div className={`space-y-2 ${className}`}>\r\n+      {/* Label */}\r\n+      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center space-x-1\">\r\n+        <span>{label}</span>\r\n+        {required && <span className=\"text-red-500\">*</span>}\r\n+        {info && <Info className=\"h-3 w-3 text-gray-400\" title={info} />}\r\n       </label>\r\n-      <input\r\n-        type={type}\r\n-        value={value}\r\n-        onChange={(e) => onChange(type === 'number' ? Number(e.target.value) : e.target.value)}\r\n-        placeholder={placeholder}\r\n-        disabled={disabled}\r\n-        className={clsx(\r\n-          'input-field',\r\n-          error && 'border-red-500 focus:ring-red-500',\r\n-          disabled && 'opacity-50 cursor-not-allowed'\r\n+\r\n+      {/* Input Container */}\r\n+      <div className=\"relative\">\r\n+        {/* Left Icon */}\r\n+        {leftIcon && (\r\n+          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\r\n+            {leftIcon}\r\n+          </div>\r\n         )}\r\n-      />\r\n-      {error && <p className=\"text-sm text-red-600 dark:text-red-400\">{error}</p>}\r\n+\r\n+        {/* Input Field */}\r\n+        <input\r\n+          ref={inputRef}\r\n+          type={getInputType()}\r\n+          value={value}\r\n+          onChange={handleChange}\r\n+          onFocus={handleFocus}\r\n+          onBlur={handleBlur}\r\n+          onKeyDown={onKeyDown}\r\n+          placeholder={placeholder}\r\n+          disabled={disabled}\r\n+          readOnly={readOnly}\r\n+          autoFocus={autoFocus}\r\n+          autoComplete={autoComplete}\r\n+          min={min}\r\n+          max={max}\r\n+          step={step}\r\n+          pattern={pattern}\r\n+          maxLength={maxLength}\r\n+          minLength={minLength}\r\n+          className={clsx(\r\n+            'w-full px-3 py-3 rounded-lg transition-all duration-200',\r\n+            'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100',\r\n+            'focus:outline-none focus:ring-2 focus:ring-opacity-50',\r\n+            getStatusColor(),\r\n+            leftIcon && 'pl-10',\r\n+            (rightIcon || showPasswordToggle || getStatusIcon()) && 'pr-10',\r\n+            disabled && 'opacity-50 cursor-not-allowed bg-gray-100 dark:bg-gray-800',\r\n+            readOnly && 'bg-gray-50 dark:bg-gray-800 cursor-default',\r\n+            error || validationError ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\r\n+          )}\r\n+        />\r\n+\r\n+        {/* Right Icons */}\r\n+        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-1\">\r\n+          {getStatusIcon()}\r\n+          {rightIcon}\r\n+          {showPasswordToggle && type === 'password' && (\r\n+            <button\r\n+              type=\"button\"\r\n+              onClick={() => setShowPassword(!showPassword)}\r\n+              className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n+            >\r\n+              {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n+            </button>\r\n+          )}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {/* Messages */}\r\n+      <div className=\"space-y-1\">\r\n+        {(error || validationError) && (\r\n+          <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center space-x-1\">\r\n+            <AlertCircle className=\"h-3 w-3\" />\r\n+            <span>{error || validationError}</span>\r\n+          </p>\r\n+        )}\r\n+        {success && (\r\n+          <p className=\"text-sm text-green-600 dark:text-green-400 flex items-center space-x-1\">\r\n+            <CheckCircle className=\"h-3 w-3\" />\r\n+            <span>{success}</span>\r\n+          </p>\r\n+        )}\r\n+        {info && !error && !validationError && (\r\n+          <p className=\"text-sm text-blue-600 dark:text-blue-400 flex items-center space-x-1\">\r\n+            <Info className=\"h-3 w-3\" />\r\n+            <span>{info}</span>\r\n+          </p>\r\n+        )}\r\n+      </div>\r\n+\r\n+      {/* Character Count */}\r\n+      {maxLength && typeof value === 'string' && (\r\n+        <div className=\"text-right\">\r\n+          <span className={clsx(\r\n+            'text-xs',\r\n+            value.length > maxLength * 0.9 ? 'text-red-500' : 'text-gray-500 dark:text-gray-400'\r\n+          )}>\r\n+            {value.length}/{maxLength}\r\n+          </span>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759917801252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n       {/* Input Container */}\r\n       <div className=\"relative\">\r\n         {/* Left Icon */}\r\n         {leftIcon && (\r\n-          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\r\n+          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-600 dark:text-blue-400\">\r\n             {leftIcon}\r\n           </div>\r\n         )}\r\n \r\n@@ -203,14 +203,18 @@\n \r\n         {/* Right Icons */}\r\n         <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-1\">\r\n           {getStatusIcon()}\r\n-          {rightIcon}\r\n+          {rightIcon && (\r\n+            <div className=\"text-gray-500 dark:text-gray-400\">\r\n+              {rightIcon}\r\n+            </div>\r\n+          )}\r\n           {showPasswordToggle && type === 'password' && (\r\n             <button\r\n               type=\"button\"\r\n               onClick={() => setShowPassword(!showPassword)}\r\n-              className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n+              className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n             >\r\n               {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n             </button>\r\n           )}\r\n"
                },
                {
                    "date": 1759918372065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n       {/* Input Container */}\r\n       <div className=\"relative\">\r\n         {/* Left Icon */}\r\n         {leftIcon && (\r\n-          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-600 dark:text-blue-400\">\r\n+          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-700 dark:text-blue-400\">\r\n             {leftIcon}\r\n           </div>\r\n         )}\r\n \r\n"
                },
                {
                    "date": 1759918578196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       {/* Label */}\r\n       <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center space-x-1\">\r\n         <span>{label}</span>\r\n         {required && <span className=\"text-red-500\">*</span>}\r\n-        {info && <Info className=\"h-3 w-3 text-gray-400\" title={info} />}\r\n+        {info && <Info className=\"h-3 w-3 text-gray-400\" />}\r\n       </label>\r\n \r\n       {/* Input Container */}\r\n       <div className=\"relative\">\r\n@@ -204,17 +204,17 @@\n         {/* Right Icons */}\r\n         <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-1\">\r\n           {getStatusIcon()}\r\n           {rightIcon && (\r\n-            <div className=\"text-gray-500 dark:text-gray-400\">\r\n+            <div className=\"text-gray-600 dark:text-gray-400\">\r\n               {rightIcon}\r\n             </div>\r\n           )}\r\n           {showPasswordToggle && type === 'password' && (\r\n             <button\r\n               type=\"button\"\r\n               onClick={() => setShowPassword(!showPassword)}\r\n-              className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n+              className=\"text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n             >\r\n               {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n             </button>\r\n           )}\r\n"
                },
                {
                    "date": 1761650020484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n \r\n   return (\r\n     <div className={`space-y-2 ${className}`}>\r\n       {/* Label */}\r\n-      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center space-x-1\">\r\n+      <label className=\"text-sm font-bold text-gray-700 dark:text-gray-300 flex items-center space-x-1\">\r\n         <span>{label}</span>\r\n         {required && <span className=\"text-red-500\">*</span>}\r\n         {info && <Info className=\"h-3 w-3 text-gray-400\" />}\r\n       </label>\r\n@@ -223,21 +223,21 @@\n \r\n       {/* Messages */}\r\n       <div className=\"space-y-1\">\r\n         {(error || validationError) && (\r\n-          <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center space-x-1\">\r\n+          <p className=\"text-sm font-semibold text-red-600 dark:text-red-400 flex items-center space-x-1\">\r\n             <AlertCircle className=\"h-3 w-3\" />\r\n             <span>{error || validationError}</span>\r\n           </p>\r\n         )}\r\n         {success && (\r\n-          <p className=\"text-sm text-green-600 dark:text-green-400 flex items-center space-x-1\">\r\n+          <p className=\"text-sm font-semibold text-green-600 dark:text-green-400 flex items-center space-x-1\">\r\n             <CheckCircle className=\"h-3 w-3\" />\r\n             <span>{success}</span>\r\n           </p>\r\n         )}\r\n         {info && !error && !validationError && (\r\n-          <p className=\"text-sm text-blue-600 dark:text-blue-400 flex items-center space-x-1\">\r\n+          <p className=\"text-sm font-semibold text-blue-600 dark:text-blue-400 flex items-center space-x-1\">\r\n             <Info className=\"h-3 w-3\" />\r\n             <span>{info}</span>\r\n           </p>\r\n         )}\r\n"
                },
                {
                    "date": 1761650187567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,11 +188,12 @@\n           pattern={pattern}\r\n           maxLength={maxLength}\r\n           minLength={minLength}\r\n           className={clsx(\r\n-            'w-full px-3 py-3 rounded-lg transition-all duration-200',\r\n+            'w-full px-4 py-3.5 rounded-xl transition-all duration-200 border-2 font-semibold',\r\n             'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100',\r\n-            'focus:outline-none focus:ring-2 focus:ring-opacity-50',\r\n+            'focus:outline-none focus:ring-2 focus:ring-opacity-50 shadow-sm',\r\n+            'hover:shadow-md hover:border-navy-300 dark:hover:border-navy-600',\r\n             getStatusColor(),\r\n             leftIcon && 'pl-10',\r\n             (rightIcon || showPasswordToggle || getStatusIcon()) && 'pr-10',\r\n             disabled && 'opacity-50 cursor-not-allowed bg-gray-100 dark:bg-gray-800',\r\n"
                }
            ],
            "date": 1759566551419,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { clsx } from 'clsx';\r\n\r\ninterface FormInputProps {\r\n  label: string;\r\n  type?: string;\r\n  value: string | number;\r\n  onChange: (value: string | number) => void;\r\n  error?: string;\r\n  required?: boolean;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const FormInput: React.FC<FormInputProps> = ({\r\n  label,\r\n  type = 'text',\r\n  value,\r\n  onChange,\r\n  error,\r\n  required = false,\r\n  placeholder,\r\n  disabled = false,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={`space-y-1 ${className}`}>\r\n      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n        {label}\r\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n      </label>\r\n      <input\r\n        type={type}\r\n        value={value}\r\n        onChange={(e) => onChange(type === 'number' ? Number(e.target.value) : e.target.value)}\r\n        placeholder={placeholder}\r\n        disabled={disabled}\r\n        className={clsx(\r\n          'input-field',\r\n          error && 'border-red-500 focus:ring-red-500',\r\n          disabled && 'opacity-50 cursor-not-allowed'\r\n        )}\r\n      />\r\n      {error && <p className=\"text-sm text-red-600 dark:text-red-400\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}