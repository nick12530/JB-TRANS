{
    "sourceFile": "src/components/BarberMap.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757677396275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757677396275,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\ninterface Barber {\r\n  id: number;\r\n  name: string;\r\n  shopName: string;\r\n  location: string;\r\n  county: string;\r\n  coordinates: { lat: number; lng: number };\r\n  available: boolean;\r\n  acceptsHouseCalls: boolean;\r\n  rating: number;\r\n  price: string;\r\n  image: string;\r\n  specialty: string;\r\n}\r\n\r\ninterface BarberMapProps {\r\n  barbers: Barber[];\r\n  selectedBarber?: Barber | null;\r\n  onBarberSelect?: (barber: Barber) => void;\r\n  userLocation?: { lat: number; lng: number } | null;\r\n  showUserLocation?: boolean;\r\n}\r\n\r\n// Custom marker icons\r\nconst createCustomIcon = (isAvailable: boolean, isSelected: boolean = false) => {\r\n  const color = isSelected ? '#17A589' : (isAvailable ? '#10b981' : '#ef4444');\r\n  const size = isSelected ? 35 : 25;\r\n  \r\n  return L.divIcon({\r\n    className: 'custom-marker',\r\n    html: `\r\n      <div style=\"\r\n        width: ${size}px;\r\n        height: ${size}px;\r\n        background-color: ${color};\r\n        border: 3px solid white;\r\n        border-radius: 50%;\r\n        box-shadow: 0 2px 8px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 12px;\r\n        font-weight: bold;\r\n        color: white;\r\n      \">\r\n        ‚úÇÔ∏è\r\n      </div>\r\n    `,\r\n    iconSize: [size, size],\r\n    iconAnchor: [size / 2, size / 2],\r\n    popupAnchor: [0, -size / 2]\r\n  });\r\n};\r\n\r\nconst MapContent: React.FC<{ \r\n  barbers: Barber[]; \r\n  selectedBarber?: Barber | null; \r\n  onBarberSelect?: (barber: Barber) => void;\r\n  userLocation?: { lat: number; lng: number } | null;\r\n  showUserLocation?: boolean;\r\n}> = ({ barbers, selectedBarber, onBarberSelect, userLocation, showUserLocation }) => {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (barbers.length > 0) {\r\n      const bounds = L.latLngBounds(\r\n        barbers.map(barber => [barber.coordinates.lat, barber.coordinates.lng])\r\n      );\r\n      \r\n      if (userLocation && showUserLocation) {\r\n        bounds.extend([userLocation.lat, userLocation.lng]);\r\n      }\r\n      \r\n      map.fitBounds(bounds, { padding: [20, 20] });\r\n    }\r\n  }, [barbers, userLocation, showUserLocation, map]);\r\n\r\n  return (\r\n    <>\r\n      {barbers.map((barber) => (\r\n        <Marker\r\n          key={barber.id}\r\n          position={[barber.coordinates.lat, barber.coordinates.lng]}\r\n          icon={createCustomIcon(barber.available, selectedBarber?.id === barber.id)}\r\n          eventHandlers={{\r\n            click: () => onBarberSelect?.(barber),\r\n          }}\r\n        >\r\n          <Popup>\r\n            <div style={{ minWidth: '200px', textAlign: 'center' }}>\r\n              <img \r\n                src={barber.image} \r\n                alt={barber.name}\r\n                style={{ \r\n                  width: '50px', \r\n                  height: '50px', \r\n                  borderRadius: '50%', \r\n                  objectFit: 'cover',\r\n                  marginBottom: '8px'\r\n                }}\r\n              />\r\n              <h3 style={{ margin: '0 0 4px 0', fontSize: '16px', fontWeight: 'bold' }}>\r\n                {barber.name}\r\n              </h3>\r\n              <p style={{ margin: '0 0 4px 0', fontSize: '14px', color: '#666' }}>\r\n                {barber.shopName}\r\n              </p>\r\n              <p style={{ margin: '0 0 8px 0', fontSize: '12px', color: '#888' }}>\r\n                {barber.location}, {barber.county}\r\n              </p>\r\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>\r\n                <span style={{ fontSize: '12px', fontWeight: 'bold', color: '#17A589' }}>\r\n                  ‚≠ê {barber.rating}\r\n                </span>\r\n                <span style={{ fontSize: '12px', fontWeight: 'bold' }}>\r\n                  {barber.price}\r\n                </span>\r\n              </div>\r\n              <div style={{ display: 'flex', gap: '4px', justifyContent: 'center' }}>\r\n                <span style={{\r\n                  fontSize: '10px',\r\n                  padding: '2px 6px',\r\n                  borderRadius: '10px',\r\n                  backgroundColor: barber.available ? '#10b981' : '#ef4444',\r\n                  color: 'white',\r\n                  fontWeight: 'bold'\r\n                }}>\r\n                  {barber.available ? 'Available' : 'Busy'}\r\n                </span>\r\n                {barber.acceptsHouseCalls && (\r\n                  <span style={{\r\n                    fontSize: '10px',\r\n                    padding: '2px 6px',\r\n                    borderRadius: '10px',\r\n                    backgroundColor: '#17A589',\r\n                    color: 'white',\r\n                    fontWeight: 'bold'\r\n                  }}>\r\n                    üè† House Calls\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Popup>\r\n        </Marker>\r\n      ))}\r\n      \r\n      {userLocation && showUserLocation && (\r\n        <Marker\r\n          position={[userLocation.lat, userLocation.lng]}\r\n          icon={L.divIcon({\r\n            className: 'user-location-marker',\r\n            html: `\r\n              <div style=\"\r\n                width: 20px;\r\n                height: 20px;\r\n                background-color: #3b82f6;\r\n                border: 3px solid white;\r\n                border-radius: 50%;\r\n                box-shadow: 0 2px 8px rgba(0,0,0,0.3);\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                font-size: 10px;\r\n                color: white;\r\n              \">\r\n                üìç\r\n              </div>\r\n            `,\r\n            iconSize: [20, 20],\r\n            iconAnchor: [10, 10]\r\n          })}\r\n        >\r\n          <Popup>\r\n            <div style={{ textAlign: 'center' }}>\r\n              <strong>Your Location</strong>\r\n            </div>\r\n          </Popup>\r\n        </Marker>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst BarberMap: React.FC<BarberMapProps> = ({ \r\n  barbers, \r\n  selectedBarber, \r\n  onBarberSelect, \r\n  userLocation, \r\n  showUserLocation = true \r\n}) => {\r\n  const { colors } = useTheme();\r\n  const [isClient, setIsClient] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  if (!isClient) {\r\n    return (\r\n      <div style={{\r\n        height: '400px',\r\n        backgroundColor: colors.surface,\r\n        borderRadius: '12px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        border: `1px solid ${colors.border}`\r\n      }}>\r\n        <p style={{ color: colors.textBody, fontSize: '16px' }}>\r\n          Loading map...\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: '400px', borderRadius: '12px', overflow: 'hidden', border: `1px solid ${colors.border}` }}>\r\n      <MapContainer\r\n        center={[-1.2921, 36.8219]} // Nairobi CBD\r\n        zoom={11}\r\n        style={{ height: '100%', width: '100%' }}\r\n        scrollWheelZoom={true}\r\n      >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <MapContent\r\n          barbers={barbers}\r\n          selectedBarber={selectedBarber}\r\n          onBarberSelect={onBarberSelect}\r\n          userLocation={userLocation}\r\n          showUserLocation={showUserLocation}\r\n        />\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarberMap;\r\n"
        }
    ]
}