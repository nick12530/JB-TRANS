{
    "sourceFile": "src/components/HouseCallBooking.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757677396296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757677396295,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { useBooking } from '../contexts/BookingContext';\r\nimport { getCurrentLocation, geocodeAddress } from '../utils/geolocation';\r\n\r\ninterface HouseCallBookingProps {\r\n  barber: {\r\n    id: number;\r\n    name: string;\r\n    shopName: string;\r\n    coordinates: { lat: number; lng: number };\r\n    acceptsHouseCalls: boolean;\r\n  };\r\n  onLocationUpdate?: (location: { lat: number; lng: number }, address: string) => void;\r\n}\r\n\r\nconst HouseCallBooking: React.FC<HouseCallBookingProps> = ({ barber, onLocationUpdate }) => {\r\n  const { colors } = useTheme();\r\n  const { calculateDistance, calculateTravelFee } = useBooking();\r\n  const [isHouseCall, setIsHouseCall] = useState(false);\r\n  const [customerAddress, setCustomerAddress] = useState('');\r\n  const [customerCoordinates, setCustomerCoordinates] = useState<{ lat: number; lng: number } | null>(null);\r\n  const [distance, setDistance] = useState<number | null>(null);\r\n  const [travelFee, setTravelFee] = useState<number>(0);\r\n  const [isLoadingLocation, setIsLoadingLocation] = useState(false);\r\n  const [locationError, setLocationError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (isHouseCall && customerCoordinates && barber.coordinates) {\r\n      const calculatedDistance = calculateDistance(\r\n        customerCoordinates.lat,\r\n        customerCoordinates.lng,\r\n        barber.coordinates.lat,\r\n        barber.coordinates.lng\r\n      );\r\n      setDistance(calculatedDistance);\r\n      \r\n      const fee = calculateTravelFee(calculatedDistance);\r\n      setTravelFee(fee);\r\n      \r\n      onLocationUpdate?.(customerCoordinates, customerAddress);\r\n    }\r\n  }, [isHouseCall, customerCoordinates, barber.coordinates, calculateDistance, calculateTravelFee, onLocationUpdate, customerAddress]);\r\n\r\n  const handleUseCurrentLocation = async () => {\r\n    setIsLoadingLocation(true);\r\n    setLocationError(null);\r\n    \r\n    try {\r\n      const result = await getCurrentLocation();\r\n      if (result.coordinates) {\r\n        setCustomerCoordinates(result.coordinates);\r\n        setCustomerAddress('Current Location');\r\n        setLocationError(null);\r\n      } else {\r\n        setLocationError(result.error || 'Unable to get your location');\r\n      }\r\n    } catch (error) {\r\n      setLocationError('Error getting your location');\r\n    } finally {\r\n      setIsLoadingLocation(false);\r\n    }\r\n  };\r\n\r\n  const handleAddressGeocode = async () => {\r\n    if (!customerAddress.trim()) return;\r\n    \r\n    setIsLoadingLocation(true);\r\n    setLocationError(null);\r\n    \r\n    try {\r\n      const result = await geocodeAddress(customerAddress);\r\n      if (result.coordinates) {\r\n        setCustomerCoordinates(result.coordinates);\r\n        setLocationError(null);\r\n      } else {\r\n        setLocationError(result.error || 'Address not found');\r\n      }\r\n    } catch (error) {\r\n      setLocationError('Error geocoding address');\r\n    } finally {\r\n      setIsLoadingLocation(false);\r\n    }\r\n  };\r\n\r\n  if (!barber.acceptsHouseCalls) {\r\n    return (\r\n      <div style={{\r\n        backgroundColor: colors.surface,\r\n        padding: '20px',\r\n        borderRadius: '12px',\r\n        border: `1px solid ${colors.border}`,\r\n        textAlign: 'center'\r\n      }}>\r\n        <div style={{ fontSize: '24px', marginBottom: '10px' }}>üè†</div>\r\n        <h3 style={{ \r\n          color: colors.textHeading, \r\n          marginBottom: '8px',\r\n          fontFamily: '\"Montserrat\", sans-serif'\r\n        }}>\r\n          House Calls Not Available\r\n        </h3>\r\n        <p style={{ color: colors.textBody, margin: '0' }}>\r\n          {barber.name} at {barber.shopName} doesn't offer house call services.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      backgroundColor: colors.surface,\r\n      padding: '24px',\r\n      borderRadius: '12px',\r\n      border: `1px solid ${colors.border}`,\r\n      marginBottom: '20px'\r\n    }}>\r\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"houseCall\"\r\n          checked={isHouseCall}\r\n          onChange={(e) => setIsHouseCall(e.target.checked)}\r\n          style={{\r\n            width: '20px',\r\n            height: '20px',\r\n            marginRight: '12px',\r\n            accentColor: colors.primary\r\n          }}\r\n        />\r\n        <label \r\n          htmlFor=\"houseCall\"\r\n          style={{\r\n            fontSize: '18px',\r\n            fontWeight: '600',\r\n            color: colors.textHeading,\r\n            fontFamily: '\"Montserrat\", sans-serif',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          üè† Book House Call Service\r\n        </label>\r\n      </div>\r\n\r\n      {isHouseCall && (\r\n        <div>\r\n          <p style={{ \r\n            color: colors.textBody, \r\n            marginBottom: '16px',\r\n            fontSize: '14px',\r\n            fontFamily: '\"Lora\", serif'\r\n          }}>\r\n            We'll come to your location for your appointment. Please provide your address below.\r\n          </p>\r\n\r\n          <div style={{ marginBottom: '16px' }}>\r\n            <label style={{\r\n              display: 'block',\r\n              marginBottom: '8px',\r\n              fontWeight: '600',\r\n              color: colors.textHeading,\r\n              fontFamily: '\"Montserrat\", sans-serif'\r\n            }}>\r\n              Your Address *\r\n            </label>\r\n            <div style={{ display: 'flex', gap: '8px' }}>\r\n              <input\r\n                type=\"text\"\r\n                value={customerAddress}\r\n                onChange={(e) => setCustomerAddress(e.target.value)}\r\n                placeholder=\"Enter your full address (e.g., 123 Main St, Nairobi)\"\r\n                style={{\r\n                  flex: 1,\r\n                  padding: '12px',\r\n                  border: `1px solid ${colors.border}`,\r\n                  borderRadius: '8px',\r\n                  fontSize: '14px',\r\n                  backgroundColor: colors.inputBackground,\r\n                  color: colors.textHeading,\r\n                  fontFamily: '\"Lora\", serif'\r\n                }}\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleAddressGeocode}\r\n                disabled={!customerAddress.trim() || isLoadingLocation}\r\n                style={{\r\n                  padding: '12px 16px',\r\n                  backgroundColor: colors.primary,\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  borderRadius: '8px',\r\n                  cursor: customerAddress.trim() && !isLoadingLocation ? 'pointer' : 'not-allowed',\r\n                  fontSize: '14px',\r\n                  fontWeight: '600',\r\n                  opacity: customerAddress.trim() && !isLoadingLocation ? 1 : 0.6,\r\n                  fontFamily: '\"Montserrat\", sans-serif'\r\n                }}\r\n              >\r\n                {isLoadingLocation ? '...' : 'Find'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ marginBottom: '16px' }}>\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleUseCurrentLocation}\r\n              disabled={isLoadingLocation}\r\n              style={{\r\n                padding: '10px 16px',\r\n                backgroundColor: colors.secondary,\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '8px',\r\n                cursor: isLoadingLocation ? 'not-allowed' : 'pointer',\r\n                fontSize: '14px',\r\n                fontWeight: '600',\r\n                opacity: isLoadingLocation ? 0.6 : 1,\r\n                fontFamily: '\"Montserrat\", sans-serif',\r\n                marginRight: '8px'\r\n              }}\r\n            >\r\n              {isLoadingLocation ? 'Getting Location...' : 'üìç Use Current Location'}\r\n            </button>\r\n          </div>\r\n\r\n          {locationError && (\r\n            <div style={{\r\n              backgroundColor: '#fef2f2',\r\n              border: '1px solid #fecaca',\r\n              color: '#dc2626',\r\n              padding: '12px',\r\n              borderRadius: '8px',\r\n              marginBottom: '16px',\r\n              fontSize: '14px',\r\n              fontFamily: '\"Lora\", serif'\r\n            }}>\r\n              {locationError}\r\n            </div>\r\n          )}\r\n\r\n          {distance !== null && (\r\n            <div style={{\r\n              backgroundColor: colors.cardBackground,\r\n              padding: '16px',\r\n              borderRadius: '8px',\r\n              border: `1px solid ${colors.border}`,\r\n              marginBottom: '16px'\r\n            }}>\r\n              <h4 style={{\r\n                color: colors.textHeading,\r\n                margin: '0 0 12px 0',\r\n                fontSize: '16px',\r\n                fontFamily: '\"Montserrat\", sans-serif'\r\n              }}>\r\n                Distance & Travel Fee\r\n              </h4>\r\n              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>\r\n                <div>\r\n                  <p style={{ \r\n                    margin: '0 0 4px 0', \r\n                    fontSize: '14px', \r\n                    color: colors.textBody,\r\n                    fontFamily: '\"Lora\", serif'\r\n                  }}>\r\n                    Distance\r\n                  </p>\r\n                  <p style={{ \r\n                    margin: '0', \r\n                    fontSize: '18px', \r\n                    fontWeight: 'bold', \r\n                    color: colors.primary,\r\n                    fontFamily: '\"Montserrat\", sans-serif'\r\n                  }}>\r\n                    {distance.toFixed(1)} km\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p style={{ \r\n                    margin: '0 0 4px 0', \r\n                    fontSize: '14px', \r\n                    color: colors.textBody,\r\n                    fontFamily: '\"Lora\", serif'\r\n                  }}>\r\n                    Travel Fee\r\n                  </p>\r\n                  <p style={{ \r\n                    margin: '0', \r\n                    fontSize: '18px', \r\n                    fontWeight: 'bold', \r\n                    color: colors.primary,\r\n                    fontFamily: '\"Montserrat\", sans-serif'\r\n                  }}>\r\n                    KSh {travelFee.toLocaleString()}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div style={{\r\n            backgroundColor: '#f0f9ff',\r\n            border: '1px solid #bae6fd',\r\n            padding: '12px',\r\n            borderRadius: '8px',\r\n            fontSize: '14px',\r\n            color: '#0369a1',\r\n            fontFamily: '\"Lora\", serif'\r\n          }}>\r\n            <strong>Note:</strong> House call service includes travel time and setup. \r\n            The barber will bring all necessary equipment to your location.\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HouseCallBooking;\r\n"
        }
    ]
}