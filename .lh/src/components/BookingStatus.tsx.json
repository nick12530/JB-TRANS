{
    "sourceFile": "src/components/BookingStatus.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757757646102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757757646102,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\ninterface BookingStatusProps {\r\n  barberId: number;\r\n  selectedDate: string;\r\n  selectedTime: string;\r\n}\r\n\r\nexport default function BookingStatus({ barberId, selectedDate, selectedTime }: BookingStatusProps) {\r\n  const { colors } = useTheme();\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [isOngoing, setIsOngoing] = useState(false);\r\n  const [availableSlots, setAvailableSlots] = useState<string[]>([]);\r\n\r\n  // Update current time every minute\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 60000); // Update every minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Check if booking is ongoing\r\n  useEffect(() => {\r\n    if (selectedDate && selectedTime) {\r\n      const bookingDateTime = new Date(`${selectedDate}T${selectedTime}`);\r\n      const now = new Date();\r\n      const bookingEndTime = new Date(bookingDateTime.getTime() + 60 * 60 * 1000); // 1 hour duration\r\n\r\n      setIsOngoing(now >= bookingDateTime && now <= bookingEndTime);\r\n    }\r\n  }, [selectedDate, selectedTime, currentTime]);\r\n\r\n  // Generate available time slots\r\n  useEffect(() => {\r\n    const slots = [];\r\n    const startHour = 9;\r\n    const endHour = 18;\r\n    \r\n    for (let hour = startHour; hour < endHour; hour++) {\r\n      slots.push(`${hour.toString().padStart(2, '0')}:00`);\r\n      slots.push(`${hour.toString().padStart(2, '0')}:30`);\r\n    }\r\n    \r\n    setAvailableSlots(slots);\r\n  }, []);\r\n\r\n  const getStatusColor = () => {\r\n    if (isOngoing) return '#10b981'; // Green for ongoing\r\n    return colors.primary; // Default color\r\n  };\r\n\r\n  const getStatusText = () => {\r\n    if (isOngoing) return 'Session Ongoing';\r\n    return 'Session Scheduled';\r\n  };\r\n\r\n  const getStatusIcon = () => {\r\n    if (isOngoing) return 'üü¢';\r\n    return '‚è∞';\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      backgroundColor: colors.surface,\r\n      padding: '20px',\r\n      borderRadius: '12px',\r\n      border: `1px solid ${colors.border}`,\r\n      marginBottom: '20px'\r\n    }}>\r\n      <h3 style={{\r\n        fontSize: '1.2rem',\r\n        fontWeight: 'bold',\r\n        color: colors.textHeading,\r\n        marginBottom: '15px',\r\n        fontFamily: '\"Montserrat\", sans-serif'\r\n      }}>\r\n        Booking Status\r\n      </h3>\r\n\r\n      {/* Current Status */}\r\n      <div style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '10px',\r\n        marginBottom: '20px',\r\n        padding: '12px',\r\n        backgroundColor: `${getStatusColor()}15`,\r\n        borderRadius: '8px',\r\n        border: `1px solid ${getStatusColor()}30`\r\n      }}>\r\n        <span style={{ fontSize: '20px' }}>{getStatusIcon()}</span>\r\n        <div>\r\n          <div style={{\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            color: getStatusColor()\r\n          }}>\r\n            {getStatusText()}\r\n          </div>\r\n          <div style={{\r\n            fontSize: '14px',\r\n            color: colors.textBody\r\n          }}>\r\n            {selectedDate} at {selectedTime}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Available Time Slots */}\r\n      <div>\r\n        <h4 style={{\r\n          fontSize: '1rem',\r\n          fontWeight: 'bold',\r\n          color: colors.textHeading,\r\n          marginBottom: '10px',\r\n          fontFamily: '\"Montserrat\", sans-serif'\r\n        }}>\r\n          Available Time Slots Today\r\n        </h4>\r\n        <div style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',\r\n          gap: '8px',\r\n          maxHeight: '200px',\r\n          overflowY: 'auto'\r\n        }}>\r\n          {availableSlots.map((slot, index) => (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                padding: '8px 12px',\r\n                backgroundColor: colors.inputBackground,\r\n                border: `1px solid ${colors.border}`,\r\n                borderRadius: '6px',\r\n                textAlign: 'center',\r\n                fontSize: '12px',\r\n                fontWeight: '500',\r\n                color: colors.textBody,\r\n                cursor: 'pointer',\r\n                transition: 'all 0.2s ease'\r\n              }}\r\n              onMouseEnter={(e) => {\r\n                e.currentTarget.style.backgroundColor = colors.primary;\r\n                e.currentTarget.style.color = 'white';\r\n              }}\r\n              onMouseLeave={(e) => {\r\n                e.currentTarget.style.backgroundColor = colors.inputBackground;\r\n                e.currentTarget.style.color = colors.textBody;\r\n              }}\r\n            >\r\n              {slot}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Current Time Display */}\r\n      <div style={{\r\n        marginTop: '15px',\r\n        padding: '10px',\r\n        backgroundColor: colors.background,\r\n        borderRadius: '6px',\r\n        textAlign: 'center',\r\n        fontSize: '14px',\r\n        color: colors.textBody\r\n      }}>\r\n        Current Time: {currentTime.toLocaleTimeString()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}