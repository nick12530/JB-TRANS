{
    "sourceFile": "src/components/FormSelect.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1759566581266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759906173152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,352 @@\n-import React from 'react';\r\n+import React, { useState, useRef, useEffect } from 'react';\r\n import { clsx } from 'clsx';\r\n+import { ChevronDown, Search, AlertCircle, CheckCircle, Info, X } from 'lucide-react';\r\n \r\n+interface SelectOption {\r\n+  value: string;\r\n+  label: string;\r\n+  disabled?: boolean;\r\n+  description?: string;\r\n+  icon?: React.ReactNode;\r\n+}\r\n+\r\n interface FormSelectProps {\r\n   label: string;\r\n   value: string;\r\n   onChange: (value: string) => void;\r\n-  options: Array<{ value: string; label: string }>;\r\n+  options: SelectOption[];\r\n   error?: string;\r\n+  success?: string;\r\n+  info?: string;\r\n   required?: boolean;\r\n   placeholder?: string;\r\n   disabled?: boolean;\r\n   className?: string;\r\n+  searchable?: boolean;\r\n+  clearable?: boolean;\r\n+  multiple?: boolean;\r\n+  loading?: boolean;\r\n+  emptyMessage?: string;\r\n+  leftIcon?: React.ReactNode;\r\n+  rightIcon?: React.ReactNode;\r\n+  onSearch?: (query: string) => void;\r\n+  onCreate?: (value: string) => void;\r\n+  validation?: {\r\n+    required?: boolean;\r\n+    custom?: (value: string) => string | null;\r\n+  };\r\n }\r\n \r\n export const FormSelect: React.FC<FormSelectProps> = ({\r\n   label,\r\n   value,\r\n   onChange,\r\n   options,\r\n   error,\r\n+  success,\r\n+  info,\r\n   required = false,\r\n-  placeholder,\r\n+  placeholder = 'Select an option...',\r\n   disabled = false,\r\n   className,\r\n+  searchable = false,\r\n+  clearable = false,\r\n+  multiple = false,\r\n+  loading = false,\r\n+  emptyMessage = 'No options available',\r\n+  leftIcon,\r\n+  rightIcon,\r\n+  onSearch,\r\n+  onCreate,\r\n+  validation,\r\n }) => {\r\n+  const [isOpen, setIsOpen] = useState(false);\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [isFocused, setIsFocused] = useState(false);\r\n+  const [validationError, setValidationError] = useState<string | null>(null);\r\n+  const dropdownRef = useRef<HTMLDivElement>(null);\r\n+  const searchRef = useRef<HTMLInputElement>(null);\r\n+\r\n+  // Filter options based on search query\r\n+  const filteredOptions = options.filter(option =>\r\n+    option.label.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n+    option.value.toLowerCase().includes(searchQuery.toLowerCase())\r\n+  );\r\n+\r\n+  // Get selected option(s)\r\n+  const selectedOption = options.find(option => option.value === value);\r\n+  const selectedOptions = multiple \r\n+    ? options.filter(option => value.split(',').includes(option.value))\r\n+    : [selectedOption].filter(Boolean);\r\n+\r\n+  // Close dropdown when clicking outside\r\n+  useEffect(() => {\r\n+    const handleClickOutside = (event: MouseEvent) => {\r\n+      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n+        setIsOpen(false);\r\n+        setSearchQuery('');\r\n+      }\r\n+    };\r\n+\r\n+    if (isOpen) {\r\n+      document.addEventListener('mousedown', handleClickOutside);\r\n+    }\r\n+\r\n+    return () => {\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n+    };\r\n+  }, [isOpen]);\r\n+\r\n+  // Focus search input when dropdown opens\r\n+  useEffect(() => {\r\n+    if (isOpen && searchable && searchRef.current) {\r\n+      searchRef.current.focus();\r\n+    }\r\n+  }, [isOpen, searchable]);\r\n+\r\n+  const handleSelect = (optionValue: string) => {\r\n+    if (multiple) {\r\n+      const currentValues = value ? value.split(',') : [];\r\n+      const newValues = currentValues.includes(optionValue)\r\n+        ? currentValues.filter(v => v !== optionValue)\r\n+        : [...currentValues, optionValue];\r\n+      onChange(newValues.join(','));\r\n+    } else {\r\n+      onChange(optionValue);\r\n+      setIsOpen(false);\r\n+      setSearchQuery('');\r\n+    }\r\n+  };\r\n+\r\n+  const handleClear = (e: React.MouseEvent) => {\r\n+    e.stopPropagation();\r\n+    onChange('');\r\n+    setValidationError(null);\r\n+  };\r\n+\r\n+  const handleSearch = (query: string) => {\r\n+    setSearchQuery(query);\r\n+    onSearch?.(query);\r\n+  };\r\n+\r\n+  const handleCreate = () => {\r\n+    if (searchQuery && onCreate) {\r\n+      onCreate(searchQuery);\r\n+      setSearchQuery('');\r\n+    }\r\n+  };\r\n+\r\n+  const getStatusIcon = () => {\r\n+    if (error || validationError) {\r\n+      return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n+    }\r\n+    if (success) {\r\n+      return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n+    }\r\n+    if (info) {\r\n+      return <Info className=\"h-4 w-4 text-blue-500\" />;\r\n+    }\r\n+    return null;\r\n+  };\r\n+\r\n+  const getStatusColor = () => {\r\n+    if (error || validationError) {\r\n+      return 'border-red-500 focus:ring-red-500 focus:border-red-500';\r\n+    }\r\n+    if (success) {\r\n+      return 'border-green-500 focus:ring-green-500 focus:border-green-500';\r\n+    }\r\n+    if (isFocused || isOpen) {\r\n+      return 'border-bright-green focus:ring-bright-green focus:border-bright-green';\r\n+    }\r\n+    return 'border-gray-300 dark:border-gray-600 focus:ring-bright-green focus:border-bright-green';\r\n+  };\r\n+\r\n   return (\r\n-    <div className={`space-y-1 ${className}`}>\r\n-      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n-        {label}\r\n-        {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n+    <div className={`space-y-2 ${className}`}>\r\n+      {/* Label */}\r\n+      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center space-x-1\">\r\n+        <span>{label}</span>\r\n+        {required && <span className=\"text-red-500\">*</span>}\r\n+        {info && <Info className=\"h-3 w-3 text-gray-400\" title={info} />}\r\n       </label>\r\n-      <select\r\n-        value={value}\r\n-        onChange={(e) => onChange(e.target.value)}\r\n-        disabled={disabled}\r\n-        className={clsx(\r\n-          'input-field',\r\n-          error && 'border-red-500 focus:ring-red-500',\r\n-          disabled && 'opacity-50 cursor-not-allowed'\r\n+\r\n+      {/* Select Container */}\r\n+      <div className=\"relative\" ref={dropdownRef}>\r\n+        {/* Trigger Button */}\r\n+        <button\r\n+          type=\"button\"\r\n+          onClick={() => !disabled && setIsOpen(!isOpen)}\r\n+          onFocus={() => setIsFocused(true)}\r\n+          onBlur={() => setIsFocused(false)}\r\n+          disabled={disabled}\r\n+          className={clsx(\r\n+            'w-full px-3 py-3 rounded-lg transition-all duration-200',\r\n+            'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100',\r\n+            'focus:outline-none focus:ring-2 focus:ring-opacity-50',\r\n+            'flex items-center justify-between',\r\n+            getStatusColor(),\r\n+            leftIcon && 'pl-10',\r\n+            (rightIcon || clearable || getStatusIcon()) && 'pr-10',\r\n+            disabled && 'opacity-50 cursor-not-allowed bg-gray-100 dark:bg-gray-800',\r\n+            error || validationError ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\r\n+          )}\r\n+        >\r\n+          {/* Left Icon */}\r\n+          {leftIcon && (\r\n+            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\r\n+              {leftIcon}\r\n+            </div>\r\n+          )}\r\n+\r\n+          {/* Selected Value */}\r\n+          <div className=\"flex-1 text-left\">\r\n+            {multiple ? (\r\n+              <div className=\"flex flex-wrap gap-1\">\r\n+                {selectedOptions.map((option) => (\r\n+                  <span\r\n+                    key={option?.value}\r\n+                    className=\"inline-flex items-center px-2 py-1 bg-bright-green text-white text-xs rounded-md\"\r\n+                  >\r\n+                    {option?.label}\r\n+                    <button\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        handleSelect(option?.value || '');\r\n+                      }}\r\n+                      className=\"ml-1 hover:bg-green-600 rounded-full p-0.5\"\r\n+                    >\r\n+                      <X className=\"h-2 w-2\" />\r\n+                    </button>\r\n+                  </span>\r\n+                ))}\r\n+                {selectedOptions.length === 0 && (\r\n+                  <span className=\"text-gray-500 dark:text-gray-400\">{placeholder}</span>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <span className={selectedOption ? 'text-gray-900 dark:text-gray-100' : 'text-gray-500 dark:text-gray-400'}>\r\n+                {selectedOption ? selectedOption.label : placeholder}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Right Icons */}\r\n+          <div className=\"flex items-center space-x-1\">\r\n+            {getStatusIcon()}\r\n+            {rightIcon}\r\n+            {clearable && value && (\r\n+              <button\r\n+                onClick={handleClear}\r\n+                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n+              >\r\n+                <X className=\"h-4 w-4\" />\r\n+              </button>\r\n+            )}\r\n+            <ChevronDown className={clsx(\r\n+              'h-4 w-4 text-gray-400 transition-transform duration-200',\r\n+              isOpen && 'rotate-180'\r\n+            )} />\r\n+          </div>\r\n+        </button>\r\n+\r\n+        {/* Dropdown */}\r\n+        {isOpen && (\r\n+          <div className=\"absolute z-50 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg max-h-60 overflow-hidden\">\r\n+            {/* Search Input */}\r\n+            {searchable && (\r\n+              <div className=\"p-2 border-b border-gray-200 dark:border-gray-700\">\r\n+                <div className=\"relative\">\r\n+                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n+                  <input\r\n+                    ref={searchRef}\r\n+                    type=\"text\"\r\n+                    value={searchQuery}\r\n+                    onChange={(e) => handleSearch(e.target.value)}\r\n+                    placeholder=\"Search options...\"\r\n+                    className=\"w-full pl-10 pr-3 py-2 text-sm border border-gray-200 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-bright-green focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+            )}\r\n+\r\n+            {/* Options List */}\r\n+            <div className=\"max-h-48 overflow-y-auto\">\r\n+              {loading ? (\r\n+                <div className=\"p-4 text-center text-gray-500 dark:text-gray-400\">\r\n+                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-bright-green mx-auto\"></div>\r\n+                  <p className=\"mt-2 text-sm\">Loading...</p>\r\n+                </div>\r\n+              ) : filteredOptions.length > 0 ? (\r\n+                filteredOptions.map((option) => (\r\n+                  <button\r\n+                    key={option.value}\r\n+                    onClick={() => !option.disabled && handleSelect(option.value)}\r\n+                    disabled={option.disabled}\r\n+                    className={clsx(\r\n+                      'w-full px-3 py-2 text-left text-sm transition-colors',\r\n+                      'hover:bg-gray-100 dark:hover:bg-gray-700',\r\n+                      'flex items-center space-x-3',\r\n+                      option.disabled && 'opacity-50 cursor-not-allowed',\r\n+                      multiple && value.split(',').includes(option.value) && 'bg-bright-green text-white hover:bg-green-600',\r\n+                      !multiple && value === option.value && 'bg-bright-green text-white hover:bg-green-600'\r\n+                    )}\r\n+                  >\r\n+                    {option.icon && (\r\n+                      <span className=\"flex-shrink-0\">{option.icon}</span>\r\n+                    )}\r\n+                    <div className=\"flex-1 min-w-0\">\r\n+                      <div className=\"font-medium truncate\">{option.label}</div>\r\n+                      {option.description && (\r\n+                        <div className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">\r\n+                          {option.description}\r\n+                        </div>\r\n+                      )}\r\n+                    </div>\r\n+                    {!multiple && value === option.value && (\r\n+                      <CheckCircle className=\"h-4 w-4 flex-shrink-0\" />\r\n+                    )}\r\n+                  </button>\r\n+                ))\r\n+              ) : (\r\n+                <div className=\"p-4 text-center text-gray-500 dark:text-gray-400\">\r\n+                  <p className=\"text-sm\">{emptyMessage}</p>\r\n+                  {searchQuery && onCreate && (\r\n+                    <button\r\n+                      onClick={handleCreate}\r\n+                      className=\"mt-2 text-sm text-bright-green hover:text-green-600 font-medium\"\r\n+                    >\r\n+                      Create \"{searchQuery}\"\r\n+                    </button>\r\n+                  )}\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          </div>\r\n         )}\r\n-      >\r\n-        {placeholder && (\r\n-          <option value=\"\" disabled>\r\n-            {placeholder}\r\n-          </option>\r\n+      </div>\r\n+\r\n+      {/* Messages */}\r\n+      <div className=\"space-y-1\">\r\n+        {(error || validationError) && (\r\n+          <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center space-x-1\">\r\n+            <AlertCircle className=\"h-3 w-3\" />\r\n+            <span>{error || validationError}</span>\r\n+          </p>\r\n         )}\r\n-        {options.map((option) => (\r\n-          <option key={option.value} value={option.value}>\r\n-            {option.label}\r\n-          </option>\r\n-        ))}\r\n-      </select>\r\n-      {error && <p className=\"text-sm text-red-600 dark:text-red-400\">{error}</p>}\r\n+        {success && (\r\n+          <p className=\"text-sm text-green-600 dark:text-green-400 flex items-center space-x-1\">\r\n+            <CheckCircle className=\"h-3 w-3\" />\r\n+            <span>{success}</span>\r\n+          </p>\r\n+        )}\r\n+        {info && !error && !validationError && (\r\n+          <p className=\"text-sm text-blue-600 dark:text-blue-400 flex items-center space-x-1\">\r\n+            <Info className=\"h-3 w-3\" />\r\n+            <span>{info}</span>\r\n+          </p>\r\n+        )}\r\n+      </div>\r\n     </div>\r\n   );\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759917817865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n           )}\r\n         >\r\n           {/* Left Icon */}\r\n           {leftIcon && (\r\n-            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\r\n+            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-600 dark:text-blue-400\">\r\n               {leftIcon}\r\n             </div>\r\n           )}\r\n \r\n"
                },
                {
                    "date": 1759917856659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,19 +233,23 @@\n \r\n           {/* Right Icons */}\r\n           <div className=\"flex items-center space-x-1\">\r\n             {getStatusIcon()}\r\n-            {rightIcon}\r\n+            {rightIcon && (\r\n+              <div className=\"text-gray-500 dark:text-gray-400\">\r\n+                {rightIcon}\r\n+              </div>\r\n+            )}\r\n             {clearable && value && (\r\n               <button\r\n                 onClick={handleClear}\r\n-                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n+                className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n               >\r\n                 <X className=\"h-4 w-4\" />\r\n               </button>\r\n             )}\r\n             <ChevronDown className={clsx(\r\n-              'h-4 w-4 text-gray-400 transition-transform duration-200',\r\n+              'h-4 w-4 text-gray-500 dark:text-gray-400 transition-transform duration-200',\r\n               isOpen && 'rotate-180'\r\n             )} />\r\n           </div>\r\n         </button>\r\n"
                },
                {
                    "date": 1759917878975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   leftIcon,\r\n   rightIcon,\r\n   onSearch,\r\n   onCreate,\r\n-  validation,\r\n+  validation: _validation,\r\n }) => {\r\n   const [isOpen, setIsOpen] = useState(false);\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n   const [isFocused, setIsFocused] = useState(false);\r\n"
                },
                {
                    "date": 1759917936838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n       {/* Label */}\r\n       <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center space-x-1\">\r\n         <span>{label}</span>\r\n         {required && <span className=\"text-red-500\">*</span>}\r\n-        {info && <Info className=\"h-3 w-3 text-gray-400\" title={info} />}\r\n+        {info && <Info className=\"h-3 w-3 text-gray-400\" />}\r\n       </label>\r\n \r\n       {/* Select Container */}\r\n       <div className=\"relative\" ref={dropdownRef}>\r\n"
                },
                {
                    "date": 1759918578203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n           )}\r\n         >\r\n           {/* Left Icon */}\r\n           {leftIcon && (\r\n-            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-600 dark:text-blue-400\">\r\n+            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-700 dark:text-blue-400\">\r\n               {leftIcon}\r\n             </div>\r\n           )}\r\n \r\n@@ -234,22 +234,22 @@\n           {/* Right Icons */}\r\n           <div className=\"flex items-center space-x-1\">\r\n             {getStatusIcon()}\r\n             {rightIcon && (\r\n-              <div className=\"text-gray-500 dark:text-gray-400\">\r\n+              <div className=\"text-gray-600 dark:text-gray-400\">\r\n                 {rightIcon}\r\n               </div>\r\n             )}\r\n             {clearable && value && (\r\n               <button\r\n                 onClick={handleClear}\r\n-                className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n+                className=\"text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\r\n               >\r\n                 <X className=\"h-4 w-4\" />\r\n               </button>\r\n             )}\r\n             <ChevronDown className={clsx(\r\n-              'h-4 w-4 text-gray-500 dark:text-gray-400 transition-transform duration-200',\r\n+              'h-4 w-4 text-gray-600 dark:text-gray-400 transition-transform duration-200',\r\n               isOpen && 'rotate-180'\r\n             )} />\r\n           </div>\r\n         </button>\r\n"
                }
            ],
            "date": 1759566581266,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { clsx } from 'clsx';\r\n\r\ninterface FormSelectProps {\r\n  label: string;\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  options: Array<{ value: string; label: string }>;\r\n  error?: string;\r\n  required?: boolean;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const FormSelect: React.FC<FormSelectProps> = ({\r\n  label,\r\n  value,\r\n  onChange,\r\n  options,\r\n  error,\r\n  required = false,\r\n  placeholder,\r\n  disabled = false,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={`space-y-1 ${className}`}>\r\n      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n        {label}\r\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n      </label>\r\n      <select\r\n        value={value}\r\n        onChange={(e) => onChange(e.target.value)}\r\n        disabled={disabled}\r\n        className={clsx(\r\n          'input-field',\r\n          error && 'border-red-500 focus:ring-red-500',\r\n          disabled && 'opacity-50 cursor-not-allowed'\r\n        )}\r\n      >\r\n        {placeholder && (\r\n          <option value=\"\" disabled>\r\n            {placeholder}\r\n          </option>\r\n        )}\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {error && <p className=\"text-sm text-red-600 dark:text-red-400\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}