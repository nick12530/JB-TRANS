{
    "sourceFile": "src/context/NotificationsContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759905403639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759905403639,
            "name": "Commit-0",
            "content": "import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  title: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  read: boolean;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n}\r\n\r\ninterface NotificationsContextType {\r\n  notifications: Notification[];\r\n  unreadCount: number;\r\n  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void;\r\n  markAsRead: (id: string) => void;\r\n  markAllAsRead: () => void;\r\n  removeNotification: (id: string) => void;\r\n  clearAllNotifications: () => void;\r\n}\r\n\r\nconst NotificationsContext = createContext<NotificationsContextType | undefined>(undefined);\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationsContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface NotificationsProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const NotificationsProvider: React.FC<NotificationsProviderProps> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n\r\n  // Load notifications from localStorage on mount\r\n  useEffect(() => {\r\n    const savedNotifications = localStorage.getItem('mwalimu-notifications');\r\n    if (savedNotifications) {\r\n      try {\r\n        const parsed = JSON.parse(savedNotifications);\r\n        const notificationsWithDates = parsed.map((n: any) => ({\r\n          ...n,\r\n          timestamp: new Date(n.timestamp)\r\n        }));\r\n        setNotifications(notificationsWithDates);\r\n      } catch (error) {\r\n        console.error('Failed to load notifications:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save notifications to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem('mwalimu-notifications', JSON.stringify(notifications));\r\n  }, [notifications]);\r\n\r\n  const addNotification = useCallback((notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {\r\n    const newNotification: Notification = {\r\n      ...notification,\r\n      id: `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: new Date(),\r\n      read: false,\r\n    };\r\n\r\n    setNotifications(prev => [newNotification, ...prev]);\r\n\r\n    // Auto-remove notification after 10 seconds for non-error types\r\n    if (notification.type !== 'error') {\r\n      setTimeout(() => {\r\n        setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\r\n      }, 10000);\r\n    }\r\n  }, []);\r\n\r\n  const markAsRead = useCallback((id: string) => {\r\n    setNotifications(prev =>\r\n      prev.map(notification =>\r\n        notification.id === id ? { ...notification, read: true } : notification\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const markAllAsRead = useCallback(() => {\r\n    setNotifications(prev =>\r\n      prev.map(notification => ({ ...notification, read: true }))\r\n    );\r\n  }, []);\r\n\r\n  const removeNotification = useCallback((id: string) => {\r\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n  }, []);\r\n\r\n  const clearAllNotifications = useCallback(() => {\r\n    setNotifications([]);\r\n  }, []);\r\n\r\n  const unreadCount = notifications.filter(n => !n.read).length;\r\n\r\n  const value: NotificationsContextType = {\r\n    notifications,\r\n    unreadCount,\r\n    addNotification,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    removeNotification,\r\n    clearAllNotifications,\r\n  };\r\n\r\n  return (\r\n    <NotificationsContext.Provider value={value}>\r\n      {children}\r\n    </NotificationsContext.Provider>\r\n  );\r\n};\r\n"
        }
    ]
}