{
    "sourceFile": "src/context/AppContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1759565426530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759567369797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n+import { User, SourceRecord, PickupPointRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n@@ -9,8 +9,10 @@\n   isDark: boolean;\r\n   setIsDark: (dark: boolean) => void;\r\n   sourceRecords: SourceRecord[];\r\n   setSourceRecords: (records: SourceRecord[]) => void;\r\n+  pickupPointRecords: PickupPointRecord[];\r\n+  setPickupPointRecords: (records: PickupPointRecord[]) => void;\r\n   destinationRecords: DestinationRecord[];\r\n   setDestinationRecords: (records: DestinationRecord[]) => void;\r\n   transportLogs: TransportLog[];\r\n   setTransportLogs: (logs: TransportLog[]) => void;\r\n@@ -24,8 +26,9 @@\n   const [user, setUser] = useState<User | null>(null);\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [isDark, setIsDark] = useState(false);\r\n   const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n+  const [pickupPointRecords, setPickupPointRecords] = useState<PickupPointRecord[]>([]);\r\n   const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n   const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n   const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n \r\n@@ -51,8 +54,10 @@\n         isDark,\r\n         setIsDark,\r\n         sourceRecords,\r\n         setSourceRecords,\r\n+        pickupPointRecords,\r\n+        setPickupPointRecords,\r\n         destinationRecords,\r\n         setDestinationRecords,\r\n         transportLogs,\r\n         setTransportLogs,\r\n"
                },
                {
                    "date": 1759567869382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, PickupPointRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n+import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n"
                },
                {
                    "date": 1759567877972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,12 @@\n   isDark: boolean;\r\n   setIsDark: (dark: boolean) => void;\r\n   sourceRecords: SourceRecord[];\r\n   setSourceRecords: (records: SourceRecord[]) => void;\r\n-  pickupPointRecords: PickupPointRecord[];\r\n-  setPickupPointRecords: (records: PickupPointRecord[]) => void;\r\n+  pickupRecords: PickupRecord[];\r\n+  setPickupRecords: (records: PickupRecord[]) => void;\r\n+  deliveryRecords: DeliveryRecord[];\r\n+  setDeliveryRecords: (records: DeliveryRecord[]) => void;\r\n   destinationRecords: DestinationRecord[];\r\n   setDestinationRecords: (records: DestinationRecord[]) => void;\r\n   transportLogs: TransportLog[];\r\n   setTransportLogs: (logs: TransportLog[]) => void;\r\n"
                },
                {
                    "date": 1759567885091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,10 @@\n   const [user, setUser] = useState<User | null>(null);\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [isDark, setIsDark] = useState(false);\r\n   const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n-  const [pickupPointRecords, setPickupPointRecords] = useState<PickupPointRecord[]>([]);\r\n+  const [pickupRecords, setPickupRecords] = useState<PickupRecord[]>([]);\r\n+  const [deliveryRecords, setDeliveryRecords] = useState<DeliveryRecord[]>([]);\r\n   const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n   const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n   const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n \r\n"
                },
                {
                    "date": 1759586215527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n+import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n@@ -57,10 +57,12 @@\n         isDark,\r\n         setIsDark,\r\n         sourceRecords,\r\n         setSourceRecords,\r\n-        pickupPointRecords,\r\n-        setPickupPointRecords,\r\n+        pickupRecords,\r\n+        setPickupRecords,\r\n+        deliveryRecords,\r\n+        setDeliveryRecords,\r\n         destinationRecords,\r\n         setDestinationRecords,\r\n         transportLogs,\r\n         setTransportLogs,\r\n"
                },
                {
                    "date": 1760600433150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord } from '../types';\r\n+import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord, InventoryItem } from '../types';\r\n+import { SAMPLE_SOURCE_RECORDS, SAMPLE_DESTINATION_RECORDS } from '../data/sampleRecords';\r\n+import { SAMPLE_INVENTORY_ITEMS } from '../data/sampleInventory';\r\n+import { SAMPLE_BUYERS, SAMPLE_DRIVERS, SAMPLE_STAFF } from '../data/sampleEntities';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n@@ -19,22 +22,34 @@\n   transportLogs: TransportLog[];\r\n   setTransportLogs: (logs: TransportLog[]) => void;\r\n   profitRecords: ProfitRecord[];\r\n   setProfitRecords: (records: ProfitRecord[]) => void;\r\n+  inventoryItems: InventoryItem[];\r\n+  setInventoryItems: (items: InventoryItem[]) => void;\r\n+  buyers: any[];\r\n+  setBuyers: (buyers: any[]) => void;\r\n+  drivers: any[];\r\n+  setDrivers: (drivers: any[]) => void;\r\n+  staff: any[];\r\n+  setStaff: (staff: any[]) => void;\r\n }\r\n \r\n const AppContext = createContext<AppContextType | null>(null);\r\n \r\n export const AppProvider = ({ children }: { children: React.ReactNode }) => {\r\n   const [user, setUser] = useState<User | null>(null);\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [isDark, setIsDark] = useState(false);\r\n-  const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n+  const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>(SAMPLE_SOURCE_RECORDS);\r\n   const [pickupRecords, setPickupRecords] = useState<PickupRecord[]>([]);\r\n   const [deliveryRecords, setDeliveryRecords] = useState<DeliveryRecord[]>([]);\r\n-  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n+  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>(SAMPLE_DESTINATION_RECORDS);\r\n   const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n   const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n+  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>(SAMPLE_INVENTORY_ITEMS);\r\n+  const [buyers, setBuyers] = useState<any[]>(SAMPLE_BUYERS);\r\n+  const [drivers, setDrivers] = useState<any[]>(SAMPLE_DRIVERS);\r\n+  const [staff, setStaff] = useState<any[]>(SAMPLE_STAFF);\r\n \r\n   useEffect(() => {\r\n     const storedTheme = localStorage.getItem('theme');\r\n     if (storedTheme) {\r\n@@ -67,8 +82,16 @@\n         transportLogs,\r\n         setTransportLogs,\r\n         profitRecords,\r\n         setProfitRecords,\r\n+        inventoryItems,\r\n+        setInventoryItems,\r\n+        buyers,\r\n+        setBuyers,\r\n+        drivers,\r\n+        setDrivers,\r\n+        staff,\r\n+        setStaff,\r\n       }}\r\n     >\r\n       {children}\r\n     </AppContext.Provider>\r\n"
                }
            ],
            "date": 1759565426530,
            "name": "Commit-0",
            "content": "import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, SourceRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n\r\nexport interface AppContextType {\r\n  user: User | null;\r\n  setUser: (user: User | null) => void;\r\n  isAuthenticated: boolean;\r\n  setIsAuthenticated: (auth: boolean) => void;\r\n  isDark: boolean;\r\n  setIsDark: (dark: boolean) => void;\r\n  sourceRecords: SourceRecord[];\r\n  setSourceRecords: (records: SourceRecord[]) => void;\r\n  destinationRecords: DestinationRecord[];\r\n  setDestinationRecords: (records: DestinationRecord[]) => void;\r\n  transportLogs: TransportLog[];\r\n  setTransportLogs: (logs: TransportLog[]) => void;\r\n  profitRecords: ProfitRecord[];\r\n  setProfitRecords: (records: ProfitRecord[]) => void;\r\n}\r\n\r\nconst AppContext = createContext<AppContextType | null>(null);\r\n\r\nexport const AppProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isDark, setIsDark] = useState(false);\r\n  const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n  const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n  const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n\r\n  useEffect(() => {\r\n    const storedTheme = localStorage.getItem('theme');\r\n    if (storedTheme) {\r\n      setIsDark(storedTheme === 'dark');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.documentElement.classList.toggle('dark', isDark);\r\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\r\n  }, [isDark]);\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        user,\r\n        setUser,\r\n        isAuthenticated,\r\n        setIsAuthenticated,\r\n        isDark,\r\n        setIsDark,\r\n        sourceRecords,\r\n        setSourceRecords,\r\n        destinationRecords,\r\n        setDestinationRecords,\r\n        transportLogs,\r\n        setTransportLogs,\r\n        profitRecords,\r\n        setProfitRecords,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useApp = () => {\r\n  const context = useContext(AppContext);\r\n  if (!context) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n};\r\n"
        }
    ]
}