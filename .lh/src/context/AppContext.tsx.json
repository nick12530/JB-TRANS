{
    "sourceFile": "src/context/AppContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1759565426530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759567369797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n+import { User, SourceRecord, PickupPointRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n@@ -9,8 +9,10 @@\n   isDark: boolean;\r\n   setIsDark: (dark: boolean) => void;\r\n   sourceRecords: SourceRecord[];\r\n   setSourceRecords: (records: SourceRecord[]) => void;\r\n+  pickupPointRecords: PickupPointRecord[];\r\n+  setPickupPointRecords: (records: PickupPointRecord[]) => void;\r\n   destinationRecords: DestinationRecord[];\r\n   setDestinationRecords: (records: DestinationRecord[]) => void;\r\n   transportLogs: TransportLog[];\r\n   setTransportLogs: (logs: TransportLog[]) => void;\r\n@@ -24,8 +26,9 @@\n   const [user, setUser] = useState<User | null>(null);\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [isDark, setIsDark] = useState(false);\r\n   const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n+  const [pickupPointRecords, setPickupPointRecords] = useState<PickupPointRecord[]>([]);\r\n   const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n   const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n   const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n \r\n@@ -51,8 +54,10 @@\n         isDark,\r\n         setIsDark,\r\n         sourceRecords,\r\n         setSourceRecords,\r\n+        pickupPointRecords,\r\n+        setPickupPointRecords,\r\n         destinationRecords,\r\n         setDestinationRecords,\r\n         transportLogs,\r\n         setTransportLogs,\r\n"
                },
                {
                    "date": 1759567869382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, PickupPointRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n+import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n"
                },
                {
                    "date": 1759567877972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,12 @@\n   isDark: boolean;\r\n   setIsDark: (dark: boolean) => void;\r\n   sourceRecords: SourceRecord[];\r\n   setSourceRecords: (records: SourceRecord[]) => void;\r\n-  pickupPointRecords: PickupPointRecord[];\r\n-  setPickupPointRecords: (records: PickupPointRecord[]) => void;\r\n+  pickupRecords: PickupRecord[];\r\n+  setPickupRecords: (records: PickupRecord[]) => void;\r\n+  deliveryRecords: DeliveryRecord[];\r\n+  setDeliveryRecords: (records: DeliveryRecord[]) => void;\r\n   destinationRecords: DestinationRecord[];\r\n   setDestinationRecords: (records: DestinationRecord[]) => void;\r\n   transportLogs: TransportLog[];\r\n   setTransportLogs: (logs: TransportLog[]) => void;\r\n"
                },
                {
                    "date": 1759567885091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,10 @@\n   const [user, setUser] = useState<User | null>(null);\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [isDark, setIsDark] = useState(false);\r\n   const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n-  const [pickupPointRecords, setPickupPointRecords] = useState<PickupPointRecord[]>([]);\r\n+  const [pickupRecords, setPickupRecords] = useState<PickupRecord[]>([]);\r\n+  const [deliveryRecords, setDeliveryRecords] = useState<DeliveryRecord[]>([]);\r\n   const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n   const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n   const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n \r\n"
                },
                {
                    "date": 1759586215527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n+import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n@@ -57,10 +57,12 @@\n         isDark,\r\n         setIsDark,\r\n         sourceRecords,\r\n         setSourceRecords,\r\n-        pickupPointRecords,\r\n-        setPickupPointRecords,\r\n+        pickupRecords,\r\n+        setPickupRecords,\r\n+        deliveryRecords,\r\n+        setDeliveryRecords,\r\n         destinationRecords,\r\n         setDestinationRecords,\r\n         transportLogs,\r\n         setTransportLogs,\r\n"
                },
                {
                    "date": 1760600433150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord } from '../types';\r\n+import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord, InventoryItem } from '../types';\r\n+import { SAMPLE_SOURCE_RECORDS, SAMPLE_DESTINATION_RECORDS } from '../data/sampleRecords';\r\n+import { SAMPLE_INVENTORY_ITEMS } from '../data/sampleInventory';\r\n+import { SAMPLE_BUYERS, SAMPLE_DRIVERS, SAMPLE_STAFF } from '../data/sampleEntities';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n@@ -19,22 +22,34 @@\n   transportLogs: TransportLog[];\r\n   setTransportLogs: (logs: TransportLog[]) => void;\r\n   profitRecords: ProfitRecord[];\r\n   setProfitRecords: (records: ProfitRecord[]) => void;\r\n+  inventoryItems: InventoryItem[];\r\n+  setInventoryItems: (items: InventoryItem[]) => void;\r\n+  buyers: any[];\r\n+  setBuyers: (buyers: any[]) => void;\r\n+  drivers: any[];\r\n+  setDrivers: (drivers: any[]) => void;\r\n+  staff: any[];\r\n+  setStaff: (staff: any[]) => void;\r\n }\r\n \r\n const AppContext = createContext<AppContextType | null>(null);\r\n \r\n export const AppProvider = ({ children }: { children: React.ReactNode }) => {\r\n   const [user, setUser] = useState<User | null>(null);\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [isDark, setIsDark] = useState(false);\r\n-  const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n+  const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>(SAMPLE_SOURCE_RECORDS);\r\n   const [pickupRecords, setPickupRecords] = useState<PickupRecord[]>([]);\r\n   const [deliveryRecords, setDeliveryRecords] = useState<DeliveryRecord[]>([]);\r\n-  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n+  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>(SAMPLE_DESTINATION_RECORDS);\r\n   const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n   const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n+  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>(SAMPLE_INVENTORY_ITEMS);\r\n+  const [buyers, setBuyers] = useState<any[]>(SAMPLE_BUYERS);\r\n+  const [drivers, setDrivers] = useState<any[]>(SAMPLE_DRIVERS);\r\n+  const [staff, setStaff] = useState<any[]>(SAMPLE_STAFF);\r\n \r\n   useEffect(() => {\r\n     const storedTheme = localStorage.getItem('theme');\r\n     if (storedTheme) {\r\n@@ -67,8 +82,16 @@\n         transportLogs,\r\n         setTransportLogs,\r\n         profitRecords,\r\n         setProfitRecords,\r\n+        inventoryItems,\r\n+        setInventoryItems,\r\n+        buyers,\r\n+        setBuyers,\r\n+        drivers,\r\n+        setDrivers,\r\n+        staff,\r\n+        setStaff,\r\n       }}\r\n     >\r\n       {children}\r\n     </AppContext.Provider>\r\n"
                },
                {
                    "date": 1761638886356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,61 @@\n import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { User, SourceRecord, PickupRecord, DeliveryRecord, DestinationRecord, TransportLog, ProfitRecord, InventoryItem } from '../types';\r\n-import { SAMPLE_SOURCE_RECORDS, SAMPLE_DESTINATION_RECORDS } from '../data/sampleRecords';\r\n-import { SAMPLE_INVENTORY_ITEMS } from '../data/sampleInventory';\r\n-import { SAMPLE_BUYERS, SAMPLE_DRIVERS, SAMPLE_STAFF } from '../data/sampleEntities';\r\n+import { User, DropOffPoint, PackingRecord, DeliveryNotification, Client, Package, PickupStation, AreaCode } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n   isAuthenticated: boolean;\r\n   setIsAuthenticated: (auth: boolean) => void;\r\n   isDark: boolean;\r\n   setIsDark: (dark: boolean) => void;\r\n-  sourceRecords: SourceRecord[];\r\n-  setSourceRecords: (records: SourceRecord[]) => void;\r\n-  pickupRecords: PickupRecord[];\r\n-  setPickupRecords: (records: PickupRecord[]) => void;\r\n-  deliveryRecords: DeliveryRecord[];\r\n-  setDeliveryRecords: (records: DeliveryRecord[]) => void;\r\n-  destinationRecords: DestinationRecord[];\r\n-  setDestinationRecords: (records: DestinationRecord[]) => void;\r\n-  transportLogs: TransportLog[];\r\n-  setTransportLogs: (logs: TransportLog[]) => void;\r\n-  profitRecords: ProfitRecord[];\r\n-  setProfitRecords: (records: ProfitRecord[]) => void;\r\n-  inventoryItems: InventoryItem[];\r\n-  setInventoryItems: (items: InventoryItem[]) => void;\r\n-  buyers: any[];\r\n-  setBuyers: (buyers: any[]) => void;\r\n-  drivers: any[];\r\n-  setDrivers: (drivers: any[]) => void;\r\n-  staff: any[];\r\n-  setStaff: (staff: any[]) => void;\r\n+  dropOffPoints: DropOffPoint[];\r\n+  setDropOffPoints: (points: DropOffPoint[]) => void;\r\n+  packingRecords: PackingRecord[];\r\n+  setPackingRecords: (records: PackingRecord[]) => void;\r\n+  deliveryNotifications: DeliveryNotification[];\r\n+  setDeliveryNotifications: (notifications: DeliveryNotification[]) => void;\r\n+  clients: Client[];\r\n+  setClients: (clients: Client[]) => void;\r\n+  packages: Package[];\r\n+  setPackages: (packages: Package[]) => void;\r\n+  pickupStations: PickupStation[];\r\n+  setPickupStations: (stations: PickupStation[]) => void;\r\n+  areaCodes: AreaCode[];\r\n+  setAreaCodes: (codes: AreaCode[]) => void;\r\n+  users: User[];\r\n+  setUsers: (users: User[]) => void;\r\n }\r\n \r\n const AppContext = createContext<AppContextType | null>(null);\r\n \r\n export const AppProvider = ({ children }: { children: React.ReactNode }) => {\r\n   const [user, setUser] = useState<User | null>(null);\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [isDark, setIsDark] = useState(false);\r\n-  const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>(SAMPLE_SOURCE_RECORDS);\r\n-  const [pickupRecords, setPickupRecords] = useState<PickupRecord[]>([]);\r\n-  const [deliveryRecords, setDeliveryRecords] = useState<DeliveryRecord[]>([]);\r\n-  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>(SAMPLE_DESTINATION_RECORDS);\r\n-  const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n-  const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n-  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>(SAMPLE_INVENTORY_ITEMS);\r\n-  const [buyers, setBuyers] = useState<any[]>(SAMPLE_BUYERS);\r\n-  const [drivers, setDrivers] = useState<any[]>(SAMPLE_DRIVERS);\r\n-  const [staff, setStaff] = useState<any[]>(SAMPLE_STAFF);\r\n+  // Start with no mock data for real-life setup; admin configures via UI\r\n+  const [dropOffPoints, setDropOffPoints] = useState<DropOffPoint[]>([]);\r\n+  const [packingRecords, setPackingRecords] = useState<PackingRecord[]>([]);\r\n+  const [deliveryNotifications, setDeliveryNotifications] = useState<DeliveryNotification[]>([]);\r\n+  const [clients, setClients] = useState<Client[]>([]);\r\n+  const [packages, setPackages] = useState<Package[]>([]);\r\n+  // Initialize with the five real stations provided\r\n+  const [pickupStations, setPickupStations] = useState<PickupStation[]>([\r\n+    { id: 'st-embu', name: 'Embu', code: 'EMB', region: 'Embu', location: 'Embu', status: 'active', contact: '' },\r\n+    { id: 'st-ugweri', name: 'Ugweri', code: 'UGW', region: 'Embu', location: 'Ugweri', status: 'active', contact: '' },\r\n+    { id: 'st-meka', name: 'Meka', code: 'MEK', region: 'Embu', location: 'Meka', status: 'active', contact: '' },\r\n+    { id: 'st-ena', name: 'Ena', code: 'ENA', region: 'Embu', location: 'Ena', status: 'active', contact: '' },\r\n+    { id: 'st-gachuriri', name: 'Gachuriri', code: 'GAC', region: 'Embu', location: 'Gachuriri', status: 'active', contact: '' },\r\n+  ]);\r\n+  // Configure area code ranges exactly as specified\r\n+  const [areaCodes, setAreaCodes] = useState<AreaCode[]>([\r\n+    { id: 'ac-embu', code: 'Embu', name: 'Embu', region: 'Embu', minRange: 1, maxRange: 300, status: 'active' },\r\n+    { id: 'ac-ugweri', code: 'Ugweri', name: 'Ugweri', region: 'Embu', minRange: 301, maxRange: 600, status: 'active' },\r\n+    { id: 'ac-meka', code: 'Meka', name: 'Meka', region: 'Embu', minRange: 601, maxRange: 900, status: 'active' },\r\n+    { id: 'ac-ena', code: 'Ena', name: 'Ena', region: 'Embu', minRange: 901, maxRange: 1000, status: 'active' },\r\n+    { id: 'ac-gachuriri', code: 'Gachuriri', name: 'Gachuriri', region: 'Embu', minRange: 1001, maxRange: 1100, status: 'active' },\r\n+  ]);\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n \r\n   useEffect(() => {\r\n     const storedTheme = localStorage.getItem('theme');\r\n     if (storedTheme) {\r\n@@ -61,8 +67,14 @@\n     document.documentElement.classList.toggle('dark', isDark);\r\n     localStorage.setItem('theme', isDark ? 'dark' : 'light');\r\n   }, [isDark]);\r\n \r\n+  // Extract all clients from drop-off points\r\n+  useEffect(() => {\r\n+    const allClients = dropOffPoints.flatMap(point => point.clients);\r\n+    setClients(allClients);\r\n+  }, [dropOffPoints]);\r\n+\r\n   return (\r\n     <AppContext.Provider\r\n       value={{\r\n         user,\r\n@@ -70,28 +82,24 @@\n         isAuthenticated,\r\n         setIsAuthenticated,\r\n         isDark,\r\n         setIsDark,\r\n-        sourceRecords,\r\n-        setSourceRecords,\r\n-        pickupRecords,\r\n-        setPickupRecords,\r\n-        deliveryRecords,\r\n-        setDeliveryRecords,\r\n-        destinationRecords,\r\n-        setDestinationRecords,\r\n-        transportLogs,\r\n-        setTransportLogs,\r\n-        profitRecords,\r\n-        setProfitRecords,\r\n-        inventoryItems,\r\n-        setInventoryItems,\r\n-        buyers,\r\n-        setBuyers,\r\n-        drivers,\r\n-        setDrivers,\r\n-        staff,\r\n-        setStaff,\r\n+        dropOffPoints,\r\n+        setDropOffPoints,\r\n+        packingRecords,\r\n+        setPackingRecords,\r\n+        deliveryNotifications,\r\n+        setDeliveryNotifications,\r\n+        clients,\r\n+        setClients,\r\n+        packages,\r\n+        setPackages,\r\n+        pickupStations,\r\n+        setPickupStations,\r\n+        areaCodes,\r\n+        setAreaCodes,\r\n+        users,\r\n+        setUsers,\r\n       }}\r\n     >\r\n       {children}\r\n     </AppContext.Provider>\r\n"
                },
                {
                    "date": 1761717843394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { createContext, useContext, useState, useEffect } from 'react';\r\n+import { createContext, useContext, useState, useEffect, useMemo, useCallback } from 'react';\r\n import { User, DropOffPoint, PackingRecord, DeliveryNotification, Client, Package, PickupStation, AreaCode } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n"
                },
                {
                    "date": 1761717871769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,87 @@\n     { id: 'ac-gachuriri', code: 'Gachuriri', name: 'Gachuriri', region: 'Embu', minRange: 1001, maxRange: 1100, status: 'active' },\r\n   ]);\r\n   const [users, setUsers] = useState<User[]>([]);\r\n \r\n+  // Load data from localStorage on mount\r\n   useEffect(() => {\r\n+    try {\r\n+      const savedPackages = localStorage.getItem('mwalimu-packages');\r\n+      if (savedPackages) {\r\n+        const parsed = JSON.parse(savedPackages);\r\n+        if (Array.isArray(parsed)) setPackages(parsed);\r\n+      }\r\n+\r\n+      const savedUsers = localStorage.getItem('mwalimu-users');\r\n+      if (savedUsers) {\r\n+        const parsed = JSON.parse(savedUsers);\r\n+        if (Array.isArray(parsed)) setUsers(parsed);\r\n+      }\r\n+\r\n+      const savedClients = localStorage.getItem('mwalimu-clients');\r\n+      if (savedClients) {\r\n+        const parsed = JSON.parse(savedClients);\r\n+        if (Array.isArray(parsed)) setClients(parsed);\r\n+      }\r\n+\r\n+      const savedStations = localStorage.getItem('mwalimu-stations');\r\n+      if (savedStations) {\r\n+        const parsed = JSON.parse(savedStations);\r\n+        if (Array.isArray(parsed)) setPickupStations(parsed);\r\n+      }\r\n+\r\n+      const savedAreaCodes = localStorage.getItem('mwalimu-area-codes');\r\n+      if (savedAreaCodes) {\r\n+        const parsed = JSON.parse(savedAreaCodes);\r\n+        if (Array.isArray(parsed)) setAreaCodes(parsed);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Failed to load data from localStorage:', error);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Save data to localStorage whenever it changes\r\n+  useEffect(() => {\r\n+    try {\r\n+      localStorage.setItem('mwalimu-packages', JSON.stringify(packages));\r\n+    } catch (error) {\r\n+      console.error('Failed to save packages to localStorage:', error);\r\n+    }\r\n+  }, [packages]);\r\n+\r\n+  useEffect(() => {\r\n+    try {\r\n+      localStorage.setItem('mwalimu-users', JSON.stringify(users));\r\n+    } catch (error) {\r\n+      console.error('Failed to save users to localStorage:', error);\r\n+    }\r\n+  }, [users]);\r\n+\r\n+  useEffect(() => {\r\n+    try {\r\n+      localStorage.setItem('mwalimu-clients', JSON.stringify(clients));\r\n+    } catch (error) {\r\n+      console.error('Failed to save clients to localStorage:', error);\r\n+    }\r\n+  }, [clients]);\r\n+\r\n+  useEffect(() => {\r\n+    try {\r\n+      localStorage.setItem('mwalimu-stations', JSON.stringify(pickupStations));\r\n+    } catch (error) {\r\n+      console.error('Failed to save stations to localStorage:', error);\r\n+    }\r\n+  }, [pickupStations]);\r\n+\r\n+  useEffect(() => {\r\n+    try {\r\n+      localStorage.setItem('mwalimu-area-codes', JSON.stringify(areaCodes));\r\n+    } catch (error) {\r\n+      console.error('Failed to save area codes to localStorage:', error);\r\n+    }\r\n+  }, [areaCodes]);\r\n+\r\n+  useEffect(() => {\r\n     const storedTheme = localStorage.getItem('theme');\r\n     if (storedTheme) {\r\n       setIsDark(storedTheme === 'dark');\r\n     }\r\n"
                },
                {
                    "date": 1761717882695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,35 +151,36 @@\n     const allClients = dropOffPoints.flatMap(point => point.clients);\r\n     setClients(allClients);\r\n   }, [dropOffPoints]);\r\n \r\n+  // Memoize context value to prevent unnecessary re-renders\r\n+  const contextValue = useMemo(() => ({\r\n+    user,\r\n+    setUser,\r\n+    isAuthenticated,\r\n+    setIsAuthenticated,\r\n+    isDark,\r\n+    setIsDark,\r\n+    dropOffPoints,\r\n+    setDropOffPoints,\r\n+    packingRecords,\r\n+    setPackingRecords,\r\n+    deliveryNotifications,\r\n+    setDeliveryNotifications,\r\n+    clients,\r\n+    setClients,\r\n+    packages,\r\n+    setPackages,\r\n+    pickupStations,\r\n+    setPickupStations,\r\n+    areaCodes,\r\n+    setAreaCodes,\r\n+    users,\r\n+    setUsers,\r\n+  }), [user, isAuthenticated, isDark, dropOffPoints, packingRecords, deliveryNotifications, clients, packages, pickupStations, areaCodes, users]);\r\n+\r\n   return (\r\n-    <AppContext.Provider\r\n-      value={{\r\n-        user,\r\n-        setUser,\r\n-        isAuthenticated,\r\n-        setIsAuthenticated,\r\n-        isDark,\r\n-        setIsDark,\r\n-        dropOffPoints,\r\n-        setDropOffPoints,\r\n-        packingRecords,\r\n-        setPackingRecords,\r\n-        deliveryNotifications,\r\n-        setDeliveryNotifications,\r\n-        clients,\r\n-        setClients,\r\n-        packages,\r\n-        setPackages,\r\n-        pickupStations,\r\n-        setPickupStations,\r\n-        areaCodes,\r\n-        setAreaCodes,\r\n-        users,\r\n-        setUsers,\r\n-      }}\r\n-    >\r\n+    <AppContext.Provider value={contextValue}>\r\n       {children}\r\n     </AppContext.Provider>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1761717889200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { createContext, useContext, useState, useEffect, useMemo, useCallback } from 'react';\r\n+import { createContext, useContext, useState, useEffect, useMemo } from 'react';\r\n import { User, DropOffPoint, PackingRecord, DeliveryNotification, Client, Package, PickupStation, AreaCode } from '../types';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n"
                },
                {
                    "date": 1761798523652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import { createContext, useContext, useState, useEffect, useMemo } from 'react';\r\n import { User, DropOffPoint, PackingRecord, DeliveryNotification, Client, Package, PickupStation, AreaCode } from '../types';\r\n+import { dataService } from '../services/dataService';\r\n+import { isSupabaseEnabled } from '../lib/supabaseClient';\r\n \r\n export interface AppContextType {\r\n   user: User | null;\r\n   setUser: (user: User | null) => void;\r\n@@ -55,79 +57,121 @@\n     { id: 'ac-gachuriri', code: 'Gachuriri', name: 'Gachuriri', region: 'Embu', minRange: 1001, maxRange: 1100, status: 'active' },\r\n   ]);\r\n   const [users, setUsers] = useState<User[]>([]);\r\n \r\n-  // Load data from localStorage on mount\r\n+  // Load data on mount (Supabase if enabled, otherwise localStorage fallback)\r\n   useEffect(() => {\r\n-    try {\r\n-      const savedPackages = localStorage.getItem('mwalimu-packages');\r\n-      if (savedPackages) {\r\n-        const parsed = JSON.parse(savedPackages);\r\n-        if (Array.isArray(parsed)) setPackages(parsed);\r\n-      }\r\n+    const load = async () => {\r\n+      if (isSupabaseEnabled()) {\r\n+        try {\r\n+          const [pkgs, usrs, cls, sts, areas] = await Promise.all([\r\n+            dataService.listPackages(),\r\n+            dataService.listUsers(),\r\n+            dataService.listClients(),\r\n+            dataService.listStations(),\r\n+            dataService.listAreaCodes(),\r\n+          ]);\r\n+          setPackages(pkgs);\r\n+          setUsers(usrs);\r\n+          setClients(cls);\r\n+          if (sts && sts.length) setPickupStations(sts);\r\n+          if (areas && areas.length) setAreaCodes(areas);\r\n+        } catch (error) {\r\n+          console.error('Failed to load data from Supabase, falling back to localStorage', error);\r\n+        }\r\n+      } else {\r\n+        try {\r\n+          const savedPackages = localStorage.getItem('mwalimu-packages');\r\n+          if (savedPackages) {\r\n+            const parsed = JSON.parse(savedPackages);\r\n+            if (Array.isArray(parsed)) setPackages(parsed);\r\n+          }\r\n \r\n-      const savedUsers = localStorage.getItem('mwalimu-users');\r\n-      if (savedUsers) {\r\n-        const parsed = JSON.parse(savedUsers);\r\n-        if (Array.isArray(parsed)) setUsers(parsed);\r\n-      }\r\n+          const savedUsers = localStorage.getItem('mwalimu-users');\r\n+          if (savedUsers) {\r\n+            const parsed = JSON.parse(savedUsers);\r\n+            if (Array.isArray(parsed)) setUsers(parsed);\r\n+          }\r\n \r\n-      const savedClients = localStorage.getItem('mwalimu-clients');\r\n-      if (savedClients) {\r\n-        const parsed = JSON.parse(savedClients);\r\n-        if (Array.isArray(parsed)) setClients(parsed);\r\n-      }\r\n+          const savedClients = localStorage.getItem('mwalimu-clients');\r\n+          if (savedClients) {\r\n+            const parsed = JSON.parse(savedClients);\r\n+            if (Array.isArray(parsed)) setClients(parsed);\r\n+          }\r\n \r\n-      const savedStations = localStorage.getItem('mwalimu-stations');\r\n-      if (savedStations) {\r\n-        const parsed = JSON.parse(savedStations);\r\n-        if (Array.isArray(parsed)) setPickupStations(parsed);\r\n-      }\r\n+          const savedStations = localStorage.getItem('mwalimu-stations');\r\n+          if (savedStations) {\r\n+            const parsed = JSON.parse(savedStations);\r\n+            if (Array.isArray(parsed)) setPickupStations(parsed);\r\n+          }\r\n \r\n-      const savedAreaCodes = localStorage.getItem('mwalimu-area-codes');\r\n-      if (savedAreaCodes) {\r\n-        const parsed = JSON.parse(savedAreaCodes);\r\n-        if (Array.isArray(parsed)) setAreaCodes(parsed);\r\n+          const savedAreaCodes = localStorage.getItem('mwalimu-area-codes');\r\n+          if (savedAreaCodes) {\r\n+            const parsed = JSON.parse(savedAreaCodes);\r\n+            if (Array.isArray(parsed)) setAreaCodes(parsed);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Failed to load data from localStorage:', error);\r\n+        }\r\n       }\r\n-    } catch (error) {\r\n-      console.error('Failed to load data from localStorage:', error);\r\n-    }\r\n+    };\r\n+    load();\r\n   }, []);\r\n \r\n-  // Save data to localStorage whenever it changes\r\n+  // Persist packages\r\n   useEffect(() => {\r\n+    if (isSupabaseEnabled()) {\r\n+      dataService.upsertPackages(packages);\r\n+      return;\r\n+    }\r\n     try {\r\n       localStorage.setItem('mwalimu-packages', JSON.stringify(packages));\r\n     } catch (error) {\r\n       console.error('Failed to save packages to localStorage:', error);\r\n     }\r\n   }, [packages]);\r\n \r\n   useEffect(() => {\r\n+    if (isSupabaseEnabled()) {\r\n+      dataService.upsertUsers(users);\r\n+      return;\r\n+    }\r\n     try {\r\n       localStorage.setItem('mwalimu-users', JSON.stringify(users));\r\n     } catch (error) {\r\n       console.error('Failed to save users to localStorage:', error);\r\n     }\r\n   }, [users]);\r\n \r\n   useEffect(() => {\r\n+    if (isSupabaseEnabled()) {\r\n+      dataService.upsertClients(clients);\r\n+      return;\r\n+    }\r\n     try {\r\n       localStorage.setItem('mwalimu-clients', JSON.stringify(clients));\r\n     } catch (error) {\r\n       console.error('Failed to save clients to localStorage:', error);\r\n     }\r\n   }, [clients]);\r\n \r\n   useEffect(() => {\r\n+    if (isSupabaseEnabled()) {\r\n+      dataService.upsertStations(pickupStations);\r\n+      return;\r\n+    }\r\n     try {\r\n       localStorage.setItem('mwalimu-stations', JSON.stringify(pickupStations));\r\n     } catch (error) {\r\n       console.error('Failed to save stations to localStorage:', error);\r\n     }\r\n   }, [pickupStations]);\r\n \r\n   useEffect(() => {\r\n+    if (isSupabaseEnabled()) {\r\n+      dataService.upsertAreaCodes(areaCodes);\r\n+      return;\r\n+    }\r\n     try {\r\n       localStorage.setItem('mwalimu-area-codes', JSON.stringify(areaCodes));\r\n     } catch (error) {\r\n       console.error('Failed to save area codes to localStorage:', error);\r\n"
                },
                {
                    "date": 1761799957330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,23 +40,25 @@\n   const [deliveryNotifications, setDeliveryNotifications] = useState<DeliveryNotification[]>([]);\r\n   const [clients, setClients] = useState<Client[]>([]);\r\n   const [packages, setPackages] = useState<Package[]>([]);\r\n   // Initialize with the five real stations provided\r\n-  const [pickupStations, setPickupStations] = useState<PickupStation[]>([\r\n+  const DEFAULT_STATIONS: PickupStation[] = [\r\n     { id: 'st-embu', name: 'Embu', code: 'EMB', region: 'Embu', location: 'Embu', status: 'active', contact: '' },\r\n     { id: 'st-ugweri', name: 'Ugweri', code: 'UGW', region: 'Embu', location: 'Ugweri', status: 'active', contact: '' },\r\n     { id: 'st-meka', name: 'Meka', code: 'MEK', region: 'Embu', location: 'Meka', status: 'active', contact: '' },\r\n     { id: 'st-ena', name: 'Ena', code: 'ENA', region: 'Embu', location: 'Ena', status: 'active', contact: '' },\r\n     { id: 'st-gachuriri', name: 'Gachuriri', code: 'GAC', region: 'Embu', location: 'Gachuriri', status: 'active', contact: '' },\r\n-  ]);\r\n+  ];\r\n+  const [pickupStations, setPickupStations] = useState<PickupStation[]>(DEFAULT_STATIONS);\r\n   // Configure area code ranges exactly as specified\r\n-  const [areaCodes, setAreaCodes] = useState<AreaCode[]>([\r\n+  const DEFAULT_AREA_CODES: AreaCode[] = [\r\n     { id: 'ac-embu', code: 'Embu', name: 'Embu', region: 'Embu', minRange: 1, maxRange: 300, status: 'active' },\r\n     { id: 'ac-ugweri', code: 'Ugweri', name: 'Ugweri', region: 'Embu', minRange: 301, maxRange: 600, status: 'active' },\r\n     { id: 'ac-meka', code: 'Meka', name: 'Meka', region: 'Embu', minRange: 601, maxRange: 900, status: 'active' },\r\n     { id: 'ac-ena', code: 'Ena', name: 'Ena', region: 'Embu', minRange: 901, maxRange: 1000, status: 'active' },\r\n     { id: 'ac-gachuriri', code: 'Gachuriri', name: 'Gachuriri', region: 'Embu', minRange: 1001, maxRange: 1100, status: 'active' },\r\n-  ]);\r\n+  ];\r\n+  const [areaCodes, setAreaCodes] = useState<AreaCode[]>(DEFAULT_AREA_CODES);\r\n   const [users, setUsers] = useState<User[]>([]);\r\n \r\n   // Load data on mount (Supabase if enabled, otherwise localStorage fallback)\r\n   useEffect(() => {\r\n@@ -72,10 +74,10 @@\n           ]);\r\n           setPackages(pkgs);\r\n           setUsers(usrs);\r\n           setClients(cls);\r\n-          if (sts && sts.length) setPickupStations(sts);\r\n-          if (areas && areas.length) setAreaCodes(areas);\r\n+          setPickupStations(sts && sts.length ? sts : DEFAULT_STATIONS);\r\n+          setAreaCodes(areas && areas.length ? areas : DEFAULT_AREA_CODES);\r\n         } catch (error) {\r\n           console.error('Failed to load data from Supabase, falling back to localStorage', error);\r\n         }\r\n       } else {\r\n@@ -116,8 +118,31 @@\n     };\r\n     load();\r\n   }, []);\r\n \r\n+  // Seed Supabase with defaults on first run if tables are empty\r\n+  useEffect(() => {\r\n+    if (!isSupabaseEnabled()) return;\r\n+    const seededFlag = localStorage.getItem('mwalimu-supabase-seeded');\r\n+    if (seededFlag === 'true') return;\r\n+    const doSeed = async () => {\r\n+      try {\r\n+        if (pickupStations.length === 0) {\r\n+          await dataService.upsertStations(DEFAULT_STATIONS);\r\n+          setPickupStations(DEFAULT_STATIONS);\r\n+        }\r\n+        if (areaCodes.length === 0) {\r\n+          await dataService.upsertAreaCodes(DEFAULT_AREA_CODES);\r\n+          setAreaCodes(DEFAULT_AREA_CODES);\r\n+        }\r\n+        localStorage.setItem('mwalimu-supabase-seeded', 'true');\r\n+      } catch (e) {\r\n+        // ignore; user may not want seeding\r\n+      }\r\n+    };\r\n+    doSeed();\r\n+  }, [pickupStations.length, areaCodes.length]);\r\n+\r\n   // Persist packages\r\n   useEffect(() => {\r\n     if (isSupabaseEnabled()) {\r\n       dataService.upsertPackages(packages);\r\n"
                },
                {
                    "date": 1761800524448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n     { id: 'ac-gachuriri', code: 'Gachuriri', name: 'Gachuriri', region: 'Embu', minRange: 1001, maxRange: 1100, status: 'active' },\r\n   ];\r\n   const [areaCodes, setAreaCodes] = useState<AreaCode[]>(DEFAULT_AREA_CODES);\r\n   const [users, setUsers] = useState<User[]>([]);\r\n+  const [hydrated, setHydrated] = useState(false);\r\n \r\n   // Load data on mount (Supabase if enabled, otherwise localStorage fallback)\r\n   useEffect(() => {\r\n     const load = async () => {\r\n@@ -114,8 +115,9 @@\n         } catch (error) {\r\n           console.error('Failed to load data from localStorage:', error);\r\n         }\r\n       }\r\n+      setHydrated(true);\r\n     };\r\n     load();\r\n   }, []);\r\n \r\n@@ -143,8 +145,9 @@\n   }, [pickupStations.length, areaCodes.length]);\r\n \r\n   // Persist packages\r\n   useEffect(() => {\r\n+    if (!hydrated) return;\r\n     if (isSupabaseEnabled()) {\r\n       dataService.upsertPackages(packages);\r\n       return;\r\n     }\r\n@@ -155,8 +158,9 @@\n     }\r\n   }, [packages]);\r\n \r\n   useEffect(() => {\r\n+    if (!hydrated) return;\r\n     if (isSupabaseEnabled()) {\r\n       dataService.upsertUsers(users);\r\n       return;\r\n     }\r\n@@ -167,8 +171,9 @@\n     }\r\n   }, [users]);\r\n \r\n   useEffect(() => {\r\n+    if (!hydrated) return;\r\n     if (isSupabaseEnabled()) {\r\n       dataService.upsertClients(clients);\r\n       return;\r\n     }\r\n@@ -179,8 +184,9 @@\n     }\r\n   }, [clients]);\r\n \r\n   useEffect(() => {\r\n+    if (!hydrated) return;\r\n     if (isSupabaseEnabled()) {\r\n       dataService.upsertStations(pickupStations);\r\n       return;\r\n     }\r\n@@ -191,8 +197,9 @@\n     }\r\n   }, [pickupStations]);\r\n \r\n   useEffect(() => {\r\n+    if (!hydrated) return;\r\n     if (isSupabaseEnabled()) {\r\n       dataService.upsertAreaCodes(areaCodes);\r\n       return;\r\n     }\r\n"
                }
            ],
            "date": 1759565426530,
            "name": "Commit-0",
            "content": "import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, SourceRecord, DestinationRecord, TransportLog, ProfitRecord, Driver, Buyer } from '../types';\r\n\r\nexport interface AppContextType {\r\n  user: User | null;\r\n  setUser: (user: User | null) => void;\r\n  isAuthenticated: boolean;\r\n  setIsAuthenticated: (auth: boolean) => void;\r\n  isDark: boolean;\r\n  setIsDark: (dark: boolean) => void;\r\n  sourceRecords: SourceRecord[];\r\n  setSourceRecords: (records: SourceRecord[]) => void;\r\n  destinationRecords: DestinationRecord[];\r\n  setDestinationRecords: (records: DestinationRecord[]) => void;\r\n  transportLogs: TransportLog[];\r\n  setTransportLogs: (logs: TransportLog[]) => void;\r\n  profitRecords: ProfitRecord[];\r\n  setProfitRecords: (records: ProfitRecord[]) => void;\r\n}\r\n\r\nconst AppContext = createContext<AppContextType | null>(null);\r\n\r\nexport const AppProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isDark, setIsDark] = useState(false);\r\n  const [sourceRecords, setSourceRecords] = useState<SourceRecord[]>([]);\r\n  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n  const [transportLogs, setTransportLogs] = useState<TransportLog[]>([]);\r\n  const [profitRecords, setProfitRecords] = useState<ProfitRecord[]>([]);\r\n\r\n  useEffect(() => {\r\n    const storedTheme = localStorage.getItem('theme');\r\n    if (storedTheme) {\r\n      setIsDark(storedTheme === 'dark');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.documentElement.classList.toggle('dark', isDark);\r\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\r\n  }, [isDark]);\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        user,\r\n        setUser,\r\n        isAuthenticated,\r\n        setIsAuthenticated,\r\n        isDark,\r\n        setIsDark,\r\n        sourceRecords,\r\n        setSourceRecords,\r\n        destinationRecords,\r\n        setDestinationRecords,\r\n        transportLogs,\r\n        setTransportLogs,\r\n        profitRecords,\r\n        setProfitRecords,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useApp = () => {\r\n  const context = useContext(AppContext);\r\n  if (!context) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n};\r\n"
        }
    ]
}