{
    "sourceFile": "src/utils/geolocation.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757643199427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757643199427,
            "name": "Commit-0",
            "content": "// Geolocation utility functions\r\nexport interface Coordinates {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport interface GeolocationResult {\r\n  coordinates: Coordinates | null;\r\n  error: string | null;\r\n}\r\n\r\n// Get user's current location using browser geolocation API\r\nexport const getCurrentLocation = (): Promise<GeolocationResult> => {\r\n  return new Promise((resolve) => {\r\n    if (!navigator.geolocation) {\r\n      resolve({\r\n        coordinates: null,\r\n        error: 'Geolocation is not supported by this browser.'\r\n      });\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        resolve({\r\n          coordinates: {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude\r\n          },\r\n          error: null\r\n        });\r\n      },\r\n      (error) => {\r\n        let errorMessage = 'Unable to retrieve your location.';\r\n        \r\n        switch (error.code) {\r\n          case error.PERMISSION_DENIED:\r\n            errorMessage = 'Location access denied by user.';\r\n            break;\r\n          case error.POSITION_UNAVAILABLE:\r\n            errorMessage = 'Location information is unavailable.';\r\n            break;\r\n          case error.TIMEOUT:\r\n            errorMessage = 'Location request timed out.';\r\n            break;\r\n        }\r\n        \r\n        resolve({\r\n          coordinates: null,\r\n          error: errorMessage\r\n        });\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 300000 // 5 minutes\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n// Geocode address to coordinates (mock implementation)\r\n// In a real app, you would use Google Maps Geocoding API or similar\r\nexport const geocodeAddress = async (address: string): Promise<GeolocationResult> => {\r\n  // Mock geocoding - in production, replace with actual API call\r\n  const mockCoordinates: { [key: string]: Coordinates } = {\r\n    'nairobi cbd': { lat: -1.2921, lng: 36.8219 },\r\n    'westlands': { lat: -1.2654, lng: 36.8021 },\r\n    'karen': { lat: -1.3197, lng: 36.8140 },\r\n    'kilimani': { lat: -1.2500, lng: 36.8000 },\r\n    'kileleshwa': { lat: -1.2800, lng: 36.8200 },\r\n    'runda': { lat: -1.3000, lng: 36.8500 },\r\n    'thika': { lat: -1.2000, lng: 36.9000 },\r\n    'kiambu town': { lat: -1.1800, lng: 36.8200 }\r\n  };\r\n\r\n  const normalizedAddress = address.toLowerCase().trim();\r\n  \r\n  // Try to find exact match first\r\n  if (mockCoordinates[normalizedAddress]) {\r\n    return {\r\n      coordinates: mockCoordinates[normalizedAddress],\r\n      error: null\r\n    };\r\n  }\r\n\r\n  // Try partial matches\r\n  for (const [key, coords] of Object.entries(mockCoordinates)) {\r\n    if (normalizedAddress.includes(key) || key.includes(normalizedAddress)) {\r\n      return {\r\n        coordinates: coords,\r\n        error: null\r\n      };\r\n    }\r\n  }\r\n\r\n  // If no match found, return a default Nairobi location\r\n  return {\r\n    coordinates: { lat: -1.2921, lng: 36.8219 }, // Nairobi CBD\r\n    error: 'Address not found, using default location'\r\n  };\r\n};\r\n\r\n// Format coordinates for display\r\nexport const formatCoordinates = (coords: Coordinates): string => {\r\n  return `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`;\r\n};\r\n\r\n// Calculate distance between two coordinates using Haversine formula\r\nexport const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {\r\n  const R = 6371; // Earth's radius in kilometers\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n            Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n};\r\n\r\n// Format distance for display\r\nexport const formatDistance = (distance: number): string => {\r\n  if (distance < 1) {\r\n    return `${Math.round(distance * 1000)}m`;\r\n  }\r\n  return `${distance.toFixed(1)}km`;\r\n};\r\n"
        }
    ]
}