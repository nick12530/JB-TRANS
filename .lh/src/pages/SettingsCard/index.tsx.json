{
    "sourceFile": "src/pages/SettingsCard/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1759910398891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759910438552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   modifiedBy?: string;\r\n }\r\n \r\n export const SettingsCardPage: React.FC = () => {\r\n-  const { user, isDark, setIsDark } = useApp();\r\n+  const { user } = useApp();\r\n   const { showSuccessNotification, showErrorNotification } = useNotificationService();\r\n   const [isModalOpen, setIsModalOpen] = useState(false);\r\n   const [editingSetting, setEditingSetting] = useState<SystemSetting | null>(null);\r\n   const [activeCategory, setActiveCategory] = useState<string>('general');\r\n"
                },
                {
                    "date": 1759910456134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -544,23 +544,26 @@\n                     </span>\r\n                   </div>\r\n                 ) : editingSetting.type === 'select' ? (\r\n                   <FormSelect\r\n+                    label=\"Value\"\r\n                     value={formData.value || ''}\r\n                     onChange={(value) => setFormData({ ...formData, value })}\r\n                     options={editingSetting.options || []}\r\n                   />\r\n                 ) : editingSetting.type === 'password' ? (\r\n                   <div className=\"relative\">\r\n                     <FormInput\r\n+                      label=\"Password\"\r\n                       type=\"password\"\r\n                       value={formData.value || ''}\r\n                       onChange={(value) => setFormData({ ...formData, value })}\r\n                       placeholder=\"Enter new password\"\r\n                     />\r\n                   </div>\r\n                 ) : (\r\n                   <FormInput\r\n+                    label=\"Value\"\r\n                     type={editingSetting.type === 'number' ? 'number' : 'text'}\r\n                     value={formData.value || ''}\r\n                     onChange={(value) => setFormData({ ...formData, value })}\r\n                   />\r\n"
                },
                {
                    "date": 1759910499951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,18 +294,18 @@\n               } \r\n             : setting\r\n         )\r\n       );\r\n-      showSuccessNotification('Setting updated successfully!');\r\n+      showSuccessNotification('Success', 'Setting updated successfully!');\r\n     }\r\n \r\n     handleCloseModal();\r\n   };\r\n \r\n   const handleResetToDefault = (setting: SystemSetting) => {\r\n     if (window.confirm(`Reset \"${setting.label}\" to default value?`)) {\r\n       // In a real app, you would reset to the actual default value\r\n-      showSuccessNotification(`\"${setting.label}\" reset to default value`);\r\n+      showSuccessNotification('Success', `\"${setting.label}\" reset to default value`);\r\n     }\r\n   };\r\n \r\n   const handleBulkSave = () => {\r\n"
                },
                {
                    "date": 1759910570993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,9 @@\n     }\r\n   };\r\n \r\n   const handleBulkSave = () => {\r\n-    showSuccessNotification('All settings saved successfully!');\r\n+    showSuccessNotification('Success', 'All settings saved successfully!');\r\n   };\r\n \r\n   const handleExportSettings = () => {\r\n     const settingsData = JSON.stringify(systemSettings, null, 2);\r\n@@ -320,9 +320,9 @@\n     a.href = url;\r\n     a.download = 'system-settings.json';\r\n     a.click();\r\n     URL.revokeObjectURL(url);\r\n-    showSuccessNotification('Settings exported successfully!');\r\n+    showSuccessNotification('Success', 'Settings exported successfully!');\r\n   };\r\n \r\n   const handleImportSettings = () => {\r\n     const input = document.createElement('input');\r\n@@ -335,11 +335,11 @@\n         reader.onload = (e) => {\r\n           try {\r\n             const importedSettings = JSON.parse(e.target?.result as string);\r\n             setSystemSettings(importedSettings);\r\n-            showSuccessNotification('Settings imported successfully!');\r\n+            showSuccessNotification('Success', 'Settings imported successfully!');\r\n           } catch (error) {\r\n-            showErrorNotification('Invalid settings file format');\r\n+            showErrorNotification('Error', 'Invalid settings file format');\r\n           }\r\n         };\r\n         reader.readAsText(file);\r\n       }\r\n"
                },
                {
                    "date": 1759917229072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,24 @@\n   Palette, \r\n   Database,\r\n   Lock,\r\n   CheckCircle,\r\n-  XCircle\r\n+  XCircle,\r\n+  User,\r\n+  Download,\r\n+  Upload,\r\n+  Eye,\r\n+  EyeOff,\r\n+  Clock,\r\n+  Globe,\r\n+  Zap,\r\n+  AlertTriangle,\r\n+  Info,\r\n+  Star,\r\n+  Heart,\r\n+  Moon,\r\n+  Sun,\r\n+  Monitor\r\n } from 'lucide-react';\r\n \r\n interface SystemSetting {\r\n   id: string;\r\n"
                },
                {
                    "date": 1759917374687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,20 +18,11 @@\n   XCircle,\r\n   User,\r\n   Download,\r\n   Upload,\r\n-  Eye,\r\n-  EyeOff,\r\n   Clock,\r\n-  Globe,\r\n-  Zap,\r\n   AlertTriangle,\r\n-  Info,\r\n-  Star,\r\n-  Heart,\r\n-  Moon,\r\n-  Sun,\r\n-  Monitor\r\n+  Info\r\n } from 'lucide-react';\r\n \r\n interface SystemSetting {\r\n   id: string;\r\n@@ -265,13 +256,13 @@\n \r\n   const [formData, setFormData] = useState<Partial<SystemSetting>>({});\r\n \r\n   const categories = [\r\n-    { key: 'general', label: 'General', icon: Settings, color: 'blue' },\r\n-    { key: 'security', label: 'Security', icon: Shield, color: 'red' },\r\n-    { key: 'notifications', label: 'Notifications', icon: Bell, color: 'yellow' },\r\n-    { key: 'appearance', label: 'Appearance', icon: Palette, color: 'purple' },\r\n-    { key: 'system', label: 'System', icon: Database, color: 'green' },\r\n+    { key: 'general', label: 'General', icon: Settings, color: 'blue', description: 'Basic application settings' },\r\n+    { key: 'security', label: 'Security', icon: Shield, color: 'red', description: 'Security and privacy settings' },\r\n+    { key: 'notifications', label: 'Notifications', icon: Bell, color: 'emerald', description: 'Notification preferences' },\r\n+    { key: 'appearance', label: 'Appearance', icon: Palette, color: 'purple', description: 'Theme and visual settings' },\r\n+    { key: 'system', label: 'System', icon: Database, color: 'lime', description: 'System configuration' },\r\n   ];\r\n \r\n   const filteredSettings = useMemo(() => {\r\n     return systemSettings.filter(setting => setting.category === activeCategory);\r\n@@ -403,128 +394,170 @@\n   };\r\n \r\n   return (\r\n     <div className=\"space-y-6 max-w-full overflow-hidden\">\r\n-      {/* Header */}\r\n-      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n+      {/* Enhanced Header */}\r\n+      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n         <div>\r\n-          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Settings Card</h1>\r\n+          <h1 className=\"text-3xl font-bold text-gradient-purple\">Settings & Configuration</h1>\r\n           <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n-            System configuration and application settings management\r\n+            Manage your application preferences and system configuration\r\n           </p>\r\n+          <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500 dark:text-gray-400\">\r\n+            <span>Last updated: {new Date().toLocaleString()}</span>\r\n+            <span>â€¢</span>\r\n+            <span>{filteredSettings.length} settings in {categories.find(c => c.key === activeCategory)?.label}</span>\r\n+          </div>\r\n         </div>\r\n         \r\n-        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3\">\r\n+        <div className=\"flex items-center gap-3\">\r\n           <button \r\n             onClick={handleImportSettings}\r\n-            className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n+            className=\"btn-blue flex items-center gap-2\"\r\n           >\r\n-            <RefreshCw className=\"h-4 w-4\" />\r\n-            <span>Import</span>\r\n+            <Upload className=\"h-4 w-4\" />\r\n+            Import\r\n           </button>\r\n           <button \r\n             onClick={handleExportSettings}\r\n-            className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n+            className=\"btn-emerald flex items-center gap-2\"\r\n           >\r\n-            <Database className=\"h-4 w-4\" />\r\n-            <span>Export</span>\r\n+            <Download className=\"h-4 w-4\" />\r\n+            Export\r\n           </button>\r\n           <button\r\n             onClick={handleBulkSave}\r\n-            className=\"flex items-center space-x-2 px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n+            className=\"btn-purple flex items-center gap-2\"\r\n           >\r\n             <Save className=\"h-4 w-4\" />\r\n-            <span>Save All</span>\r\n+            Save All\r\n           </button>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Category Tabs */}\r\n-      <Card className=\"p-4\">\r\n-        <div className=\"flex flex-wrap gap-2\">\r\n-          {categories.map((category) => {\r\n-            const Icon = category.icon;\r\n-            const isActive = activeCategory === category.key;\r\n-            return (\r\n-              <button\r\n-                key={category.key}\r\n-                onClick={() => setActiveCategory(category.key)}\r\n-                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\r\n-                  isActive\r\n-                    ? `bg-${category.color}-100 dark:bg-${category.color}-900/20 text-${category.color}-800 dark:text-${category.color}-200 border border-${category.color}-200 dark:border-${category.color}-700`\r\n-                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n-                }`}\r\n-              >\r\n-                <Icon className=\"h-4 w-4\" />\r\n-                <span className=\"font-medium\">{category.label}</span>\r\n-              </button>\r\n-            );\r\n-          })}\r\n-        </div>\r\n-      </Card>\r\n+      {/* Enhanced Category Cards */}\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n+        {categories.map((category) => {\r\n+          const Icon = category.icon;\r\n+          const isActive = activeCategory === category.key;\r\n+          const settingsCount = systemSettings.filter(s => s.category === category.key).length;\r\n+          \r\n+          return (\r\n+            <Card \r\n+              key={category.key}\r\n+              variant={isActive ? category.color as any : 'default'}\r\n+              className={`p-4 cursor-pointer transition-all duration-200 hover-lift ${\r\n+                isActive ? 'ring-2 ring-opacity-50' : ''\r\n+              }`}\r\n+              onClick={() => setActiveCategory(category.key)}\r\n+            >\r\n+              <div className=\"text-center\">\r\n+                <div className={`p-3 rounded-xl mx-auto mb-3 ${\r\n+                  isActive \r\n+                    ? `gradient-${category.color}` \r\n+                    : 'bg-gray-100 dark:bg-gray-700'\r\n+                }`}>\r\n+                  <Icon className={`h-6 w-6 mx-auto ${\r\n+                    isActive ? 'text-white' : 'text-gray-600 dark:text-gray-400'\r\n+                  }`} />\r\n+                </div>\r\n+                <h3 className={`font-semibold mb-1 ${\r\n+                  isActive \r\n+                    ? `text-gradient-${category.color}` \r\n+                    : 'text-gray-900 dark:text-gray-100'\r\n+                }`}>\r\n+                  {category.label}\r\n+                </h3>\r\n+                <p className=\"text-xs text-gray-500 dark:text-gray-400 mb-2\">\r\n+                  {category.description}\r\n+                </p>\r\n+                <div className={`text-sm font-medium ${\r\n+                  isActive \r\n+                    ? `text-gradient-${category.color}` \r\n+                    : 'text-gray-600 dark:text-gray-400'\r\n+                }`}>\r\n+                  {settingsCount} settings\r\n+                </div>\r\n+              </div>\r\n+            </Card>\r\n+          );\r\n+        })}\r\n+      </div>\r\n \r\n-      {/* Settings List */}\r\n-      <div className=\"space-y-4\">\r\n+      {/* Enhanced Settings Grid */}\r\n+      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n         {filteredSettings.map((setting) => (\r\n-          <Card key={setting.id} className=\"p-6\">\r\n-            <div className=\"flex items-start justify-between\">\r\n+          <Card key={setting.id} variant=\"glass\" className=\"p-6 hover-lift\">\r\n+            <div className=\"flex items-start justify-between mb-4\">\r\n               <div className=\"flex-1\">\r\n-                <div className=\"flex items-center space-x-3 mb-2\">\r\n+                <div className=\"flex items-center gap-3 mb-2\">\r\n                   <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n                     {setting.label}\r\n                   </h3>\r\n-                  {setting.required && (\r\n-                    <span className=\"text-xs bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-200 px-2 py-1 rounded-full\">\r\n-                      Required\r\n-                    </span>\r\n-                  )}\r\n-                  {setting.sensitive && (\r\n-                    <span className=\"text-xs bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded-full\">\r\n-                      Sensitive\r\n-                    </span>\r\n-                  )}\r\n+                  <div className=\"flex items-center gap-2\">\r\n+                    {setting.required && (\r\n+                      <span className=\"text-xs bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-200 px-2 py-1 rounded-full flex items-center gap-1\">\r\n+                        <AlertTriangle className=\"h-3 w-3\" />\r\n+                        Required\r\n+                      </span>\r\n+                    )}\r\n+                    {setting.sensitive && (\r\n+                      <span className=\"text-xs bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded-full flex items-center gap-1\">\r\n+                        <Lock className=\"h-3 w-3\" />\r\n+                        Sensitive\r\n+                      </span>\r\n+                    )}\r\n+                  </div>\r\n                 </div>\r\n-                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\r\n+                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\r\n                   {setting.description}\r\n                 </p>\r\n-                <div className=\"flex items-center space-x-4\">\r\n-                  <div className=\"text-sm\">\r\n-                    <span className=\"font-medium text-gray-700 dark:text-gray-300\">Current Value:</span>\r\n-                    <div className=\"mt-1\">\r\n-                      {renderSettingValue(setting)}\r\n-                    </div>\r\n-                  </div>\r\n-                  {setting.lastModified && (\r\n-                    <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n-                      <span className=\"font-medium\">Last Modified:</span>\r\n-                      <div>{new Date(setting.lastModified).toLocaleDateString()}</div>\r\n-                      <div className=\"text-xs\">by {setting.modifiedBy}</div>\r\n-                    </div>\r\n-                  )}\r\n+              </div>\r\n+            </div>\r\n+\r\n+            {/* Setting Value Display */}\r\n+            <div className=\"mb-4\">\r\n+              <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\r\n+                <div className=\"flex items-center gap-3\">\r\n+                  {renderSettingValue(setting)}\r\n                 </div>\r\n+                <div className=\"flex items-center gap-2\">\r\n+                  <button\r\n+                    onClick={() => handleOpenModal(setting)}\r\n+                    className=\"btn-blue text-xs flex items-center gap-1\"\r\n+                  >\r\n+                    <Settings className=\"h-3 w-3\" />\r\n+                    Edit\r\n+                  </button>\r\n+                  <button\r\n+                    onClick={() => handleResetToDefault(setting)}\r\n+                    className=\"btn-lime text-xs flex items-center gap-1\"\r\n+                  >\r\n+                    <RefreshCw className=\"h-3 w-3\" />\r\n+                    Reset\r\n+                  </button>\r\n+                </div>\r\n               </div>\r\n-              <div className=\"flex items-center space-x-2 ml-4\">\r\n-                <button\r\n-                  onClick={() => handleOpenModal(setting)}\r\n-                  className=\"p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors\"\r\n-                  title=\"Edit setting\"\r\n-                >\r\n-                  <Settings className=\"h-4 w-4\" />\r\n-                </button>\r\n-                <button\r\n-                  onClick={() => handleResetToDefault(setting)}\r\n-                  className=\"p-2 text-orange-600 hover:text-orange-800 hover:bg-orange-50 dark:hover:bg-orange-900/20 rounded-lg transition-colors\"\r\n-                  title=\"Reset to default\"\r\n-                >\r\n-                  <RefreshCw className=\"h-4 w-4\" />\r\n-                </button>\r\n+            </div>\r\n+\r\n+            {/* Setting Metadata */}\r\n+            {setting.lastModified && (\r\n+              <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400 pt-3 border-t border-gray-200 dark:border-gray-700\">\r\n+                <div className=\"flex items-center gap-1\">\r\n+                  <Clock className=\"h-3 w-3\" />\r\n+                  <span>Modified {new Date(setting.lastModified).toLocaleDateString()}</span>\r\n+                </div>\r\n+                <div className=\"flex items-center gap-1\">\r\n+                  <User className=\"h-3 w-3\" />\r\n+                  <span>by {setting.modifiedBy}</span>\r\n+                </div>\r\n               </div>\r\n-            </div>\r\n+            )}\r\n           </Card>\r\n         ))}\r\n       </div>\r\n \r\n-      {/* Edit Setting Modal */}\r\n+      {/* Enhanced Edit Setting Modal */}\r\n       <Modal\r\n         isOpen={isModalOpen}\r\n         onClose={handleCloseModal}\r\n         title={editingSetting ? `Edit ${editingSetting.label}` : 'Add New Setting'}\r\n@@ -532,32 +565,44 @@\n       >\r\n         <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n           {editingSetting && (\r\n             <>\r\n-              <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n-                  Setting Description\r\n-                </label>\r\n-                <p className=\"text-sm text-gray-600 dark:text-gray-400 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\r\n-                  {editingSetting.description}\r\n-                </p>\r\n+              <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700\">\r\n+                <div className=\"flex items-start gap-3\">\r\n+                  <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\r\n+                  <div>\r\n+                    <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-1\">\r\n+                      Setting Information\r\n+                    </h4>\r\n+                    <p className=\"text-sm text-blue-700 dark:text-blue-300\">\r\n+                      {editingSetting.description}\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n               </div>\r\n \r\n               <div>\r\n                 <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                   Current Value\r\n                 </label>\r\n                 {editingSetting.type === 'boolean' ? (\r\n-                  <div className=\"flex items-center space-x-2\">\r\n+                  <div className=\"flex items-center space-x-3 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\r\n                     <input\r\n                       type=\"checkbox\"\r\n                       checked={formData.value || false}\r\n                       onChange={(e) => setFormData({ ...formData, value: e.target.checked })}\r\n-                      className=\"h-4 w-4 text-bright-green rounded border-gray-300 focus:ring-bright-green\"\r\n+                      className=\"h-5 w-5 text-emerald-600 rounded border-gray-300 focus:ring-emerald-500\"\r\n                     />\r\n-                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n-                      {formData.value ? 'Enabled' : 'Disabled'}\r\n-                    </span>\r\n+                    <div className=\"flex items-center gap-2\">\r\n+                      {formData.value ? (\r\n+                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n+                      ) : (\r\n+                        <XCircle className=\"h-4 w-4 text-red-500\" />\r\n+                      )}\r\n+                      <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n+                        {formData.value ? 'Enabled' : 'Disabled'}\r\n+                      </span>\r\n+                    </div>\r\n                   </div>\r\n                 ) : editingSetting.type === 'select' ? (\r\n                   <FormSelect\r\n                     label=\"Value\"\r\n@@ -586,19 +631,19 @@\n               </div>\r\n             </>\r\n           )}\r\n \r\n-          <div className=\"flex justify-end space-x-3\">\r\n+          <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n             <button\r\n               type=\"button\"\r\n               onClick={handleCloseModal}\r\n-              className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n+              className=\"btn-blue\"\r\n             >\r\n               Cancel\r\n             </button>\r\n             <button\r\n               type=\"submit\"\r\n-              className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n+              className=\"btn-emerald\"\r\n             >\r\n               Save Changes\r\n             </button>\r\n           </div>\r\n"
                },
                {
                    "date": 1759917793756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -561,8 +561,10 @@\n         isOpen={isModalOpen}\r\n         onClose={handleCloseModal}\r\n         title={editingSetting ? `Edit ${editingSetting.label}` : 'Add New Setting'}\r\n         size=\"lg\"\r\n+        type=\"default\"\r\n+        icon={<Settings className=\"h-6 w-6\" />}\r\n       >\r\n         <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n           {editingSetting && (\r\n             <>\r\n"
                }
            ],
            "date": 1759910398891,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react';\r\nimport { Card } from '../../components/Card';\r\nimport { Modal } from '../../components/Modal';\r\nimport { FormInput } from '../../components/FormInput';\r\nimport { FormSelect } from '../../components/FormSelect';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { useNotificationService } from '../../services/notificationService';\r\nimport { \r\n  Settings, \r\n  Save, \r\n  RefreshCw, \r\n  Bell, \r\n  Shield, \r\n  Palette, \r\n  Database,\r\n  Lock,\r\n  CheckCircle,\r\n  XCircle\r\n} from 'lucide-react';\r\n\r\ninterface SystemSetting {\r\n  id: string;\r\n  category: 'general' | 'security' | 'notifications' | 'appearance' | 'system';\r\n  key: string;\r\n  label: string;\r\n  description: string;\r\n  type: 'boolean' | 'string' | 'number' | 'select' | 'password';\r\n  value: any;\r\n  options?: { value: string; label: string }[];\r\n  required: boolean;\r\n  sensitive: boolean;\r\n  lastModified?: string;\r\n  modifiedBy?: string;\r\n}\r\n\r\nexport const SettingsCardPage: React.FC = () => {\r\n  const { user, isDark, setIsDark } = useApp();\r\n  const { showSuccessNotification, showErrorNotification } = useNotificationService();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingSetting, setEditingSetting] = useState<SystemSetting | null>(null);\r\n  const [activeCategory, setActiveCategory] = useState<string>('general');\r\n  \r\n  // Mock system settings data\r\n  const [systemSettings, setSystemSettings] = useState<SystemSetting[]>([\r\n    // General Settings\r\n    {\r\n      id: '1',\r\n      category: 'general',\r\n      key: 'app_name',\r\n      label: 'Application Name',\r\n      description: 'The name displayed in the application header',\r\n      type: 'string',\r\n      value: 'Mwalimu Transporters',\r\n      required: true,\r\n      sensitive: false,\r\n      lastModified: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n      modifiedBy: 'admin',\r\n    },\r\n    {\r\n      id: '2',\r\n      category: 'general',\r\n      key: 'timezone',\r\n      label: 'Default Timezone',\r\n      description: 'The default timezone for the application',\r\n      type: 'select',\r\n      value: 'Africa/Nairobi',\r\n      options: [\r\n        { value: 'Africa/Nairobi', label: 'Nairobi (EAT)' },\r\n        { value: 'Africa/Dar_es_Salaam', label: 'Dar es Salaam (EAT)' },\r\n        { value: 'Africa/Kampala', label: 'Kampala (EAT)' },\r\n        { value: 'UTC', label: 'UTC' },\r\n      ],\r\n      required: true,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '3',\r\n      category: 'general',\r\n      key: 'language',\r\n      label: 'Default Language',\r\n      description: 'The default language for the application interface',\r\n      type: 'select',\r\n      value: 'en',\r\n      options: [\r\n        { value: 'en', label: 'English' },\r\n        { value: 'sw', label: 'Swahili' },\r\n        { value: 'fr', label: 'French' },\r\n      ],\r\n      required: true,\r\n      sensitive: false,\r\n    },\r\n    \r\n    // Security Settings\r\n    {\r\n      id: '4',\r\n      category: 'security',\r\n      key: 'password_min_length',\r\n      label: 'Minimum Password Length',\r\n      description: 'Minimum number of characters required for passwords',\r\n      type: 'number',\r\n      value: 8,\r\n      required: true,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '5',\r\n      category: 'security',\r\n      key: 'session_timeout',\r\n      label: 'Session Timeout (minutes)',\r\n      description: 'How long a user session remains active before requiring re-authentication',\r\n      type: 'number',\r\n      value: 30,\r\n      required: true,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '6',\r\n      category: 'security',\r\n      key: 'two_factor_required',\r\n      label: 'Require Two-Factor Authentication',\r\n      description: 'Force all users to enable two-factor authentication',\r\n      type: 'boolean',\r\n      value: false,\r\n      required: false,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '7',\r\n      category: 'security',\r\n      key: 'api_key',\r\n      label: 'API Secret Key',\r\n      description: 'Secret key used for API authentication',\r\n      type: 'password',\r\n      value: 'â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢',\r\n      required: true,\r\n      sensitive: true,\r\n    },\r\n    \r\n    // Notification Settings\r\n    {\r\n      id: '8',\r\n      category: 'notifications',\r\n      key: 'email_notifications',\r\n      label: 'Email Notifications',\r\n      description: 'Enable email notifications for system events',\r\n      type: 'boolean',\r\n      value: true,\r\n      required: false,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '9',\r\n      category: 'notifications',\r\n      key: 'push_notifications',\r\n      label: 'Push Notifications',\r\n      description: 'Enable push notifications for mobile devices',\r\n      type: 'boolean',\r\n      value: true,\r\n      required: false,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '10',\r\n      category: 'notifications',\r\n      key: 'notification_sound',\r\n      label: 'Notification Sound',\r\n      description: 'Play sound when notifications are received',\r\n      type: 'boolean',\r\n      value: false,\r\n      required: false,\r\n      sensitive: false,\r\n    },\r\n    \r\n    // Appearance Settings\r\n    {\r\n      id: '11',\r\n      category: 'appearance',\r\n      key: 'theme',\r\n      label: 'Default Theme',\r\n      description: 'The default theme for new users',\r\n      type: 'select',\r\n      value: 'light',\r\n      options: [\r\n        { value: 'light', label: 'Light Theme' },\r\n        { value: 'dark', label: 'Dark Theme' },\r\n        { value: 'auto', label: 'Auto (System)' },\r\n      ],\r\n      required: true,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '12',\r\n      category: 'appearance',\r\n      key: 'primary_color',\r\n      label: 'Primary Color',\r\n      description: 'The primary color used throughout the application',\r\n      type: 'select',\r\n      value: 'green',\r\n      options: [\r\n        { value: 'green', label: 'Green' },\r\n        { value: 'blue', label: 'Blue' },\r\n        { value: 'purple', label: 'Purple' },\r\n        { value: 'red', label: 'Red' },\r\n      ],\r\n      required: true,\r\n      sensitive: false,\r\n    },\r\n    \r\n    // System Settings\r\n    {\r\n      id: '13',\r\n      category: 'system',\r\n      key: 'maintenance_mode',\r\n      label: 'Maintenance Mode',\r\n      description: 'Enable maintenance mode to restrict access to the system',\r\n      type: 'boolean',\r\n      value: false,\r\n      required: false,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '14',\r\n      category: 'system',\r\n      key: 'auto_backup',\r\n      label: 'Automatic Backup',\r\n      description: 'Enable automatic daily backups of system data',\r\n      type: 'boolean',\r\n      value: true,\r\n      required: false,\r\n      sensitive: false,\r\n    },\r\n    {\r\n      id: '15',\r\n      category: 'system',\r\n      key: 'log_level',\r\n      label: 'Log Level',\r\n      description: 'The level of detail in system logs',\r\n      type: 'select',\r\n      value: 'info',\r\n      options: [\r\n        { value: 'debug', label: 'Debug' },\r\n        { value: 'info', label: 'Info' },\r\n        { value: 'warn', label: 'Warning' },\r\n        { value: 'error', label: 'Error' },\r\n      ],\r\n      required: true,\r\n      sensitive: false,\r\n    },\r\n  ]);\r\n\r\n  const [formData, setFormData] = useState<Partial<SystemSetting>>({});\r\n\r\n  const categories = [\r\n    { key: 'general', label: 'General', icon: Settings, color: 'blue' },\r\n    { key: 'security', label: 'Security', icon: Shield, color: 'red' },\r\n    { key: 'notifications', label: 'Notifications', icon: Bell, color: 'yellow' },\r\n    { key: 'appearance', label: 'Appearance', icon: Palette, color: 'purple' },\r\n    { key: 'system', label: 'System', icon: Database, color: 'green' },\r\n  ];\r\n\r\n  const filteredSettings = useMemo(() => {\r\n    return systemSettings.filter(setting => setting.category === activeCategory);\r\n  }, [systemSettings, activeCategory]);\r\n\r\n  const handleOpenModal = (setting?: SystemSetting) => {\r\n    if (setting) {\r\n      setEditingSetting(setting);\r\n      setFormData(setting);\r\n    } else {\r\n      setEditingSetting(null);\r\n      setFormData({});\r\n    }\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    setEditingSetting(null);\r\n    setFormData({});\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (editingSetting) {\r\n      setSystemSettings(\r\n        systemSettings.map((setting) =>\r\n          setting.id === editingSetting.id \r\n            ? { \r\n                ...setting, \r\n                value: formData.value,\r\n                lastModified: new Date().toISOString(),\r\n                modifiedBy: user?.name || 'admin'\r\n              } \r\n            : setting\r\n        )\r\n      );\r\n      showSuccessNotification('Setting updated successfully!');\r\n    }\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleResetToDefault = (setting: SystemSetting) => {\r\n    if (window.confirm(`Reset \"${setting.label}\" to default value?`)) {\r\n      // In a real app, you would reset to the actual default value\r\n      showSuccessNotification(`\"${setting.label}\" reset to default value`);\r\n    }\r\n  };\r\n\r\n  const handleBulkSave = () => {\r\n    showSuccessNotification('All settings saved successfully!');\r\n  };\r\n\r\n  const handleExportSettings = () => {\r\n    const settingsData = JSON.stringify(systemSettings, null, 2);\r\n    const blob = new Blob([settingsData], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'system-settings.json';\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n    showSuccessNotification('Settings exported successfully!');\r\n  };\r\n\r\n  const handleImportSettings = () => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    input.onchange = (e) => {\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          try {\r\n            const importedSettings = JSON.parse(e.target?.result as string);\r\n            setSystemSettings(importedSettings);\r\n            showSuccessNotification('Settings imported successfully!');\r\n          } catch (error) {\r\n            showErrorNotification('Invalid settings file format');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    };\r\n    input.click();\r\n  };\r\n\r\n  const renderSettingValue = (setting: SystemSetting) => {\r\n    switch (setting.type) {\r\n      case 'boolean':\r\n        return (\r\n          <div className=\"flex items-center\">\r\n            {setting.value ? (\r\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n            ) : (\r\n              <XCircle className=\"h-4 w-4 text-red-500\" />\r\n            )}\r\n            <span className=\"ml-2 text-sm text-gray-600 dark:text-gray-400\">\r\n              {setting.value ? 'Enabled' : 'Disabled'}\r\n            </span>\r\n          </div>\r\n        );\r\n      case 'password':\r\n        return (\r\n          <div className=\"flex items-center\">\r\n            <Lock className=\"h-4 w-4 text-gray-400\" />\r\n            <span className=\"ml-2 text-sm text-gray-600 dark:text-gray-400\">\r\n              {setting.value}\r\n            </span>\r\n          </div>\r\n        );\r\n      case 'select':\r\n        const option = setting.options?.find(opt => opt.value === setting.value);\r\n        return (\r\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n            {option?.label || setting.value}\r\n          </span>\r\n        );\r\n      default:\r\n        return (\r\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n            {setting.value}\r\n          </span>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6 max-w-full overflow-hidden\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Settings Card</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            System configuration and application settings management\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3\">\r\n          <button \r\n            onClick={handleImportSettings}\r\n            className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n          >\r\n            <RefreshCw className=\"h-4 w-4\" />\r\n            <span>Import</span>\r\n          </button>\r\n          <button \r\n            onClick={handleExportSettings}\r\n            className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n          >\r\n            <Database className=\"h-4 w-4\" />\r\n            <span>Export</span>\r\n          </button>\r\n          <button\r\n            onClick={handleBulkSave}\r\n            className=\"flex items-center space-x-2 px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n          >\r\n            <Save className=\"h-4 w-4\" />\r\n            <span>Save All</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Category Tabs */}\r\n      <Card className=\"p-4\">\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {categories.map((category) => {\r\n            const Icon = category.icon;\r\n            const isActive = activeCategory === category.key;\r\n            return (\r\n              <button\r\n                key={category.key}\r\n                onClick={() => setActiveCategory(category.key)}\r\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\r\n                  isActive\r\n                    ? `bg-${category.color}-100 dark:bg-${category.color}-900/20 text-${category.color}-800 dark:text-${category.color}-200 border border-${category.color}-200 dark:border-${category.color}-700`\r\n                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\r\n                }`}\r\n              >\r\n                <Icon className=\"h-4 w-4\" />\r\n                <span className=\"font-medium\">{category.label}</span>\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Settings List */}\r\n      <div className=\"space-y-4\">\r\n        {filteredSettings.map((setting) => (\r\n          <Card key={setting.id} className=\"p-6\">\r\n            <div className=\"flex items-start justify-between\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"flex items-center space-x-3 mb-2\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n                    {setting.label}\r\n                  </h3>\r\n                  {setting.required && (\r\n                    <span className=\"text-xs bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-200 px-2 py-1 rounded-full\">\r\n                      Required\r\n                    </span>\r\n                  )}\r\n                  {setting.sensitive && (\r\n                    <span className=\"text-xs bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded-full\">\r\n                      Sensitive\r\n                    </span>\r\n                  )}\r\n                </div>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\r\n                  {setting.description}\r\n                </p>\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <div className=\"text-sm\">\r\n                    <span className=\"font-medium text-gray-700 dark:text-gray-300\">Current Value:</span>\r\n                    <div className=\"mt-1\">\r\n                      {renderSettingValue(setting)}\r\n                    </div>\r\n                  </div>\r\n                  {setting.lastModified && (\r\n                    <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                      <span className=\"font-medium\">Last Modified:</span>\r\n                      <div>{new Date(setting.lastModified).toLocaleDateString()}</div>\r\n                      <div className=\"text-xs\">by {setting.modifiedBy}</div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 ml-4\">\r\n                <button\r\n                  onClick={() => handleOpenModal(setting)}\r\n                  className=\"p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors\"\r\n                  title=\"Edit setting\"\r\n                >\r\n                  <Settings className=\"h-4 w-4\" />\r\n                </button>\r\n                <button\r\n                  onClick={() => handleResetToDefault(setting)}\r\n                  className=\"p-2 text-orange-600 hover:text-orange-800 hover:bg-orange-50 dark:hover:bg-orange-900/20 rounded-lg transition-colors\"\r\n                  title=\"Reset to default\"\r\n                >\r\n                  <RefreshCw className=\"h-4 w-4\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Edit Setting Modal */}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        title={editingSetting ? `Edit ${editingSetting.label}` : 'Add New Setting'}\r\n        size=\"lg\"\r\n      >\r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          {editingSetting && (\r\n            <>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Setting Description\r\n                </label>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\r\n                  {editingSetting.description}\r\n                </p>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Current Value\r\n                </label>\r\n                {editingSetting.type === 'boolean' ? (\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={formData.value || false}\r\n                      onChange={(e) => setFormData({ ...formData, value: e.target.checked })}\r\n                      className=\"h-4 w-4 text-bright-green rounded border-gray-300 focus:ring-bright-green\"\r\n                    />\r\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      {formData.value ? 'Enabled' : 'Disabled'}\r\n                    </span>\r\n                  </div>\r\n                ) : editingSetting.type === 'select' ? (\r\n                  <FormSelect\r\n                    value={formData.value || ''}\r\n                    onChange={(value) => setFormData({ ...formData, value })}\r\n                    options={editingSetting.options || []}\r\n                  />\r\n                ) : editingSetting.type === 'password' ? (\r\n                  <div className=\"relative\">\r\n                    <FormInput\r\n                      type=\"password\"\r\n                      value={formData.value || ''}\r\n                      onChange={(value) => setFormData({ ...formData, value })}\r\n                      placeholder=\"Enter new password\"\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <FormInput\r\n                    type={editingSetting.type === 'number' ? 'number' : 'text'}\r\n                    value={formData.value || ''}\r\n                    onChange={(value) => setFormData({ ...formData, value })}\r\n                  />\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCloseModal}\r\n              className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n            >\r\n              Save Changes\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}