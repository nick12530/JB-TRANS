{
    "sourceFile": "src/pages/PickupPoints/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759567443823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759910944361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,122 +1,1 @@\n-import React, { useState } from 'react';\r\n-import { Package, Truck, MapPin, DollarSign, Box, ShoppingCart } from 'lucide-react';\r\n-import { FormInput, FormSelect } from '../../components/FormInput';\r\n-import { Modal } from '../../components/Modal';\r\n-import { Card } from '../../components/Card';\r\n-import { useApp } from '../../context/AppContext';\r\n-import { PickupPointRecord } from '../../types';\r\n-import { formatDate, formatCurrency, generateTrackingId } from '../../utils/helpers';\r\n-import { clsx } from 'clsx';\r\n-\r\n-const pickupPoints = [\r\n-  { value: 'A', label: 'Pickup Point A', codeRange: '100-300', color: 'bg-blue-500' },\r\n-  { value: 'B', label: 'Pickup Point B', codeRange: '400-600', color: 'bg-green-500' },\r\n-  { value: 'C', label: 'Pickup Point C', codeRange: '700-900', color: 'bg-yellow-500' },\r\n-  { value: 'D', label: 'Pickup Point D', codeRange: '1000-1200', color: 'bg-purple-500' },\r\n-] as const;\r\n-\r\n-const paymentMethods = [\r\n-  { value: 'cash', label: 'Cash' },\r\n-  { value: 'mpesa', label: 'M-Pesa' },\r\n-  { value: 'bank', label: 'Bank Transfer' },\r\n-];\r\n-\r\n-const defaultRecord: Omit<PickupPointRecord, 'id' | 'totalCost' | 'tripCode'> = {\r\n-  date: new Date().toISOString().split('T')[0],\r\n-  pickupPoint: 'A',\r\n-  driverName: '',\r\n-  driverPhone: '',\r\n-  driverId: '',\r\n-  vehicleReg: '',\r\n-  vehicleModel: '',\r\n-  packingDetails: {\r\n-    basins: 0,\r\n-    sacks: 0,\r\n-    boxes: 0,\r\n-  },\r\n-  unitPrices: {\r\n-    basinPrice: 0,\r\n-    sackPrice: 0,\r\n-    boxPrice: 0,\r\n-  },\r\n-  paymentMethod: 'cash',\r\n-  status: 'pending',\r\n-};\r\n-\r\n-export const PickupPointsPage: React.FC = () => {\r\n-  const { pickupPointRecords, setPickupPointRecords, user } = useApp();\r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const [editingRecord, setEditingRecord] = useState<PickupPointRecord | null>(null);\r\n-  const [formData, setFormData] = useState<Omit<PickupPointRecord, 'id' | 'totalCost' | 'tripCode'>>(defaultRecord);\r\n-  const [errors, setErrors] = useState<Record<string, string>>({});\r\n-\r\n-  const resetForm = () => {\r\n-    setFormData(defaultRecord);\r\n-    setErrors({});\r\n-    setEditingRecord(null);\r\n-  };\r\n-\r\n-  const handleOpenModal = (record?: PickupPointRecord) => {\r\n-    if (record) {\r\n-      setEditingRecord(record);\r\n-      const { id, totalCost, tripCode, ...recordData } = record;\r\n-      setFormData(recordData);\r\n-    } else {\r\n-      resetForm();\r\n-    }\r\n-    setIsModalOpen(true);\r\n-  };\r\n-\r\n-  const handleCloseModal = () => {\r\n-    setIsModalOpen(false);\r\n-    resetForm();\r\n-  };\r\n-\r\n-  const calculateTotalCost = () => {\r\n-    const { packingDetails, unitPrices } = formData;\r\n-    return (\r\n-      packingDetails.basins * unitPrices.basinPrice +\r\n-      packingDetails.sacks * unitPrices.sackPrice +\r\n-      packingDetails.boxes * unitPrices.boxPrice\r\n-    );\r\n-  };\r\n-\r\n-  const validateForm = (): boolean => {\r\n-    const newErrors: Record<string, string> = {};\r\n-\r\n-    if (!formData.date) newErrors.date = 'Date is required';\r\n-    if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\r\n-    if (!formData.driverPhone?.trim()) newErrors.driverPhone = 'Driver phone is required';\r\n-    if (!formData.driverId?.trim()) newErrors.driverId = 'Driver ID is required';\r\n-    if (!formData.vehicleReg?.trim()) newErrors.vehicleReg = 'Vehicle registration is required';\r\n-\r\n-    const packingTotal = Object.values(formData.packingDetails).reduce((sum, qty) => sum + qty, 0);\r\n-    if (packingTotal === 0) {\r\n-      newErrors.packingDetails = 'At least one packing type must have quantity > 0';\r\n-    }\r\n-\r\n-    const totalCost = calculateTotalCost();\r\n-    if (totalCost <= 0) {\r\n-      newErrors.totalCost = 'Total cost must be greater than 0';\r\n-    }\r\n-\r\n-    setErrors(newErrors);\r\n-    return Object.keys(newErrors).length === 0;\r\n-  };\r\n-\r\n-  const handleSubmit = (e: React.FormEvent) => {\r\n-    e.preventDefault();\r\n-    \r\n-    if (!validateForm()) return;\r\n-\r\n-    const totalCost = calculateTotalCost();\r\n-    const tripCode = generateTrackingId();\r\n-    \r\n-    const newRecord: PickupPointRecord = {\r\n-      ...formData,\r\n-      id: editingRecord?.id || `PP-${Date.now()}`,\r\n-      totalCost,\r\n-      tripCode,\r\n-    };\r\n-\r\n-... 30 lines have been truncated to keep the response under 4k chars.\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1759567443823,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { Package, Truck, MapPin, DollarSign, Box, ShoppingCart } from 'lucide-react';\r\nimport { FormInput, FormSelect } from '../../components/FormInput';\r\nimport { Modal } from '../../components/Modal';\r\nimport { Card } from '../../components/Card';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { PickupPointRecord } from '../../types';\r\nimport { formatDate, formatCurrency, generateTrackingId } from '../../utils/helpers';\r\nimport { clsx } from 'clsx';\r\n\r\nconst pickupPoints = [\r\n  { value: 'A', label: 'Pickup Point A', codeRange: '100-300', color: 'bg-blue-500' },\r\n  { value: 'B', label: 'Pickup Point B', codeRange: '400-600', color: 'bg-green-500' },\r\n  { value: 'C', label: 'Pickup Point C', codeRange: '700-900', color: 'bg-yellow-500' },\r\n  { value: 'D', label: 'Pickup Point D', codeRange: '1000-1200', color: 'bg-purple-500' },\r\n] as const;\r\n\r\nconst paymentMethods = [\r\n  { value: 'cash', label: 'Cash' },\r\n  { value: 'mpesa', label: 'M-Pesa' },\r\n  { value: 'bank', label: 'Bank Transfer' },\r\n];\r\n\r\nconst defaultRecord: Omit<PickupPointRecord, 'id' | 'totalCost' | 'tripCode'> = {\r\n  date: new Date().toISOString().split('T')[0],\r\n  pickupPoint: 'A',\r\n  driverName: '',\r\n  driverPhone: '',\r\n  driverId: '',\r\n  vehicleReg: '',\r\n  vehicleModel: '',\r\n  packingDetails: {\r\n    basins: 0,\r\n    sacks: 0,\r\n    boxes: 0,\r\n  },\r\n  unitPrices: {\r\n    basinPrice: 0,\r\n    sackPrice: 0,\r\n    boxPrice: 0,\r\n  },\r\n  paymentMethod: 'cash',\r\n  status: 'pending',\r\n};\r\n\r\nexport const PickupPointsPage: React.FC = () => {\r\n  const { pickupPointRecords, setPickupPointRecords, user } = useApp();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingRecord, setEditingRecord] = useState<PickupPointRecord | null>(null);\r\n  const [formData, setFormData] = useState<Omit<PickupPointRecord, 'id' | 'totalCost' | 'tripCode'>>(defaultRecord);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const resetForm = () => {\r\n    setFormData(defaultRecord);\r\n    setErrors({});\r\n    setEditingRecord(null);\r\n  };\r\n\r\n  const handleOpenModal = (record?: PickupPointRecord) => {\r\n    if (record) {\r\n      setEditingRecord(record);\r\n      const { id, totalCost, tripCode, ...recordData } = record;\r\n      setFormData(recordData);\r\n    } else {\r\n      resetForm();\r\n    }\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    resetForm();\r\n  };\r\n\r\n  const calculateTotalCost = () => {\r\n    const { packingDetails, unitPrices } = formData;\r\n    return (\r\n      packingDetails.basins * unitPrices.basinPrice +\r\n      packingDetails.sacks * unitPrices.sackPrice +\r\n      packingDetails.boxes * unitPrices.boxPrice\r\n    );\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.date) newErrors.date = 'Date is required';\r\n    if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\r\n    if (!formData.driverPhone?.trim()) newErrors.driverPhone = 'Driver phone is required';\r\n    if (!formData.driverId?.trim()) newErrors.driverId = 'Driver ID is required';\r\n    if (!formData.vehicleReg?.trim()) newErrors.vehicleReg = 'Vehicle registration is required';\r\n\r\n    const packingTotal = Object.values(formData.packingDetails).reduce((sum, qty) => sum + qty, 0);\r\n    if (packingTotal === 0) {\r\n      newErrors.packingDetails = 'At least one packing type must have quantity > 0';\r\n    }\r\n\r\n    const totalCost = calculateTotalCost();\r\n    if (totalCost <= 0) {\r\n      newErrors.totalCost = 'Total cost must be greater than 0';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) return;\r\n\r\n    const totalCost = calculateTotalCost();\r\n    const tripCode = generateTrackingId();\r\n    \r\n    const newRecord: PickupPointRecord = {\r\n      ...formData,\r\n      id: editingRecord?.id || `PP-${Date.now()}`,\r\n      totalCost,\r\n      tripCode,\r\n    };\r\n\r\n... 30 lines have been truncated to keep the response under 4k chars.\r\n"
        }
    ]
}