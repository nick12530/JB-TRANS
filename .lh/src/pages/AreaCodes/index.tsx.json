{
    "sourceFile": "src/pages/AreaCodes/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1761636701164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761638742502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,146 @@\n-import React from 'react';\r\n+import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n+import { FormInput } from '../../components/FormInput';\r\n+import { FormSelect } from '../../components/FormSelect';\r\n+import { Button } from '../../components/Button';\r\n+import { useApp } from '../../context/AppContext';\r\n+import { AreaCode, User } from '../../types';\r\n \r\n export const AreaCodesPage: React.FC = () => {\r\n+  const { areaCodes, setAreaCodes, users } = useApp();\r\n+  const [q, setQ] = useState('');\r\n+\r\n+  const filtered = useMemo(() => {\r\n+    const query = q.trim().toLowerCase();\r\n+    return areaCodes.filter(c => !query || c.code.toLowerCase().includes(query) || c.name.toLowerCase().includes(query) || c.region.toLowerCase().includes(query));\r\n+  }, [areaCodes, q]);\r\n+\r\n+  const [form, setForm] = useState<Partial<AreaCode>>({ code: '', name: '', region: '', minRange: 0, maxRange: 0, status: 'active' });\r\n+  const [editingId, setEditingId] = useState<string | null>(null);\r\n+\r\n+  const resetForm = () => {\r\n+    setForm({ code: '', name: '', region: '', minRange: 0, maxRange: 0, status: 'active' });\r\n+    setEditingId(null);\r\n+  };\r\n+\r\n+  const saveCode = () => {\r\n+    if (!form.code || !form.name || !form.region || !form.minRange || !form.maxRange) return;\r\n+    if ((form.minRange as number) > (form.maxRange as number)) return;\r\n+    if (editingId) {\r\n+      setAreaCodes(areaCodes.map(c => c.id === editingId ? { ...c, ...form, id: editingId } as AreaCode : c));\r\n+    } else {\r\n+      const newItem: AreaCode = {\r\n+        id: Date.now().toString(),\r\n+        code: String(form.code),\r\n+        name: String(form.name),\r\n+        region: String(form.region),\r\n+        minRange: Number(form.minRange),\r\n+        maxRange: Number(form.maxRange),\r\n+        status: (form.status as any) || 'active',\r\n+        assignedTo: form.assignedTo ? String(form.assignedTo) : undefined,\r\n+        notes: form.notes ? String(form.notes) : undefined,\r\n+      };\r\n+      setAreaCodes([newItem, ...areaCodes]);\r\n+    }\r\n+    resetForm();\r\n+  };\r\n+\r\n+  const editCode = (c: AreaCode) => {\r\n+    setEditingId(c.id);\r\n+    setForm({ ...c });\r\n+  };\r\n+\r\n+  const toggleStatus = (id: string) => {\r\n+    setAreaCodes(areaCodes.map(c => c.id === id ? { ...c, status: c.status === 'active' ? 'inactive' : 'active' } : c));\r\n+  };\r\n+\r\n+  const assignUser = (id: string, userId: string) => {\r\n+    setAreaCodes(areaCodes.map(c => c.id === id ? { ...c, assignedTo: userId || undefined } : c));\r\n+  };\r\n+\r\n+  const exportCSV = () => {\r\n+    const rows = [['id','code','name','region','minRange','maxRange','status','assignedTo']];\r\n+    for (const c of filtered) rows.push([c.id,c.code,c.name,c.region,String(c.minRange),String(c.maxRange),c.status,c.assignedTo || '']);\r\n+    const csv = rows.map(r => r.map(x => `\"${String(x).replace(/\"/g,'\"\"')}\"`).join(',')).join('\\n');\r\n+    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n+    const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'area-codes.csv'; a.click(); URL.revokeObjectURL(url);\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Area Code Management</h1>\r\n+\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <p className=\"text-gray-700 dark:text-gray-300\">Assign and modify region-specific code ranges will appear here.</p>\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n+          <FormInput label=\"Search\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Code, name or region\" />\r\n+          <div className=\"flex items-end\">\r\n+            <Button variant=\"outline\" className=\"w-full\" onClick={exportCSV}>Export CSV</Button>\r\n+          </div>\r\n+        </div>\r\n       </Card>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <h2 className=\"text-lg font-semibold mb-3\">{editingId ? 'Edit Area Code' : 'Add Area Code'}</h2>\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n+          <FormInput label=\"Code\" value={form.code || ''} onChange={(v)=>setForm({...form, code: String(v)})} />\r\n+          <FormInput label=\"Name\" value={form.name || ''} onChange={(v)=>setForm({...form, name: String(v)})} />\r\n+          <FormInput label=\"Region\" value={form.region || ''} onChange={(v)=>setForm({...form, region: String(v)})} />\r\n+          <FormInput label=\"Min Range\" type=\"number\" value={form.minRange || 0} onChange={(v)=>setForm({...form, minRange: typeof v==='number'?v:Number(v)})} />\r\n+          <FormInput label=\"Max Range\" type=\"number\" value={form.maxRange || 0} onChange={(v)=>setForm({...form, maxRange: typeof v==='number'?v:Number(v)})} />\r\n+          <FormSelect label=\"Status\" value={form.status || 'active'} onChange={(v)=>setForm({...form, status: v as any})} options={[{value:'active',label:'Active'},{value:'inactive',label:'Inactive'}]} />\r\n+          <FormSelect label=\"Assign To\" value={form.assignedTo || ''} onChange={(v)=>setForm({...form, assignedTo: String(v)})} options={[{ value: '', label: 'Unassigned' }, ...users.map((u: User) => ({ value: u.id, label: `${u.name} (${u.email})` }))]} />\r\n+          <FormInput label=\"Notes\" value={form.notes || ''} onChange={(v)=>setForm({...form, notes: String(v)})} />\r\n+        </div>\r\n+        <div className=\"mt-4 flex gap-2\">\r\n+          <Button onClick={saveCode}>{editingId ? 'Update' : 'Save'}</Button>\r\n+          {editingId && <Button variant=\"outline\" onClick={resetForm}>Cancel</Button>}\r\n+        </div>\r\n+      </Card>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <div className=\"overflow-x-auto\">\r\n+          <table className=\"min-w-full\">\r\n+            <thead>\r\n+              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n+                <th className=\"py-2 pr-4\">Code</th>\r\n+                <th className=\"py-2 pr-4\">Name</th>\r\n+                <th className=\"py-2 pr-4\">Region</th>\r\n+                <th className=\"py-2 pr-4\">Range</th>\r\n+                <th className=\"py-2 pr-4\">Assigned To</th>\r\n+                <th className=\"py-2 pr-4\">Status</th>\r\n+                <th className=\"py-2 pr-4\">Actions</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {filtered.map(c => (\r\n+                <tr key={c.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n+                  <td className=\"py-2 pr-4\">{c.code}</td>\r\n+                  <td className=\"py-2 pr-4\">{c.name}</td>\r\n+                  <td className=\"py-2 pr-4\">{c.region}</td>\r\n+                  <td className=\"py-2 pr-4\">{c.minRange} - {c.maxRange}</td>\r\n+                  <td className=\"py-2 pr-4\">{users.find(u=>u.id===c.assignedTo)?.name || 'â€”'}</td>\r\n+                  <td className=\"py-2 pr-4 capitalize\">{c.status}</td>\r\n+                  <td className=\"py-2 pr-4 space-x-2\">\r\n+                    <Button size=\"sm\" variant=\"outline\" onClick={()=>editCode(c)}>Edit</Button>\r\n+                    <Button size=\"sm\" onClick={()=>toggleStatus(c.id)}>{c.status==='active'?'Deactivate':'Activate'}</Button>\r\n+                    <FormSelect\r\n+                      label=\"Assign\"\r\n+                      value={c.assignedTo || ''}\r\n+                      onChange={(v)=>assignUser(c.id, String(v))}\r\n+                      options={[{ value: '', label: 'Unassigned' }, ...users.map(u=>({ value: u.id, label: u.name }))]}\r\n+                    />\r\n+                  </td>\r\n+                </tr>\r\n+              ))}\r\n+              {filtered.length === 0 && (\r\n+                <tr>\r\n+                  <td colSpan={7} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No area codes</td>\r\n+                </tr>\r\n+              )}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+      </Card>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1761650999525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,92 @@\n import { FormSelect } from '../../components/FormSelect';\r\n import { Button } from '../../components/Button';\r\n import { useApp } from '../../context/AppContext';\r\n import { AreaCode, User } from '../../types';\r\n+import { \r\n+  Search, \r\n+  Plus, \r\n+  Edit, \r\n+  Trash2, \r\n+  Download, \r\n+  MapPin, \r\n+  Users, \r\n+  AlertTriangle,\r\n+  CheckCircle,\r\n+  XCircle,\r\n+  Filter,\r\n+  SortAsc,\r\n+  SortDesc\r\n+} from 'lucide-react';\r\n \r\n export const AreaCodesPage: React.FC = () => {\r\n-  const { areaCodes, setAreaCodes, users } = useApp();\r\n+  const { areaCodes, setAreaCodes, users, packages } = useApp();\r\n   const [q, setQ] = useState('');\r\n+  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');\r\n+  const [sortBy, setSortBy] = useState<'code' | 'name' | 'region' | 'range'>('code');\r\n+  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\r\n \r\n   const filtered = useMemo(() => {\r\n     const query = q.trim().toLowerCase();\r\n-    return areaCodes.filter(c => !query || c.code.toLowerCase().includes(query) || c.name.toLowerCase().includes(query) || c.region.toLowerCase().includes(query));\r\n-  }, [areaCodes, q]);\r\n+    let result = areaCodes.filter(c => \r\n+      (!query || c.code.toLowerCase().includes(query) || c.name.toLowerCase().includes(query) || c.region.toLowerCase().includes(query)) &&\r\n+      (statusFilter === 'all' || c.status === statusFilter)\r\n+    );\r\n+    \r\n+    result = result.sort((a, b) => {\r\n+      let comparison = 0;\r\n+      switch (sortBy) {\r\n+        case 'code':\r\n+          comparison = a.code.localeCompare(b.code);\r\n+          break;\r\n+        case 'name':\r\n+          comparison = a.name.localeCompare(b.name);\r\n+          break;\r\n+        case 'region':\r\n+          comparison = a.region.localeCompare(b.region);\r\n+          break;\r\n+        case 'range':\r\n+          comparison = a.minRange - b.minRange;\r\n+          break;\r\n+      }\r\n+      return sortOrder === 'asc' ? comparison : -comparison;\r\n+    });\r\n+    \r\n+    return result;\r\n+  }, [areaCodes, q, statusFilter, sortBy, sortOrder]);\r\n \r\n+  // Calculate statistics\r\n+  const stats = useMemo(() => {\r\n+    const activeCodes = areaCodes.filter(c => c.status === 'active').length;\r\n+    const totalCodes = areaCodes.length;\r\n+    const assignedCodes = areaCodes.filter(c => c.assignedTo).length;\r\n+    const unassignedCodes = areaCodes.filter(c => !c.assignedTo).length;\r\n+    \r\n+    // Calculate used codes from packages\r\n+    const usedCounts = new Map();\r\n+    packages.forEach(pkg => {\r\n+      const code = pkg.trackingCode?.split('-')[1];\r\n+      if (code) {\r\n+        const num = parseInt(code);\r\n+        const areaCode = areaCodes.find(ac => num >= ac.minRange && num <= ac.maxRange);\r\n+        if (areaCode) {\r\n+          usedCounts.set(areaCode.id, (usedCounts.get(areaCode.id) || 0) + 1);\r\n+        }\r\n+      }\r\n+    });\r\n+    \r\n+    return { activeCodes, totalCodes, assignedCodes, unassignedCodes, usedCounts };\r\n+  }, [areaCodes, packages]);\r\n+\r\n+  const toggleSort = (field: typeof sortBy) => {\r\n+    if (sortBy === field) {\r\n+      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n+    } else {\r\n+      setSortBy(field);\r\n+      setSortOrder('asc');\r\n+    }\r\n+  };\r\n+\r\n   const [form, setForm] = useState<Partial<AreaCode>>({ code: '', name: '', region: '', minRange: 0, maxRange: 0, status: 'active' });\r\n   const [editingId, setEditingId] = useState<string | null>(null);\r\n \r\n   const resetForm = () => {\r\n@@ -57,29 +131,142 @@\n   const assignUser = (id: string, userId: string) => {\r\n     setAreaCodes(areaCodes.map(c => c.id === id ? { ...c, assignedTo: userId || undefined } : c));\r\n   };\r\n \r\n+  const deleteCode = (id: string) => {\r\n+    if (window.confirm('Are you sure you want to delete this area code?')) {\r\n+      setAreaCodes(areaCodes.filter(c => c.id !== id));\r\n+      if (editingId === id) resetForm();\r\n+    }\r\n+  };\r\n+\r\n   const exportCSV = () => {\r\n-    const rows = [['id','code','name','region','minRange','maxRange','status','assignedTo']];\r\n-    for (const c of filtered) rows.push([c.id,c.code,c.name,c.region,String(c.minRange),String(c.maxRange),c.status,c.assignedTo || '']);\r\n+    const rows = [['Code', 'Name', 'Region', 'Min Range', 'Max Range', 'Status', 'Assigned To', 'Package Count']];\r\n+    for (const c of filtered) {\r\n+      const userName = users.find(u => u.id === c.assignedTo)?.name || 'Unassigned';\r\n+      const pkgCount = stats.usedCounts.get(c.id) || 0;\r\n+      rows.push([c.code, c.name, c.region, String(c.minRange), String(c.maxRange), c.status, userName, String(pkgCount)]);\r\n+    }\r\n     const csv = rows.map(r => r.map(x => `\"${String(x).replace(/\"/g,'\"\"')}\"`).join(',')).join('\\n');\r\n     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n-    const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'area-codes.csv'; a.click(); URL.revokeObjectURL(url);\r\n+    const url = URL.createObjectURL(blob); \r\n+    const a = document.createElement('a'); \r\n+    a.href = url; \r\n+    a.download = 'area-codes.csv'; \r\n+    a.click(); \r\n+    URL.revokeObjectURL(url);\r\n   };\r\n \r\n   return (\r\n     <div className=\"space-y-6\">\r\n-      <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Area Code Management</h1>\r\n+      {/* Header */}\r\n+      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n+        <div>\r\n+          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Area Code Management</h1>\r\n+          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\r\n+            Manage area codes and assign them to staff members\r\n+          </p>\r\n+        </div>\r\n+        <Button onClick={() => resetForm()} className=\"w-full sm:w-auto flex items-center gap-2\">\r\n+          <Plus className=\"h-4 w-4\" />\r\n+          <span>Add Area Code</span>\r\n+        </Button>\r\n+      </div>\r\n \r\n+      {/* Statistics */}\r\n+      <div className=\"grid grid-cols-1 sm:grid-cols-4 gap-4\">\r\n+        <Card variant=\"enhanced\" padding=\"md\" className=\"bg-navy-50 dark:bg-navy-900/20 border border-navy-200 dark:border-navy-800\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div>\r\n+              <p className=\"text-sm font-semibold text-gray-600 dark:text-gray-400\">Total Codes</p>\r\n+              <p className=\"text-3xl font-bold text-navy-700 dark:text-navy-300\">{stats.totalCodes}</p>\r\n+            </div>\r\n+            <div className=\"p-3 bg-navy-500 rounded-lg\">\r\n+              <MapPin className=\"h-6 w-6 text-white\" />\r\n+            </div>\r\n+          </div>\r\n+        </Card>\r\n+\r\n+        <Card variant=\"enhanced\" padding=\"md\" className=\"bg-eco-50 dark:bg-eco-900/20 border border-eco-200 dark:border-eco-800\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div>\r\n+              <p className=\"text-sm font-semibold text-gray-600 dark:text-gray-400\">Active Codes</p>\r\n+              <p className=\"text-3xl font-bold text-eco-700 dark:text-eco-300\">{stats.activeCodes}</p>\r\n+            </div>\r\n+            <div className=\"p-3 bg-eco-500 rounded-lg\">\r\n+              <CheckCircle className=\"h-6 w-6 text-white\" />\r\n+            </div>\r\n+          </div>\r\n+        </Card>\r\n+\r\n+        <Card variant=\"enhanced\" padding=\"md\" className=\"bg-mint-50 dark:bg-mint-900/20 border border-mint-200 dark:border-mint-800\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div>\r\n+              <p className=\"text-sm font-semibold text-gray-600 dark:text-gray-400\">Assigned</p>\r\n+              <p className=\"text-3xl font-bold text-mint-700 dark:text-mint-300\">{stats.assignedCodes}</p>\r\n+            </div>\r\n+            <div className=\"p-3 bg-mint-500 rounded-lg\">\r\n+              <Users className=\"h-6 w-6 text-white\" />\r\n+            </div>\r\n+          </div>\r\n+        </Card>\r\n+\r\n+        <Card variant=\"enhanced\" padding=\"md\" className=\"bg-signal-50 dark:bg-signal-900/20 border border-signal-200 dark:border-signal-800\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div>\r\n+              <p className=\"text-sm font-semibold text-gray-600 dark:text-gray-400\">Unassigned</p>\r\n+              <p className=\"text-3xl font-bold text-signal-700 dark:text-signal-300\">{stats.unassignedCodes}</p>\r\n+            </div>\r\n+            <div className=\"p-3 bg-signal-500 rounded-lg\">\r\n+              <AlertTriangle className=\"h-6 w-6 text-white\" />\r\n+            </div>\r\n+          </div>\r\n+        </Card>\r\n+      </div>\r\n+\r\n+      {/* Filters */}\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n-          <FormInput label=\"Search\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Code, name or region\" />\r\n-          <div className=\"flex items-end\">\r\n-            <Button variant=\"outline\" className=\"w-full\" onClick={exportCSV}>Export CSV</Button>\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n+          <FormInput \r\n+            label=\"Search\" \r\n+            value={q} \r\n+            onChange={(v)=>setQ(String(v))} \r\n+            placeholder=\"Code, name or region\"\r\n+            leftIcon={<Search className=\"h-4 w-4\" />}\r\n+          />\r\n+          <FormSelect \r\n+            label=\"Status Filter\" \r\n+            value={statusFilter} \r\n+            onChange={(v)=>setStatusFilter(v as any)} \r\n+            options={[\r\n+              {value:'all', label:'All Statuses'},\r\n+              {value:'active', label:'Active'},\r\n+              {value:'inactive', label:'Inactive'}\r\n+            ]}\r\n+            leftIcon={<Filter className=\"h-4 w-4\" />}\r\n+          />\r\n+          <div className=\"flex items-end gap-2\">\r\n+            <Button variant=\"outline\" className=\"flex-1 flex items-center justify-center gap-2\" onClick={exportCSV}>\r\n+              <Download className=\"h-4 w-4\" />\r\n+              <span className=\"hidden sm:inline\">Export CSV</span>\r\n+            </Button>\r\n           </div>\r\n         </div>\r\n       </Card>\r\n \r\n+      {/* Add/Edit Form */}\r\n+      <Card padding=\"lg\" variant=\"enhanced\" className=\"bg-gradient-to-r from-navy-50 to-eco-50 dark:from-navy-900/20 dark:to-eco-900/20\">\r\n+        <div className=\"flex items-center justify-between mb-4\">\r\n+          <h2 className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">\r\n+            {editingId ? 'Edit Area Code' : 'Add New Area Code'}\r\n+          </h2>\r\n+          {editingId && (\r\n+            <Button variant=\"outline\" size=\"sm\" onClick={resetForm}>\r\n+              Cancel\r\n+            </Button>\r\n+          )}\r\n+        </div>\r\n+\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n         <h2 className=\"text-lg font-semibold mb-3\">{editingId ? 'Edit Area Code' : 'Add Area Code'}</h2>\r\n         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n           <FormInput label=\"Code\" value={form.code || ''} onChange={(v)=>setForm({...form, code: String(v)})} />\r\n"
                },
                {
                    "date": 1761651035685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,20 +268,80 @@\n \r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n         <h2 className=\"text-lg font-semibold mb-3\">{editingId ? 'Edit Area Code' : 'Add Area Code'}</h2>\r\n         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n-          <FormInput label=\"Code\" value={form.code || ''} onChange={(v)=>setForm({...form, code: String(v)})} />\r\n-          <FormInput label=\"Name\" value={form.name || ''} onChange={(v)=>setForm({...form, name: String(v)})} />\r\n-          <FormInput label=\"Region\" value={form.region || ''} onChange={(v)=>setForm({...form, region: String(v)})} />\r\n-          <FormInput label=\"Min Range\" type=\"number\" value={form.minRange || 0} onChange={(v)=>setForm({...form, minRange: typeof v==='number'?v:Number(v)})} />\r\n-          <FormInput label=\"Max Range\" type=\"number\" value={form.maxRange || 0} onChange={(v)=>setForm({...form, maxRange: typeof v==='number'?v:Number(v)})} />\r\n-          <FormSelect label=\"Status\" value={form.status || 'active'} onChange={(v)=>setForm({...form, status: v as any})} options={[{value:'active',label:'Active'},{value:'inactive',label:'Inactive'}]} />\r\n-          <FormSelect label=\"Assign To\" value={form.assignedTo || ''} onChange={(v)=>setForm({...form, assignedTo: String(v)})} options={[{ value: '', label: 'Unassigned' }, ...users.map((u: User) => ({ value: u.id, label: `${u.name} (${u.email})` }))]} />\r\n-          <FormInput label=\"Notes\" value={form.notes || ''} onChange={(v)=>setForm({...form, notes: String(v)})} />\r\n+          <FormInput \r\n+            label=\"Area Code\" \r\n+            value={form.code || ''} \r\n+            onChange={(v)=>setForm({...form, code: String(v)})}\r\n+            placeholder=\"e.g., EMBU\"\r\n+            required\r\n+          />\r\n+          <FormInput \r\n+            label=\"Station Name\" \r\n+            value={form.name || ''} \r\n+            onChange={(v)=>setForm({...form, name: String(v)})}\r\n+            placeholder=\"e.g., Embu Station\"\r\n+            required\r\n+          />\r\n+          <FormInput \r\n+            label=\"Region\" \r\n+            value={form.region || ''} \r\n+            onChange={(v)=>setForm({...form, region: String(v)})}\r\n+            placeholder=\"e.g., Eastern Region\"\r\n+            required\r\n+          />\r\n+          <FormInput \r\n+            label=\"Min Range\" \r\n+            type=\"number\" \r\n+            value={form.minRange || 0} \r\n+            onChange={(v)=>setForm({...form, minRange: typeof v==='number'?v:Number(v)})}\r\n+            placeholder=\"e.g., 1\"\r\n+            required\r\n+          />\r\n+          <FormInput \r\n+            label=\"Max Range\" \r\n+            type=\"number\" \r\n+            value={form.maxRange || 0} \r\n+            onChange={(v)=>setForm({...form, maxRange: typeof v==='number'?v:Number(v)})}\r\n+            placeholder=\"e.g., 300\"\r\n+            required\r\n+          />\r\n+          <FormSelect \r\n+            label=\"Status\" \r\n+            value={form.status || 'active'} \r\n+            onChange={(v)=>setForm({...form, status: v as any})} \r\n+            options={[{value:'active',label:'Active'},{value:'inactive',label:'Inactive'}]} \r\n+          />\r\n+          <FormSelect \r\n+            label=\"Assign To User\" \r\n+            value={form.assignedTo || ''} \r\n+            onChange={(v)=>setForm({...form, assignedTo: String(v)})} \r\n+            options={[{ value: '', label: 'Unassigned' }, ...users.map((u: User) => ({ value: u.id, label: `${u.name} ${u.email ? `(${u.email})` : ''}` }))]} \r\n+            searchable\r\n+          />\r\n+          <FormInput \r\n+            label=\"Notes\" \r\n+            value={form.notes || ''} \r\n+            onChange={(v)=>setForm({...form, notes: String(v)})}\r\n+            placeholder=\"Optional notes...\"\r\n+          />\r\n         </div>\r\n+        {form.minRange && form.maxRange && form.minRange > form.maxRange && (\r\n+          <div className=\"mt-3 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg flex items-center gap-2\">\r\n+            <AlertTriangle className=\"h-4 w-4 text-red-600\" />\r\n+            <span className=\"text-sm font-semibold text-red-600 dark:text-red-400\">Min range must be less than max range</span>\r\n+          </div>\r\n+        )}\r\n         <div className=\"mt-4 flex gap-2\">\r\n-          <Button onClick={saveCode}>{editingId ? 'Update' : 'Save'}</Button>\r\n-          {editingId && <Button variant=\"outline\" onClick={resetForm}>Cancel</Button>}\r\n+          <Button onClick={saveCode} disabled={!form.code || !form.name || !form.region || form.minRange! > form.maxRange!}>\r\n+            {editingId ? 'Update Area Code' : 'Save Area Code'}\r\n+          </Button>\r\n+          {editingId && (\r\n+            <Button variant=\"destructive\" onClick={() => deleteCode(editingId)}>\r\n+              Delete\r\n+            </Button>\r\n+          )}\r\n         </div>\r\n       </Card>\r\n \r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n"
                },
                {
                    "date": 1761651062065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n import { \r\n   Search, \r\n   Plus, \r\n   Edit, \r\n-  Trash2, \r\n   Download, \r\n   MapPin, \r\n   Users, \r\n   AlertTriangle,\r\n@@ -344,45 +343,130 @@\n         </div>\r\n       </Card>\r\n \r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <div className=\"mb-4 flex items-center justify-between\">\r\n+          <h2 className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">Area Codes ({filtered.length})</h2>\r\n+        </div>\r\n         <div className=\"overflow-x-auto\">\r\n           <table className=\"min-w-full\">\r\n             <thead>\r\n-              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n-                <th className=\"py-2 pr-4\">Code</th>\r\n-                <th className=\"py-2 pr-4\">Name</th>\r\n-                <th className=\"py-2 pr-4\">Region</th>\r\n-                <th className=\"py-2 pr-4\">Range</th>\r\n-                <th className=\"py-2 pr-4\">Assigned To</th>\r\n-                <th className=\"py-2 pr-4\">Status</th>\r\n-                <th className=\"py-2 pr-4\">Actions</th>\r\n+              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300 border-b-2 border-gray-200 dark:border-gray-700\">\r\n+                <th className=\"py-3 px-2\">\r\n+                  <button onClick={() => toggleSort('code')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+                    Code\r\n+                    {sortBy === 'code' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                  </button>\r\n+                </th>\r\n+                <th className=\"py-3 px-2\">\r\n+                  <button onClick={() => toggleSort('name')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+                    Name\r\n+                    {sortBy === 'name' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                  </button>\r\n+                </th>\r\n+                <th className=\"py-3 px-2\">\r\n+                  <button onClick={() => toggleSort('region')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+                    Region\r\n+                    {sortBy === 'region' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                  </button>\r\n+                </th>\r\n+                <th className=\"py-3 px-2\">\r\n+                  <button onClick={() => toggleSort('range')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+                    Range\r\n+                    {sortBy === 'range' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                  </button>\r\n+                </th>\r\n+                <th className=\"py-3 px-2\">Packages</th>\r\n+                <th className=\"py-3 px-2\">Assigned To</th>\r\n+                <th className=\"py-3 px-2\">Status</th>\r\n+                <th className=\"py-3 px-2\">Actions</th>\r\n               </tr>\r\n             </thead>\r\n             <tbody>\r\n-              {filtered.map(c => (\r\n-                <tr key={c.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n-                  <td className=\"py-2 pr-4\">{c.code}</td>\r\n-                  <td className=\"py-2 pr-4\">{c.name}</td>\r\n-                  <td className=\"py-2 pr-4\">{c.region}</td>\r\n-                  <td className=\"py-2 pr-4\">{c.minRange} - {c.maxRange}</td>\r\n-                  <td className=\"py-2 pr-4\">{users.find(u=>u.id===c.assignedTo)?.name || 'â€”'}</td>\r\n-                  <td className=\"py-2 pr-4 capitalize\">{c.status}</td>\r\n-                  <td className=\"py-2 pr-4 space-x-2\">\r\n-                    <Button size=\"sm\" variant=\"outline\" onClick={()=>editCode(c)}>Edit</Button>\r\n-                    <Button size=\"sm\" onClick={()=>toggleStatus(c.id)}>{c.status==='active'?'Deactivate':'Activate'}</Button>\r\n-                    <FormSelect\r\n-                      label=\"Assign\"\r\n-                      value={c.assignedTo || ''}\r\n-                      onChange={(v)=>assignUser(c.id, String(v))}\r\n-                      options={[{ value: '', label: 'Unassigned' }, ...users.map(u=>({ value: u.id, label: u.name }))]}\r\n-                    />\r\n-                  </td>\r\n-                </tr>\r\n-              ))}\r\n+              {filtered.map(c => {\r\n+                const pkgCount = stats.usedCounts.get(c.id) || 0;\r\n+                const user = users.find(u=>u.id===c.assignedTo);\r\n+                const range = c.maxRange - c.minRange + 1;\r\n+                const utilization = range > 0 ? ((pkgCount / range) * 100).toFixed(1) : '0';\r\n+                \r\n+                return (\r\n+                  <tr key={c.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\">\r\n+                    <td className=\"py-3 px-2 font-bold text-navy-600 dark:text-navy-400\">{c.code}</td>\r\n+                    <td className=\"py-3 px-2 font-semibold\">{c.name}</td>\r\n+                    <td className=\"py-3 px-2 text-gray-600 dark:text-gray-400\">{c.region}</td>\r\n+                    <td className=\"py-3 px-2\">\r\n+                      <span className=\"font-mono\">{c.minRange} - {c.maxRange}</span>\r\n+                      <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">({range} codes)</span>\r\n+                    </td>\r\n+                    <td className=\"py-3 px-2\">\r\n+                      <div className=\"flex items-center gap-2\">\r\n+                        <span className=\"font-semibold text-eco-600 dark:text-eco-400\">{pkgCount}</span>\r\n+                        <div className=\"flex-1 max-w-24 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\r\n+                          <div \r\n+                            className=\"h-full bg-eco-500 transition-all\" \r\n+                            style={{ width: `${Math.min(parseFloat(utilization), 100)}%` }}\r\n+                          />\r\n+                        </div>\r\n+                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">{utilization}%</span>\r\n+                      </div>\r\n+                    </td>\r\n+                    <td className=\"py-3 px-2\">\r\n+                      {user ? (\r\n+                        <span className=\"inline-flex items-center gap-1\">\r\n+                          <Users className=\"h-3 w-3\" />\r\n+                          <span className=\"font-semibold\">{user.name}</span>\r\n+                        </span>\r\n+                      ) : (\r\n+                        <span className=\"text-gray-400\">â€”</span>\r\n+                      )}\r\n+                    </td>\r\n+                    <td className=\"py-3 px-2\">\r\n+                      <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-bold ${\r\n+                        c.status === 'active' \r\n+                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400' \r\n+                          : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-400'\r\n+                      }`}>\r\n+                        {c.status === 'active' ? (\r\n+                          <>\r\n+                            <CheckCircle className=\"h-3 w-3\" />\r\n+                            Active\r\n+                          </>\r\n+                        ) : (\r\n+                          <>\r\n+                            <XCircle className=\"h-3 w-3\" />\r\n+                            Inactive\r\n+                          </>\r\n+                        )}\r\n+                      </span>\r\n+                    </td>\r\n+                    <td className=\"py-3 px-2\">\r\n+                      <div className=\"flex items-center gap-2\">\r\n+                        <Button size=\"sm\" variant=\"ghost\" onClick={() => editCode(c)} title=\"Edit\">\r\n+                          <Edit className=\"h-4 w-4\" />\r\n+                        </Button>\r\n+                        <Button size=\"sm\" variant=\"ghost\" onClick={() => toggleStatus(c.id)} title={c.status === 'active' ? 'Deactivate' : 'Activate'}>\r\n+                          {c.status === 'active' ? <XCircle className=\"h-4 w-4 text-red-600\" /> : <CheckCircle className=\"h-4 w-4 text-green-600\" />}\r\n+                        </Button>\r\n+                        <FormSelect\r\n+                          value={c.assignedTo || ''}\r\n+                          onChange={(v) => assignUser(c.id, String(v))}\r\n+                          options={[{ value: '', label: 'â€”' }, ...users.map(u => ({ value: u.id, label: u.name }))]}\r\n+                          className=\"max-w-32\"\r\n+                        />\r\n+                      </div>\r\n+                    </td>\r\n+                  </tr>\r\n+                );\r\n+              })}\r\n               {filtered.length === 0 && (\r\n                 <tr>\r\n-                  <td colSpan={7} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No area codes</td>\r\n+                  <td colSpan={8} className=\"py-12 text-center text-gray-500 dark:text-gray-400\">\r\n+                    <div className=\"flex flex-col items-center justify-center gap-2\">\r\n+                      <MapPin className=\"h-12 w-12 text-gray-400\" />\r\n+                      <p className=\"font-semibold\">No area codes found</p>\r\n+                      <p className=\"text-sm\">Try adjusting your search or filters</p>\r\n+                    </div>\r\n+                  </td>\r\n                 </tr>\r\n               )}\r\n             </tbody>\r\n           </table>\r\n"
                },
                {
                    "date": 1761651096061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,14 +65,18 @@\n     \r\n     // Calculate used codes from packages\r\n     const usedCounts = new Map();\r\n     packages.forEach(pkg => {\r\n-      const code = pkg.trackingCode?.split('-')[1];\r\n-      if (code) {\r\n+      const trackingCode = pkg.trackingCode || '';\r\n+      const parts = trackingCode.split('-');\r\n+      if (parts.length > 1) {\r\n+        const code = parts[1];\r\n         const num = parseInt(code);\r\n-        const areaCode = areaCodes.find(ac => num >= ac.minRange && num <= ac.maxRange);\r\n-        if (areaCode) {\r\n-          usedCounts.set(areaCode.id, (usedCounts.get(areaCode.id) || 0) + 1);\r\n+        if (!isNaN(num)) {\r\n+          const areaCode = areaCodes.find(ac => num >= ac.minRange && num <= ac.maxRange);\r\n+          if (areaCode) {\r\n+            usedCounts.set(areaCode.id, (usedCounts.get(areaCode.id) || 0) + 1);\r\n+          }\r\n         }\r\n       }\r\n     });\r\n     \r\n@@ -263,11 +267,8 @@\n               Cancel\r\n             </Button>\r\n           )}\r\n         </div>\r\n-\r\n-      <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <h2 className=\"text-lg font-semibold mb-3\">{editingId ? 'Edit Area Code' : 'Add Area Code'}</h2>\r\n         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n           <FormInput \r\n             label=\"Area Code\" \r\n             value={form.code || ''} \r\n@@ -446,8 +447,9 @@\n                         <Button size=\"sm\" variant=\"ghost\" onClick={() => toggleStatus(c.id)} title={c.status === 'active' ? 'Deactivate' : 'Activate'}>\r\n                           {c.status === 'active' ? <XCircle className=\"h-4 w-4 text-red-600\" /> : <CheckCircle className=\"h-4 w-4 text-green-600\" />}\r\n                         </Button>\r\n                         <FormSelect\r\n+                          label=\"\"\r\n                           value={c.assignedTo || ''}\r\n                           onChange={(v) => assignUser(c.id, String(v))}\r\n                           options={[{ value: '', label: 'â€”' }, ...users.map(u => ({ value: u.id, label: u.name }))]}\r\n                           className=\"max-w-32\"\r\n"
                },
                {
                    "date": 1761651117512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,11 @@\n     \r\n     // Calculate used codes from packages\r\n     const usedCounts = new Map();\r\n     packages.forEach(pkg => {\r\n-      const trackingCode = pkg.trackingCode || '';\r\n-      const parts = trackingCode.split('-');\r\n+      // Parse tracking number format: STATION-CODE or similar\r\n+      const trackingNumber = pkg.trackingNumber || '';\r\n+      const parts = trackingNumber.split('-');\r\n       if (parts.length > 1) {\r\n         const code = parts[1];\r\n         const num = parseInt(code);\r\n         if (!isNaN(num)) {\r\n"
                },
                {
                    "date": 1761651441799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,10 +164,17 @@\n     <div className=\"space-y-6\">\r\n       {/* Header */}\r\n       <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n         <div>\r\n-          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Area Code Management</h1>\r\n-          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\r\n+          <div className=\"flex items-center gap-3 mb-2\">\r\n+            <div className=\"p-3 bg-gradient-to-br from-navy-500 to-eco-500 rounded-xl shadow-lg\">\r\n+              <MapPin className=\"h-6 w-6 text-white\" />\r\n+            </div>\r\n+            <h1 className=\"text-3xl font-extrabold bg-gradient-to-r from-navy-700 via-eco-600 to-navy-700 dark:from-navy-300 dark:via-eco-400 dark:to-navy-300 bg-clip-text text-transparent\">\r\n+              Area Code Management\r\n+            </h1>\r\n+          </div>\r\n+          <p className=\"text-sm font-semibold text-gray-600 dark:text-gray-400 ml-14\">\r\n             Manage area codes and assign them to staff members\r\n           </p>\r\n         </div>\r\n         <Button onClick={() => resetForm()} className=\"w-full sm:w-auto flex items-center gap-2\">\r\n"
                },
                {
                    "date": 1761651485037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,13 @@\n         </Card>\r\n       </div>\r\n \r\n       {/* Filters */}\r\n-      <Card padding=\"lg\" variant=\"enhanced\">\r\n+      <Card padding=\"lg\" variant=\"enhanced\" className=\"border-2 border-mint-200 dark:border-mint-800\">\r\n+        <h3 className=\"text-lg font-extrabold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2\">\r\n+          <Filter className=\"h-5 w-5 text-mint-600\" />\r\n+          Search & Filter Options\r\n+        </h3>\r\n         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n           <FormInput \r\n             label=\"Search\" \r\n             value={q} \r\n@@ -264,13 +268,18 @@\n         </div>\r\n       </Card>\r\n \r\n       {/* Add/Edit Form */}\r\n-      <Card padding=\"lg\" variant=\"enhanced\" className=\"bg-gradient-to-r from-navy-50 to-eco-50 dark:from-navy-900/20 dark:to-eco-900/20\">\r\n-        <div className=\"flex items-center justify-between mb-4\">\r\n-          <h2 className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">\r\n-            {editingId ? 'Edit Area Code' : 'Add New Area Code'}\r\n-          </h2>\r\n+      <Card padding=\"lg\" variant=\"enhanced\" className=\"bg-gradient-to-r from-navy-50 to-eco-50 dark:from-navy-900/20 dark:to-eco-900/20 border-2 border-navy-200 dark:border-navy-700\">\r\n+        <div className=\"flex items-center justify-between mb-6 pb-4 border-b-2 border-navy-200 dark:border-navy-700\">\r\n+          <div className=\"flex items-center gap-3\">\r\n+            <div className={`p-2 rounded-lg ${editingId ? 'bg-yellow-500' : 'bg-eco-500'}`}>\r\n+              {editingId ? <Edit className=\"h-5 w-5 text-white\" /> : <Plus className=\"h-5 w-5 text-white\" />}\r\n+            </div>\r\n+            <h2 className=\"text-xl font-extrabold text-gray-900 dark:text-gray-100\">\r\n+              {editingId ? 'Edit Area Code' : 'Add New Area Code'}\r\n+            </h2>\r\n+          </div>\r\n           {editingId && (\r\n             <Button variant=\"outline\" size=\"sm\" onClick={resetForm}>\r\n               Cancel\r\n             </Button>\r\n@@ -351,44 +360,61 @@\n           )}\r\n         </div>\r\n       </Card>\r\n \r\n-      <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <div className=\"mb-4 flex items-center justify-between\">\r\n-          <h2 className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">Area Codes ({filtered.length})</h2>\r\n+      <Card padding=\"lg\" variant=\"enhanced\" className=\"border-2 border-gray-200 dark:border-gray-700\">\r\n+        <div className=\"mb-6 pb-4 border-b-2 border-gray-200 dark:border-gray-700 flex items-center justify-between\">\r\n+          <div className=\"flex items-center gap-3\">\r\n+            <div className=\"p-2 bg-eco-500 rounded-lg shadow-md\">\r\n+              <MapPin className=\"h-5 w-5 text-white\" />\r\n+            </div>\r\n+            <div>\r\n+              <h2 className=\"text-xl font-extrabold text-gray-900 dark:text-gray-100\">\r\n+                Area Codes\r\n+              </h2>\r\n+              <p className=\"text-sm font-semibold text-gray-600 dark:text-gray-400\">\r\n+                Showing {filtered.length} of {areaCodes.length} total codes\r\n+              </p>\r\n+            </div>\r\n+          </div>\r\n+          <div className=\"px-4 py-2 bg-navy-100 dark:bg-navy-900/30 rounded-lg border border-navy-200 dark:border-navy-800\">\r\n+            <span className=\"text-sm font-bold text-navy-700 dark:text-navy-300\">\r\n+              {filtered.length} results\r\n+            </span>\r\n+          </div>\r\n         </div>\r\n         <div className=\"overflow-x-auto\">\r\n           <table className=\"min-w-full\">\r\n             <thead>\r\n-              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300 border-b-2 border-gray-200 dark:border-gray-700\">\r\n-                <th className=\"py-3 px-2\">\r\n-                  <button onClick={() => toggleSort('code')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+              <tr className=\"bg-gradient-to-r from-navy-50 via-mint-50 to-eco-50 dark:from-navy-900/30 dark:via-mint-900/30 dark:to-eco-900/30 border-b-2 border-navy-200 dark:border-navy-700\">\r\n+                <th className=\"py-4 px-3\">\r\n+                  <button onClick={() => toggleSort('code')} className=\"flex items-center gap-2 font-extrabold text-navy-700 dark:text-navy-300 hover:text-navy-900 dark:hover:text-navy-100 transition-colors\">\r\n                     Code\r\n-                    {sortBy === 'code' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                    {sortBy === 'code' && (sortOrder === 'asc' ? <SortAsc className=\"h-4 w-4\" /> : <SortDesc className=\"h-4 w-4\" />)}\r\n                   </button>\r\n                 </th>\r\n-                <th className=\"py-3 px-2\">\r\n-                  <button onClick={() => toggleSort('name')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+                <th className=\"py-4 px-3\">\r\n+                  <button onClick={() => toggleSort('name')} className=\"flex items-center gap-2 font-extrabold text-navy-700 dark:text-navy-300 hover:text-navy-900 dark:hover:text-navy-100 transition-colors\">\r\n                     Name\r\n-                    {sortBy === 'name' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                    {sortBy === 'name' && (sortOrder === 'asc' ? <SortAsc className=\"h-4 w-4\" /> : <SortDesc className=\"h-4 w-4\" />)}\r\n                   </button>\r\n                 </th>\r\n-                <th className=\"py-3 px-2\">\r\n-                  <button onClick={() => toggleSort('region')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+                <th className=\"py-4 px-3\">\r\n+                  <button onClick={() => toggleSort('region')} className=\"flex items-center gap-2 font-extrabold text-navy-700 dark:text-navy-300 hover:text-navy-900 dark:hover:text-navy-100 transition-colors\">\r\n                     Region\r\n-                    {sortBy === 'region' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                    {sortBy === 'region' && (sortOrder === 'asc' ? <SortAsc className=\"h-4 w-4\" /> : <SortDesc className=\"h-4 w-4\" />)}\r\n                   </button>\r\n                 </th>\r\n-                <th className=\"py-3 px-2\">\r\n-                  <button onClick={() => toggleSort('range')} className=\"flex items-center gap-1 hover:text-gray-900 dark:hover:text-gray-100\">\r\n+                <th className=\"py-4 px-3\">\r\n+                  <button onClick={() => toggleSort('range')} className=\"flex items-center gap-2 font-extrabold text-navy-700 dark:text-navy-300 hover:text-navy-900 dark:hover:text-navy-100 transition-colors\">\r\n                     Range\r\n-                    {sortBy === 'range' && (sortOrder === 'asc' ? <SortAsc className=\"h-3 w-3\" /> : <SortDesc className=\"h-3 w-3\" />)}\r\n+                    {sortBy === 'range' && (sortOrder === 'asc' ? <SortAsc className=\"h-4 w-4\" /> : <SortDesc className=\"h-4 w-4\" />)}\r\n                   </button>\r\n                 </th>\r\n-                <th className=\"py-3 px-2\">Packages</th>\r\n-                <th className=\"py-3 px-2\">Assigned To</th>\r\n-                <th className=\"py-3 px-2\">Status</th>\r\n-                <th className=\"py-3 px-2\">Actions</th>\r\n+                <th className=\"py-4 px-3 font-extrabold text-navy-700 dark:text-navy-300\">Packages</th>\r\n+                <th className=\"py-4 px-3 font-extrabold text-navy-700 dark:text-navy-300\">Assigned To</th>\r\n+                <th className=\"py-4 px-3 font-extrabold text-navy-700 dark:text-navy-300\">Status</th>\r\n+                <th className=\"py-4 px-3 font-extrabold text-navy-700 dark:text-navy-300\">Actions</th>\r\n               </tr>\r\n             </thead>\r\n             <tbody>\r\n               {filtered.map(c => {\r\n"
                }
            ],
            "date": 1761636701164,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Card } from '../../components/Card';\r\n\r\nexport const AreaCodesPage: React.FC = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Area Code Management</h1>\r\n      <Card padding=\"lg\" variant=\"enhanced\">\r\n        <p className=\"text-gray-700 dark:text-gray-300\">Assign and modify region-specific code ranges will appear here.</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}