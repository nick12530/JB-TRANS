{
    "sourceFile": "src/pages/Users/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1761636663239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761637025861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,91 @@\n-import React from 'react';\r\n+import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n+import { Button } from '../../components/Button';\r\n+import { FormInput } from '../../components/FormInput';\r\n+import { FormSelect } from '../../components/FormSelect';\r\n+import { useApp } from '../../context/AppContext';\r\n+import { User } from '../../types';\r\n \r\n export const UsersPage: React.FC = () => {\r\n+  const { users, setUsers } = useApp();\r\n+  const [q, setQ] = useState('');\r\n+  const [form, setForm] = useState({ name: '', email: '', role: 'user' as User['role'] });\r\n+\r\n+  const filtered = useMemo(() => {\r\n+    const query = q.trim().toLowerCase();\r\n+    if (!query) return users;\r\n+    return users.filter(u => u.name.toLowerCase().includes(query) || u.email.toLowerCase().includes(query));\r\n+  }, [q, users]);\r\n+\r\n+  const addUser = () => {\r\n+    if (!form.name || !form.email) return;\r\n+    const newUser: User = {\r\n+      id: Date.now().toString(),\r\n+      name: form.name,\r\n+      email: form.email,\r\n+      role: form.role,\r\n+      status: 'active',\r\n+      createdAt: new Date().toISOString(),\r\n+    } as User;\r\n+    setUsers([newUser, ...users]);\r\n+    setForm({ name: '', email: '', role: 'user' });\r\n+  };\r\n+\r\n+  const toggleStatus = (id: string) => {\r\n+    setUsers(users.map(u => u.id === id ? { ...u, status: u.status === 'active' ? 'inactive' : 'active' } : u));\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">User Management</h1>\r\n+\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <p className=\"text-gray-700 dark:text-gray-300\">User management module placeholder. Add/edit/deactivate users with role assignment will appear here.</p>\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n+          <FormInput label=\"Search\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Name or email\" />\r\n+          <FormInput label=\"Name\" value={form.name} onChange={(v)=>setForm({...form, name: String(v)})} />\r\n+          <FormInput label=\"Email\" value={form.email} onChange={(v)=>setForm({...form, email: String(v)})} />\r\n+          <FormSelect label=\"Role\" value={form.role} onChange={(v)=>setForm({...form, role: v as User['role']})} options={[{value:'user',label:'User'},{value:'admin',label:'Admin'}]} />\r\n+        </div>\r\n+        <div className=\"mt-4\">\r\n+          <Button onClick={addUser}>Add User</Button>\r\n+        </div>\r\n       </Card>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <div className=\"overflow-x-auto\">\r\n+          <table className=\"min-w-full\">\r\n+            <thead>\r\n+              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n+                <th className=\"py-2 pr-4\">Name</th>\r\n+                <th className=\"py-2 pr-4\">Email</th>\r\n+                <th className=\"py-2 pr-4\">Role</th>\r\n+                <th className=\"py-2 pr-4\">Status</th>\r\n+                <th className=\"py-2 pr-4\">Actions</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {filtered.map(u => (\r\n+                <tr key={u.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n+                  <td className=\"py-2 pr-4\">{u.name}</td>\r\n+                  <td className=\"py-2 pr-4\">{u.email}</td>\r\n+                  <td className=\"py-2 pr-4 capitalize\">{u.role}</td>\r\n+                  <td className=\"py-2 pr-4\">{u.status}</td>\r\n+                  <td className=\"py-2 pr-4\">\r\n+                    <Button size=\"sm\" variant={u.status==='active'?'outline':'default'} onClick={()=>toggleStatus(u.id)}>\r\n+                      {u.status === 'active' ? 'Deactivate' : 'Activate'}\r\n+                    </Button>\r\n+                  </td>\r\n+                </tr>\r\n+              ))}\r\n+              {filtered.length === 0 && (\r\n+                <tr>\r\n+                  <td colSpan={5} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No users</td>\r\n+                </tr>\r\n+              )}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+      </Card>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1761639236501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,12 @@\n import { Button } from '../../components/Button';\r\n import { FormInput } from '../../components/FormInput';\r\n import { FormSelect } from '../../components/FormSelect';\r\n import { useApp } from '../../context/AppContext';\r\n-import { User } from '../../types';\r\n+import { User, Client } from '../../types';\r\n \r\n export const UsersPage: React.FC = () => {\r\n-  const { users, setUsers } = useApp();\r\n+  const { users, setUsers, clients, setClients } = useApp();\r\n   const [q, setQ] = useState('');\r\n   const [form, setForm] = useState({ name: '', email: '', role: 'user' as User['role'] });\r\n \r\n   const filtered = useMemo(() => {\r\n@@ -34,8 +34,38 @@\n   const toggleStatus = (id: string) => {\r\n     setUsers(users.map(u => u.id === id ? { ...u, status: u.status === 'active' ? 'inactive' : 'active' } : u));\r\n   };\r\n \r\n+  // Clients management\r\n+  const [cq, setCq] = useState('');\r\n+  const [cform, setCform] = useState<{ name: string; phoneNumber: string; email?: string } | null>({ name: '', phoneNumber: '', email: '' });\r\n+\r\n+  const filteredClients = useMemo(() => {\r\n+    const query = cq.trim().toLowerCase();\r\n+    return clients.filter(c => !query || c.name.toLowerCase().includes(query) || (c.phoneNumber||'').toLowerCase().includes(query) || (c.email||'').toLowerCase().includes(query));\r\n+  }, [cq, clients]);\r\n+\r\n+  const addClient = () => {\r\n+    if (!cform || !cform.name || !cform.phoneNumber) return;\r\n+    const newClient: Client = {\r\n+      id: Date.now().toString(),\r\n+      name: cform.name,\r\n+      phoneNumber: cform.phoneNumber,\r\n+      email: cform.email || undefined,\r\n+      dropOffPointId: '',\r\n+      isActive: true,\r\n+      preferredNotificationMethod: 'sms',\r\n+      createdAt: new Date().toISOString(),\r\n+      updatedAt: new Date().toISOString(),\r\n+    };\r\n+    setClients([newClient, ...clients]);\r\n+    setCform({ name: '', phoneNumber: '', email: '' });\r\n+  };\r\n+\r\n+  const toggleClient = (id: string) => {\r\n+    setClients(clients.map(c => c.id === id ? { ...c, isActive: !c.isActive, updatedAt: new Date().toISOString() } : c));\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">User Management</h1>\r\n \r\n@@ -85,7 +115,57 @@\n             </tbody>\r\n           </table>\r\n         </div>\r\n       </Card>\r\n+\r\n+      <h2 className=\"text-xl font-bold text-gray-900 dark:text-gray-100\">Clients</h2>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n+          <FormInput label=\"Search\" value={cq} onChange={(v)=>setCq(String(v))} placeholder=\"Name, phone or email\" />\r\n+          <FormInput label=\"Name\" value={cform?.name || ''} onChange={(v)=>setCform({ ...(cform||{name:'',phoneNumber:''}), name: String(v) })} />\r\n+          <FormInput label=\"Phone\" value={cform?.phoneNumber || ''} onChange={(v)=>setCform({ ...(cform||{name:'',phoneNumber:''}), phoneNumber: String(v) })} />\r\n+          <FormInput label=\"Email\" value={cform?.email || ''} onChange={(v)=>setCform({ ...(cform||{name:'',phoneNumber:''}), email: String(v) })} />\r\n+        </div>\r\n+        <div className=\"mt-4\">\r\n+          <Button onClick={addClient}>Add Client</Button>\r\n+        </div>\r\n+      </Card>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <div className=\"overflow-x-auto\">\r\n+          <table className=\"min-w-full\">\r\n+            <thead>\r\n+              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n+                <th className=\"py-2 pr-4\">Name</th>\r\n+                <th className=\"py-2 pr-4\">Phone</th>\r\n+                <th className=\"py-2 pr-4\">Email</th>\r\n+                <th className=\"py-2 pr-4\">Status</th>\r\n+                <th className=\"py-2 pr-4\">Actions</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {filteredClients.map(c => (\r\n+                <tr key={c.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n+                  <td className=\"py-2 pr-4\">{c.name}</td>\r\n+                  <td className=\"py-2 pr-4\">{c.phoneNumber}</td>\r\n+                  <td className=\"py-2 pr-4\">{c.email || 'â€”'}</td>\r\n+                  <td className=\"py-2 pr-4\">{c.isActive ? 'active' : 'inactive'}</td>\r\n+                  <td className=\"py-2 pr-4\">\r\n+                    <Button size=\"sm\" variant={c.isActive?'outline':'default'} onClick={()=>toggleClient(c.id)}>\r\n+                      {c.isActive ? 'Deactivate' : 'Activate'}\r\n+                    </Button>\r\n+                  </td>\r\n+                </tr>\r\n+              ))}\r\n+              {filteredClients.length === 0 && (\r\n+                <tr>\r\n+                  <td colSpan={5} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No clients</td>\r\n+                </tr>\r\n+              )}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+      </Card>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1761639582180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,28 +8,28 @@\n \r\n export const UsersPage: React.FC = () => {\r\n   const { users, setUsers, clients, setClients } = useApp();\r\n   const [q, setQ] = useState('');\r\n-  const [form, setForm] = useState({ name: '', email: '', role: 'user' as User['role'] });\r\n+  const [form, setForm] = useState({ name: '', email: '', role: 'staff' as User['role'] });\r\n \r\n   const filtered = useMemo(() => {\r\n     const query = q.trim().toLowerCase();\r\n     if (!query) return users;\r\n-    return users.filter(u => u.name.toLowerCase().includes(query) || u.email.toLowerCase().includes(query));\r\n+    return users.filter(u => u.name.toLowerCase().includes(query) || (u.email || '').toLowerCase().includes(query));\r\n   }, [q, users]);\r\n \r\n   const addUser = () => {\r\n-    if (!form.name || !form.email) return;\r\n+    if (!form.name) return;\r\n     const newUser: User = {\r\n       id: Date.now().toString(),\r\n       name: form.name,\r\n-      email: form.email,\r\n+      email: form.email || undefined,\r\n       role: form.role,\r\n       status: 'active',\r\n       createdAt: new Date().toISOString(),\r\n     } as User;\r\n     setUsers([newUser, ...users]);\r\n-    setForm({ name: '', email: '', role: 'user' });\r\n+    setForm({ name: '', email: '', role: 'staff' });\r\n   };\r\n \r\n   const toggleStatus = (id: string) => {\r\n     setUsers(users.map(u => u.id === id ? { ...u, status: u.status === 'active' ? 'inactive' : 'active' } : u));\r\n@@ -73,9 +73,9 @@\n         <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n           <FormInput label=\"Search\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Name or email\" />\r\n           <FormInput label=\"Name\" value={form.name} onChange={(v)=>setForm({...form, name: String(v)})} />\r\n           <FormInput label=\"Email\" value={form.email} onChange={(v)=>setForm({...form, email: String(v)})} />\r\n-          <FormSelect label=\"Role\" value={form.role} onChange={(v)=>setForm({...form, role: v as User['role']})} options={[{value:'user',label:'User'},{value:'admin',label:'Admin'}]} />\r\n+          <FormSelect label=\"Role\" value={form.role} onChange={(v)=>setForm({...form, role: v as User['role']})} options={[{value:'staff',label:'Staff'},{value:'client',label:'Client'},{value:'admin',label:'Admin'}]} />\r\n         </div>\r\n         <div className=\"mt-4\">\r\n           <Button onClick={addUser}>Add User</Button>\r\n         </div>\r\n"
                },
                {
                    "date": 1761649465226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,14 @@\n   const toggleStatus = (id: string) => {\r\n     setUsers(users.map(u => u.id === id ? { ...u, status: u.status === 'active' ? 'inactive' : 'active' } : u));\r\n   };\r\n \r\n+  const deleteUser = (id: string) => {\r\n+    if (confirm('Are you sure you want to delete this user?')) {\r\n+      setUsers(users.filter(u => u.id !== id));\r\n+    }\r\n+  };\r\n+\r\n   // Clients management\r\n   const [cq, setCq] = useState('');\r\n   const [cform, setCform] = useState<{ name: string; phoneNumber: string; email?: string } | null>({ name: '', phoneNumber: '', email: '' });\r\n \r\n@@ -99,12 +105,13 @@\n                   <td className=\"py-2 pr-4\">{u.name}</td>\r\n                   <td className=\"py-2 pr-4\">{u.email}</td>\r\n                   <td className=\"py-2 pr-4 capitalize\">{u.role}</td>\r\n                   <td className=\"py-2 pr-4\">{u.status}</td>\r\n-                  <td className=\"py-2 pr-4\">\r\n+                  <td className=\"py-2 pr-4 space-x-1\">\r\n                     <Button size=\"sm\" variant={u.status==='active'?'outline':'default'} onClick={()=>toggleStatus(u.id)}>\r\n                       {u.status === 'active' ? 'Deactivate' : 'Activate'}\r\n                     </Button>\r\n+                    <Button size=\"sm\" variant=\"destructive\" onClick={()=>deleteUser(u.id)}>Delete</Button>\r\n                   </td>\r\n                 </tr>\r\n               ))}\r\n               {filtered.length === 0 && (\r\n"
                }
            ],
            "date": 1761636663238,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Card } from '../../components/Card';\r\n\r\nexport const UsersPage: React.FC = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">User Management</h1>\r\n      <Card padding=\"lg\" variant=\"enhanced\">\r\n        <p className=\"text-gray-700 dark:text-gray-300\">User management module placeholder. Add/edit/deactivate users with role assignment will appear here.</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}