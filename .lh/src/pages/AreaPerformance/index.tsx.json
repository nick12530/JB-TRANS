{
    "sourceFile": "src/pages/AreaPerformance/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1759901073443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760598994322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,12 @@\n   const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter'>('month');\r\n \r\n   // Area codes data\r\n   const areaCodes = [\r\n-    { code: 'AC001', name: 'Central Highlands', region: 'Meru County' },\r\n-    { code: 'AC002', name: 'Eastern Plains', region: 'Kitui County' },\r\n-    { code: 'AC003', name: 'Coastal Region', region: 'Mombasa County' },\r\n-    { code: 'AC004', name: 'Northern Frontier', region: 'Garissa County' },\r\n-    { code: 'AC005', name: 'Metropolitan Area', region: 'Nairobi County' },\r\n+    { code: 'AC001', name: 'Embu Area', region: 'Embu County' },\r\n+    { code: 'AC002', name: 'Mecca Area', region: 'Mecca Region' },\r\n+    { code: 'AC003', name: 'Ena Area', region: 'Ena Region' },\r\n+    { code: 'AC004', name: 'Ugweri Area', region: 'Ugweri Region' },\r\n   ];\r\n \r\n   // Calculate area performance\r\n   const areaPerformance = useMemo(() => {\r\n"
                },
                {
                    "date": 1760604552375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,12 @@\n   const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter'>('month');\r\n \r\n   // Area codes data\r\n   const areaCodes = [\r\n-    { code: 'AC001', name: 'Embu Area', region: 'Embu County' },\r\n-    { code: 'AC002', name: 'Mecca Area', region: 'Mecca Region' },\r\n-    { code: 'AC003', name: 'Ena Area', region: 'Ena Region' },\r\n-    { code: 'AC004', name: 'Ugweri Area', region: 'Ugweri Region' },\r\n+    { code: 'AC001', name: 'Embu town', region: 'Embu County' },\r\n+    { code: 'AC002', name: 'Mecca', region: 'Mecca Region' },\r\n+    { code: 'AC003', name: 'Ena', region: 'Ena Region' },\r\n+    { code: 'AC004', name: 'Ugweri', region: 'Ugweri Region' },\r\n   ];\r\n \r\n   // Calculate area performance\r\n   const areaPerformance = useMemo(() => {\r\n"
                },
                {
                    "date": 1760605223872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,14 @@\n import React, { useState, useMemo } from 'react';\r\n import { useApp } from '../../context/AppContext';\r\n import { Card } from '../../components/Card';\r\n-import { formatCurrency } from '../../utils/helpers';\r\n import { \r\n   MapPin, \r\n   TrendingUp, \r\n-  TrendingDown, \r\n   BarChart3, \r\n-  Filter,\r\n   Download,\r\n   RefreshCw,\r\n   Target,\r\n-  Clock,\r\n   Package\r\n } from 'lucide-react';\r\n \r\n interface AreaPerformance {\r\n@@ -324,9 +320,9 @@\n             {/* Top Drop-off Points */}\r\n             <div>\r\n               <h4 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-2\">Top Drop-off Points</h4>\r\n               <div className=\"space-y-2\">\r\n-                {area.topDropOffs.map((dropOff, index) => (\r\n+                {area.topDropOffs.map((dropOff) => (\r\n                   <div key={dropOff.dropOff} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded\">\r\n                     <div className=\"flex items-center space-x-2\">\r\n                       <MapPin className=\"h-3 w-3 text-gray-400\" />\r\n                       <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">{dropOff.dropOff}</span>\r\n"
                }
            ],
            "date": 1759901073443,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { Card } from '../../components/Card';\r\nimport { formatCurrency } from '../../utils/helpers';\r\nimport { \r\n  MapPin, \r\n  TrendingUp, \r\n  TrendingDown, \r\n  BarChart3, \r\n  Filter,\r\n  Download,\r\n  RefreshCw,\r\n  Target,\r\n  Clock,\r\n  Package\r\n} from 'lucide-react';\r\n\r\ninterface AreaPerformance {\r\n  areaCode: string;\r\n  areaName: string;\r\n  region: string;\r\n  totalTrips: number;\r\n  totalQuantity: number;\r\n  totalRevenue: number;\r\n  avgDeliveryTime: number;\r\n  successRate: number;\r\n  topStations: Array<{\r\n    stationCode: string;\r\n    stationName: string;\r\n    trips: number;\r\n    revenue: number;\r\n  }>;\r\n  topDropOffs: Array<{\r\n    dropOff: string;\r\n    trips: number;\r\n    revenue: number;\r\n  }>;\r\n}\r\n\r\nexport const AreaPerformancePage: React.FC = () => {\r\n  const { sourceRecords, user } = useApp();\r\n  const [selectedArea, setSelectedArea] = useState<string>('all');\r\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter'>('month');\r\n\r\n  // Area codes data\r\n  const areaCodes = [\r\n    { code: 'AC001', name: 'Central Highlands', region: 'Meru County' },\r\n    { code: 'AC002', name: 'Eastern Plains', region: 'Kitui County' },\r\n    { code: 'AC003', name: 'Coastal Region', region: 'Mombasa County' },\r\n    { code: 'AC004', name: 'Northern Frontier', region: 'Garissa County' },\r\n    { code: 'AC005', name: 'Metropolitan Area', region: 'Nairobi County' },\r\n  ];\r\n\r\n  // Calculate area performance\r\n  const areaPerformance = useMemo(() => {\r\n    const performance: AreaPerformance[] = [];\r\n    \r\n    areaCodes.forEach(area => {\r\n      const records = sourceRecords.filter(record => record.areaCode === area.code);\r\n      \r\n      if (records.length === 0) {\r\n        performance.push({\r\n          areaCode: area.code,\r\n          areaName: area.name,\r\n          region: area.region,\r\n          totalTrips: 0,\r\n          totalQuantity: 0,\r\n          totalRevenue: 0,\r\n          avgDeliveryTime: 0,\r\n          successRate: 0,\r\n          topStations: [],\r\n          topDropOffs: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const totalQuantity = records.reduce((sum, record) => sum + record.quantitySold, 0);\r\n      const totalRevenue = records.reduce((sum, record) => sum + record.totalCost, 0);\r\n      \r\n      // Mock delivery time calculation (in real app, calculate from actual delivery times)\r\n      const avgDeliveryTime = 2.5 + Math.random() * 2; // 2.5-4.5 hours\r\n      \r\n      // Mock success rate calculation\r\n      const successRate = 85 + Math.random() * 15; // 85-100%\r\n      \r\n      // Top stations analysis\r\n      const stationStats = records.reduce((acc, record) => {\r\n        const station = record.pickupStationCode;\r\n        if (!acc[station]) {\r\n          acc[station] = { trips: 0, revenue: 0, name: station };\r\n        }\r\n        acc[station].trips += 1;\r\n        acc[station].revenue += record.totalCost;\r\n        return acc;\r\n      }, {} as Record<string, { trips: number; revenue: number; name: string }>);\r\n\r\n      const topStations = Object.entries(stationStats)\r\n        .map(([code, stats]) => ({\r\n          stationCode: code,\r\n          stationName: code,\r\n          trips: stats.trips,\r\n          revenue: stats.revenue,\r\n        }))\r\n        .sort((a, b) => b.trips - a.trips)\r\n        .slice(0, 3);\r\n\r\n      // Top drop-off points analysis\r\n      const dropOffStats = records.reduce((acc, record) => {\r\n        const dropOff = record.dropOffPoint;\r\n        if (!acc[dropOff]) {\r\n          acc[dropOff] = { trips: 0, revenue: 0 };\r\n        }\r\n        acc[dropOff].trips += 1;\r\n        acc[dropOff].revenue += record.totalCost;\r\n        return acc;\r\n      }, {} as Record<string, { trips: number; revenue: number }>);\r\n\r\n      const topDropOffs = Object.entries(dropOffStats)\r\n        .map(([dropOff, stats]) => ({\r\n          dropOff,\r\n          trips: stats.trips,\r\n          revenue: stats.revenue,\r\n        }))\r\n        .sort((a, b) => b.trips - a.trips)\r\n        .slice(0, 5);\r\n\r\n      performance.push({\r\n        areaCode: area.code,\r\n        areaName: area.name,\r\n        region: area.region,\r\n        totalTrips: records.length,\r\n        totalQuantity,\r\n        totalRevenue,\r\n        avgDeliveryTime,\r\n        successRate,\r\n        topStations,\r\n        topDropOffs,\r\n      });\r\n    });\r\n\r\n    return performance.sort((a, b) => b.totalTrips - a.totalTrips);\r\n  }, [sourceRecords]);\r\n\r\n  // Filter performance based on selected area\r\n  const filteredPerformance = selectedArea === 'all' \r\n    ? areaPerformance \r\n    : areaPerformance.filter(area => area.areaCode === selectedArea);\r\n\r\n  // Calculate overall metrics\r\n  const overallMetrics = useMemo(() => {\r\n    const totalTrips = areaPerformance.reduce((sum, area) => sum + area.totalTrips, 0);\r\n    const totalQuantity = areaPerformance.reduce((sum, area) => sum + area.totalQuantity, 0);\r\n    const totalRevenue = areaPerformance.reduce((sum, area) => sum + area.totalRevenue, 0);\r\n    const avgSuccessRate = areaPerformance.length > 0 \r\n      ? areaPerformance.reduce((sum, area) => sum + area.successRate, 0) / areaPerformance.length \r\n      : 0;\r\n\r\n    return {\r\n      totalTrips,\r\n      totalQuantity,\r\n      totalRevenue,\r\n      avgSuccessRate,\r\n    };\r\n  }, [areaPerformance]);\r\n\r\n  if (user?.role !== 'admin') {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <Card className=\"p-8 text-center\">\r\n          <Target className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2\">Access Restricted</h2>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">Area performance analysis is only available to administrators.</p>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Area Performance Analysis</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Comprehensive analysis of pickup station performance by area codes\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Controls */}\r\n        <div className=\"flex items-center space-x-4\">\r\n          <select \r\n            value={selectedPeriod} \r\n            onChange={(e) => setSelectedPeriod(e.target.value as any)}\r\n            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n          >\r\n            <option value=\"week\">This Week</option>\r\n            <option value=\"month\">This Month</option>\r\n            <option value=\"quarter\">This Quarter</option>\r\n          </select>\r\n          \r\n          <select \r\n            value={selectedArea} \r\n            onChange={(e) => setSelectedArea(e.target.value)}\r\n            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n          >\r\n            <option value=\"all\">All Areas</option>\r\n            {areaCodes.map(area => (\r\n              <option key={area.code} value={area.code}>\r\n                {area.code} - {area.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          \r\n          <button className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n            <Download className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Overall Metrics */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-blue-500\">\r\n              <BarChart3 className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Trips</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{overallMetrics.totalTrips}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-green-500\">\r\n              <Package className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Quantity</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(overallMetrics.totalQuantity / 1000).toFixed(1)}K kg</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-yellow-500\">\r\n              <TrendingUp className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Revenue</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(overallMetrics.totalRevenue / 1000).toFixed(0)}K</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-purple-500\">\r\n              <Target className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Avg Success Rate</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{overallMetrics.avgSuccessRate.toFixed(1)}%</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Area Performance Grid */}\r\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\r\n        {filteredPerformance.map((area) => (\r\n          <Card key={area.areaCode} className=\"p-6\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{area.areaCode}</h3>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{area.areaName} - {area.region}</p>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <RefreshCw className=\"h-4 w-4 text-gray-400\" />\r\n                <span className=\"text-xs text-gray-500\">Live Data</span>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Key Metrics */}\r\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\r\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Trips</p>\r\n                <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{area.totalTrips}</p>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Quantity</p>\r\n                <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(area.totalQuantity / 1000).toFixed(1)}K kg</p>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Revenue</p>\r\n                <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(area.totalRevenue / 1000).toFixed(0)}K</p>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Success Rate</p>\r\n                <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{area.successRate.toFixed(1)}%</p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Top Stations */}\r\n            <div className=\"mb-4\">\r\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-2\">Top Performing Stations</h4>\r\n              <div className=\"space-y-2\">\r\n                {area.topStations.map((station, index) => (\r\n                  <div key={station.stationCode} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"text-xs font-medium text-gray-500\">#{index + 1}</span>\r\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">{station.stationCode}</span>\r\n                    </div>\r\n                    <div className=\"text-right text-xs\">\r\n                      <p className=\"text-gray-500\">{station.trips} trips</p>\r\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{(station.revenue / 1000).toFixed(1)}K</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Top Drop-off Points */}\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-2\">Top Drop-off Points</h4>\r\n              <div className=\"space-y-2\">\r\n                {area.topDropOffs.map((dropOff, index) => (\r\n                  <div key={dropOff.dropOff} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <MapPin className=\"h-3 w-3 text-gray-400\" />\r\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">{dropOff.dropOff}</span>\r\n                    </div>\r\n                    <div className=\"text-right text-xs\">\r\n                      <p className=\"text-gray-500\">{dropOff.trips} trips</p>\r\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{(dropOff.revenue / 1000).toFixed(1)}K</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}