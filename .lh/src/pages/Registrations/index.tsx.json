{
    "sourceFile": "src/pages/Registrations/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761910379655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761910462133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Card } from '../../components/Card';\r\n import { FormInput } from '../../components/FormInput';\r\n import { Button } from '../../components/Button';\r\n import { useApp } from '../../context/AppContext';\r\n-import { Calendar, Download, Package, Filter } from 'lucide-react';\r\n+import { Download, Filter } from 'lucide-react';\r\n \r\n export const RegistrationsPage: React.FC = () => {\r\n   const { packages, user } = useApp();\r\n   const [startDate, setStartDate] = useState(() => {\r\n"
                }
            ],
            "date": 1761910379655,
            "name": "Commit-0",
            "content": "import React, { useMemo, useState } from 'react';\r\nimport { Card } from '../../components/Card';\r\nimport { FormInput } from '../../components/FormInput';\r\nimport { Button } from '../../components/Button';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { Calendar, Download, Package, Filter } from 'lucide-react';\r\n\r\nexport const RegistrationsPage: React.FC = () => {\r\n  const { packages, user } = useApp();\r\n  const [startDate, setStartDate] = useState(() => {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - 7); // Default to last 7 days\r\n    return date.toISOString().split('T')[0];\r\n  });\r\n  const [endDate, setEndDate] = useState(() => new Date().toISOString().split('T')[0]);\r\n\r\n  // Filter packages by date range\r\n  const filteredPackages = useMemo(() => {\r\n    return packages.filter(p => {\r\n      if (!p.registeredAt) return false;\r\n      const regDate = new Date(p.registeredAt).toISOString().split('T')[0];\r\n      return regDate >= startDate && regDate <= endDate;\r\n    }).sort((a, b) => String(b.registeredAt).localeCompare(String(a.registeredAt)));\r\n  }, [packages, startDate, endDate]);\r\n\r\n  // Filter by user role if staff\r\n  const visiblePackages = useMemo(() => {\r\n    if (user?.role === 'admin') return filteredPackages;\r\n    return filteredPackages.filter(p => p.registeredBy === user?.name || p.registeredBy === user?.id);\r\n  }, [filteredPackages, user]);\r\n\r\n  // Parse goods quantities from notes\r\n  const parseGoods = (notes?: string) => {\r\n    if (!notes) return { boxes: 0, basins: 0, smallSacks: 0 };\r\n    let boxes = 0, basins = 0, smallSacks = 0;\r\n    for (const part of notes.split('|')) {\r\n      const [k, v] = (part || '').split(':');\r\n      const val = Number(v);\r\n      if (Number.isFinite(val)) {\r\n        if (k === 'boxes') boxes = val;\r\n        if (k === 'basins') basins = val;\r\n        if (k === 'smallSacks') smallSacks = val;\r\n      }\r\n    }\r\n    return { boxes, basins, smallSacks };\r\n  };\r\n\r\n  const exportToCSV = () => {\r\n    const headers = ['Date', 'Client Code', 'Tracking Number', 'Brought By', 'Recorded By', 'Station', 'Boxes', 'Basins', 'Small Sacks', 'Total Items'];\r\n    const rows = visiblePackages.map(p => {\r\n      const goods = parseGoods(p.notes);\r\n      const total = goods.boxes + goods.basins + goods.smallSacks;\r\n      const date = p.registeredAt ? new Date(p.registeredAt).toLocaleDateString() : '';\r\n      const code = p.trackingNumber?.split('-')[1] || '';\r\n      return [\r\n        date,\r\n        code,\r\n        p.trackingNumber || '',\r\n        p.senderName || '',\r\n        p.registeredBy || '',\r\n        p.station || '',\r\n        String(goods.boxes),\r\n        String(goods.basins),\r\n        String(goods.smallSacks),\r\n        String(total)\r\n      ];\r\n    });\r\n    \r\n    const csv = [headers, ...rows].map(r => r.map(x => `\"${String(x).replace(/\"/g, '\"\"')}\"`).join(',')).join('\\n');\r\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `registrations_${startDate}_to_${endDate}.csv`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  // Aggregate by client code\r\n  const aggregatedByCode = useMemo(() => {\r\n    const map = new Map<string, { code: string; broughtBy: string; boxes: number; basins: number; smallSacks: number; count: number }>();\r\n    visiblePackages.forEach(p => {\r\n      const code = p.trackingNumber?.split('-')[1] || 'N/A';\r\n      const goods = parseGoods(p.notes);\r\n      const existing = map.get(code) || { code, broughtBy: p.senderName || '', boxes: 0, basins: 0, smallSacks: 0, count: 0 };\r\n      existing.boxes += goods.boxes;\r\n      existing.basins += goods.basins;\r\n      existing.smallSacks += goods.smallSacks;\r\n      existing.count += 1;\r\n      if (!existing.broughtBy) existing.broughtBy = p.senderName || '';\r\n      map.set(code, existing);\r\n    });\r\n    return Array.from(map.values()).sort((a, b) => a.code.localeCompare(b.code));\r\n  }, [visiblePackages]);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Package Registrations</h1>\r\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">View detailed records with date filters</p>\r\n        </div>\r\n        <Button onClick={exportToCSV} className=\"flex items-center gap-2\">\r\n          <Download className=\"h-4 w-4\" />\r\n          <span>Export CSV</span>\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Date Filters */}\r\n      <Card variant=\"enhanced\" padding=\"lg\">\r\n        <div className=\"flex items-center gap-4 mb-4\">\r\n          <Filter className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\r\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Filter by Date</h2>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\r\n          <FormInput\r\n            label=\"Start Date\"\r\n            type=\"date\"\r\n            value={startDate}\r\n            onChange={(v) => setStartDate(String(v))}\r\n          />\r\n          <FormInput\r\n            label=\"End Date\"\r\n            type=\"date\"\r\n            value={endDate}\r\n            onChange={(v) => setEndDate(String(v))}\r\n          />\r\n          <div className=\"flex items-end\">\r\n            <Button variant=\"outline\" onClick={() => {\r\n              const today = new Date();\r\n              const weekAgo = new Date();\r\n              weekAgo.setDate(today.getDate() - 7);\r\n              setStartDate(weekAgo.toISOString().split('T')[0]);\r\n              setEndDate(today.toISOString().split('T')[0]);\r\n            }} className=\"w-full\">\r\n              Last 7 Days\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">\r\n          Showing <strong>{visiblePackages.length}</strong> registration{visiblePackages.length !== 1 ? 's' : ''} from {new Date(startDate).toLocaleDateString()} to {new Date(endDate).toLocaleDateString()}\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Aggregated by Client Code */}\r\n      <Card variant=\"enhanced\" padding=\"lg\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Summary by Client Code</h2>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full text-sm\">\r\n            <thead>\r\n              <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Client Code</th>\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Brought By</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Boxes</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Basins</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Small Sacks</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Total Items</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Registrations</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {aggregatedByCode.map((item, idx) => (\r\n                <tr key={idx} className=\"border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800/50\">\r\n                  <td className=\"py-3 px-4 font-medium text-gray-900 dark:text-gray-100\">{item.code}</td>\r\n                  <td className=\"py-3 px-4 text-gray-700 dark:text-gray-300\">{item.broughtBy}</td>\r\n                  <td className=\"py-3 px-4 text-right text-gray-700 dark:text-gray-300\">{item.boxes}</td>\r\n                  <td className=\"py-3 px-4 text-right text-gray-700 dark:text-gray-300\">{item.basins}</td>\r\n                  <td className=\"py-3 px-4 text-right text-gray-700 dark:text-gray-300\">{item.smallSacks}</td>\r\n                  <td className=\"py-3 px-4 text-right font-semibold text-gray-900 dark:text-gray-100\">{item.boxes + item.basins + item.smallSacks}</td>\r\n                  <td className=\"py-3 px-4 text-right text-gray-600 dark:text-gray-400\">{item.count}</td>\r\n                </tr>\r\n              ))}\r\n              {aggregatedByCode.length === 0 && (\r\n                <tr>\r\n                  <td colSpan={7} className=\"py-8 text-center text-gray-500 dark:text-gray-400\">No registrations found for selected date range</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Detailed Excel-like Table */}\r\n      <Card variant=\"enhanced\" padding=\"lg\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Detailed Records</h2>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full text-xs sm:text-sm border border-gray-200 dark:border-gray-700\">\r\n            <thead>\r\n              <tr className=\"bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Date</th>\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Client Code</th>\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Tracking #</th>\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Brought By</th>\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Recorded By</th>\r\n                <th className=\"text-left py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Station</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Boxes</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Basins</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100 border-r border-gray-200 dark:border-gray-700\">Sacks</th>\r\n                <th className=\"text-right py-3 px-4 font-semibold text-gray-900 dark:text-gray-100\">Total</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {visiblePackages.map((p) => {\r\n                const goods = parseGoods(p.notes);\r\n                const total = goods.boxes + goods.basins + goods.smallSacks;\r\n                const date = p.registeredAt ? new Date(p.registeredAt).toLocaleDateString() : '';\r\n                const code = p.trackingNumber?.split('-')[1] || '';\r\n                return (\r\n                  <tr key={p.id} className=\"border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800/50\">\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300\">{date}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 font-medium text-gray-900 dark:text-gray-100\">{code}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300\">{p.trackingNumber}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300\">{p.senderName}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300\">{p.registeredBy}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300\">{p.station}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-right text-gray-700 dark:text-gray-300\">{goods.boxes}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-right text-gray-700 dark:text-gray-300\">{goods.basins}</td>\r\n                    <td className=\"py-2 px-4 border-r border-gray-200 dark:border-gray-700 text-right text-gray-700 dark:text-gray-300\">{goods.smallSacks}</td>\r\n                    <td className=\"py-2 px-4 text-right font-semibold text-gray-900 dark:text-gray-100\">{total}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n              {visiblePackages.length === 0 && (\r\n                <tr>\r\n                  <td colSpan={10} className=\"py-8 text-center text-gray-500 dark:text-gray-400\">No records found</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\n"
        }
    ]
}