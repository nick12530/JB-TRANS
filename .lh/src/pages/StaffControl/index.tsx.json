{
    "sourceFile": "src/pages/StaffControl/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1759910295637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759911136546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,11 @@\n   Filter, \r\n   Download, \r\n   UserCheck, \r\n   UserX, \r\n-  Clock,\r\n   Shield,\r\n   Settings,\r\n   Activity,\r\n-  AlertCircle,\r\n   CheckCircle,\r\n   XCircle\r\n } from 'lucide-react';\r\n \r\n@@ -43,9 +41,9 @@\n }\r\n \r\n export const StaffControlPage: React.FC = () => {\r\n   const { user } = useApp();\r\n-  const { showSuccessNotification, showErrorNotification } = useNotificationService();\r\n+  const { showSuccessNotification } = useNotificationService();\r\n   const [isModalOpen, setIsModalOpen] = useState(false);\r\n   const [editingStaff, setEditingStaff] = useState<StaffControl | null>(null);\r\n   \r\n   // Filter states\r\n@@ -192,23 +190,23 @@\n         staffControls.map((staff) =>\r\n           staff.id === editingStaff.id ? { ...newStaff, id: editingStaff.id, staffId: editingStaff.staffId } : staff\r\n         )\r\n       );\r\n-      showSuccessNotification('Staff member updated successfully!');\r\n+      showSuccessNotification('Success', 'Staff member updated successfully!');\r\n     } else {\r\n       const id = Date.now().toString();\r\n       const staffId = `STF-${String(staffControls.length + 1).padStart(3, '0')}`;\r\n       setStaffControls([...staffControls, { ...newStaff, id, staffId }]);\r\n-      showSuccessNotification('Staff member added successfully!');\r\n+      showSuccessNotification('Success', 'Staff member added successfully!');\r\n     }\r\n \r\n     handleCloseModal();\r\n   };\r\n \r\n   const handleDelete = (staff: StaffControl) => {\r\n     if (window.confirm(`Are you sure you want to delete staff member ${staff.name}?`)) {\r\n       setStaffControls(staffControls.filter((s) => s.id !== staff.id));\r\n-      showSuccessNotification('Staff member deleted successfully!');\r\n+      showSuccessNotification('Success', 'Staff member deleted successfully!');\r\n     }\r\n   };\r\n \r\n   const handleToggleStatus = (staff: StaffControl) => {\r\n@@ -217,14 +215,14 @@\n       staffControls.map((s) =>\r\n         s.id === staff.id ? { ...s, status: newStatus } : s\r\n       )\r\n     );\r\n-    showSuccessNotification(`Staff member ${newStatus === 'active' ? 'activated' : 'suspended'} successfully!`);\r\n+    showSuccessNotification('Success', `Staff member ${newStatus === 'active' ? 'activated' : 'suspended'} successfully!`);\r\n   };\r\n \r\n   const handleResetPassword = (staff: StaffControl) => {\r\n     if (window.confirm(`Reset password for ${staff.name}?`)) {\r\n-      showSuccessNotification(`Password reset email sent to ${staff.email}`);\r\n+      showSuccessNotification('Success', `Password reset email sent to ${staff.email}`);\r\n     }\r\n   };\r\n \r\n   // Filter staff controls\r\n"
                },
                {
                    "date": 1759911165391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -520,22 +520,8 @@\n           columns={columns}\r\n           onEdit={handleOpenModal}\r\n           onDelete={handleDelete}\r\n           emptyMessage=\"No staff members found matching the current filters.\"\r\n-          additionalActions={[\r\n-            {\r\n-              label: 'Toggle Status',\r\n-              icon: Activity,\r\n-              onClick: handleToggleStatus,\r\n-              className: 'text-blue-600 hover:text-blue-800',\r\n-            },\r\n-            {\r\n-              label: 'Reset Password',\r\n-              icon: Settings,\r\n-              onClick: handleResetPassword,\r\n-              className: 'text-orange-600 hover:text-orange-800',\r\n-            },\r\n-          ]}\r\n         />\r\n       </Card>\r\n \r\n       {/* Add/Edit Modal */}\r\n"
                },
                {
                    "date": 1759918578247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n   UserCheck, \r\n   UserX, \r\n   Shield,\r\n   Settings,\r\n-  Activity,\r\n   CheckCircle,\r\n   XCircle\r\n } from 'lucide-react';\r\n \r\n@@ -208,24 +207,8 @@\n       showSuccessNotification('Success', 'Staff member deleted successfully!');\r\n     }\r\n   };\r\n \r\n-  const handleToggleStatus = (staff: StaffControl) => {\r\n-    const newStatus = staff.status === 'active' ? 'suspended' : 'active';\r\n-    setStaffControls(\r\n-      staffControls.map((s) =>\r\n-        s.id === staff.id ? { ...s, status: newStatus } : s\r\n-      )\r\n-    );\r\n-    showSuccessNotification('Success', `Staff member ${newStatus === 'active' ? 'activated' : 'suspended'} successfully!`);\r\n-  };\r\n-\r\n-  const handleResetPassword = (staff: StaffControl) => {\r\n-    if (window.confirm(`Reset password for ${staff.name}?`)) {\r\n-      showSuccessNotification('Success', `Password reset email sent to ${staff.email}`);\r\n-    }\r\n-  };\r\n-\r\n   // Filter staff controls\r\n   const filteredStaffControls = useMemo(() => {\r\n     return staffControls.filter((staff) => {\r\n       const matchesSearch = filters.search === '' || \r\n"
                }
            ],
            "date": 1759910295637,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react';\r\nimport { Card } from '../../components/Card';\r\nimport { Modal } from '../../components/Modal';\r\nimport { FormInput } from '../../components/FormInput';\r\nimport { FormSelect } from '../../components/FormSelect';\r\nimport { DataTable } from '../../components/DataTable';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { useNotificationService } from '../../services/notificationService';\r\nimport { \r\n  Users, \r\n  Plus, \r\n  Search, \r\n  Filter, \r\n  Download, \r\n  UserCheck, \r\n  UserX, \r\n  Clock,\r\n  Shield,\r\n  Settings,\r\n  Activity,\r\n  AlertCircle,\r\n  CheckCircle,\r\n  XCircle\r\n} from 'lucide-react';\r\n\r\ninterface StaffControl {\r\n  id: string;\r\n  staffId: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  role: 'admin' | 'manager' | 'supervisor' | 'operator' | 'driver';\r\n  department: string;\r\n  status: 'active' | 'inactive' | 'suspended' | 'pending';\r\n  permissions: string[];\r\n  lastLogin?: string;\r\n  loginCount: number;\r\n  accessLevel: 'full' | 'limited' | 'readonly';\r\n  securityLevel: 'high' | 'medium' | 'low';\r\n  twoFactorEnabled: boolean;\r\n  passwordExpiry?: string;\r\n  notes?: string;\r\n}\r\n\r\nexport const StaffControlPage: React.FC = () => {\r\n  const { user } = useApp();\r\n  const { showSuccessNotification, showErrorNotification } = useNotificationService();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingStaff, setEditingStaff] = useState<StaffControl | null>(null);\r\n  \r\n  // Filter states\r\n  const [filters, setFilters] = useState({\r\n    search: '',\r\n    role: 'all',\r\n    status: 'all',\r\n    department: 'all',\r\n    accessLevel: 'all',\r\n  });\r\n\r\n  // Mock staff control data\r\n  const [staffControls, setStaffControls] = useState<StaffControl[]>([\r\n    {\r\n      id: '1',\r\n      staffId: 'STF-001',\r\n      name: 'John Admin',\r\n      email: 'john.admin@mwalimu.com',\r\n      phone: '+254 712 345678',\r\n      role: 'admin',\r\n      department: 'Management',\r\n      status: 'active',\r\n      permissions: ['all'],\r\n      lastLogin: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\r\n      loginCount: 156,\r\n      accessLevel: 'full',\r\n      securityLevel: 'high',\r\n      twoFactorEnabled: true,\r\n      passwordExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      notes: 'System administrator with full access',\r\n    },\r\n    {\r\n      id: '2',\r\n      staffId: 'STF-002',\r\n      name: 'Mary Manager',\r\n      email: 'mary.manager@mwalimu.com',\r\n      phone: '+254 723 456789',\r\n      role: 'manager',\r\n      department: 'Operations',\r\n      status: 'active',\r\n      permissions: ['read', 'write', 'approve'],\r\n      lastLogin: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\r\n      loginCount: 89,\r\n      accessLevel: 'limited',\r\n      securityLevel: 'medium',\r\n      twoFactorEnabled: false,\r\n      passwordExpiry: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\r\n      notes: 'Operations manager',\r\n    },\r\n    {\r\n      id: '3',\r\n      staffId: 'STF-003',\r\n      name: 'Peter Driver',\r\n      email: 'peter.driver@mwalimu.com',\r\n      phone: '+254 734 567890',\r\n      role: 'driver',\r\n      department: 'Transport',\r\n      status: 'active',\r\n      permissions: ['read'],\r\n      lastLogin: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\r\n      loginCount: 45,\r\n      accessLevel: 'readonly',\r\n      securityLevel: 'low',\r\n      twoFactorEnabled: false,\r\n      passwordExpiry: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n      notes: 'Transport driver',\r\n    },\r\n    {\r\n      id: '4',\r\n      staffId: 'STF-004',\r\n      name: 'Sarah Operator',\r\n      email: 'sarah.operator@mwalimu.com',\r\n      phone: '+254 745 678901',\r\n      role: 'operator',\r\n      department: 'Data Entry',\r\n      status: 'suspended',\r\n      permissions: ['read', 'write'],\r\n      lastLogin: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n      loginCount: 23,\r\n      accessLevel: 'limited',\r\n      securityLevel: 'medium',\r\n      twoFactorEnabled: true,\r\n      notes: 'Account suspended due to policy violation',\r\n    },\r\n  ]);\r\n\r\n  const [formData, setFormData] = useState<Omit<StaffControl, 'id' | 'staffId' | 'loginCount'>>({\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    role: 'operator',\r\n    department: '',\r\n    status: 'pending',\r\n    permissions: [],\r\n    accessLevel: 'readonly',\r\n    securityLevel: 'low',\r\n    twoFactorEnabled: false,\r\n    notes: '',\r\n  });\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      role: 'operator',\r\n      department: '',\r\n      status: 'pending',\r\n      permissions: [],\r\n      accessLevel: 'readonly',\r\n      securityLevel: 'low',\r\n      twoFactorEnabled: false,\r\n      notes: '',\r\n    });\r\n    setEditingStaff(null);\r\n  };\r\n\r\n  const handleOpenModal = (staff?: StaffControl) => {\r\n    if (staff) {\r\n      setEditingStaff(staff);\r\n      const { id, staffId, loginCount, ...staffData } = staff;\r\n      setFormData(staffData);\r\n    } else {\r\n      resetForm();\r\n    }\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    resetForm();\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    const newStaff = {\r\n      ...formData,\r\n      loginCount: 0,\r\n    };\r\n\r\n    if (editingStaff) {\r\n      setStaffControls(\r\n        staffControls.map((staff) =>\r\n          staff.id === editingStaff.id ? { ...newStaff, id: editingStaff.id, staffId: editingStaff.staffId } : staff\r\n        )\r\n      );\r\n      showSuccessNotification('Staff member updated successfully!');\r\n    } else {\r\n      const id = Date.now().toString();\r\n      const staffId = `STF-${String(staffControls.length + 1).padStart(3, '0')}`;\r\n      setStaffControls([...staffControls, { ...newStaff, id, staffId }]);\r\n      showSuccessNotification('Staff member added successfully!');\r\n    }\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleDelete = (staff: StaffControl) => {\r\n    if (window.confirm(`Are you sure you want to delete staff member ${staff.name}?`)) {\r\n      setStaffControls(staffControls.filter((s) => s.id !== staff.id));\r\n      showSuccessNotification('Staff member deleted successfully!');\r\n    }\r\n  };\r\n\r\n  const handleToggleStatus = (staff: StaffControl) => {\r\n    const newStatus = staff.status === 'active' ? 'suspended' : 'active';\r\n    setStaffControls(\r\n      staffControls.map((s) =>\r\n        s.id === staff.id ? { ...s, status: newStatus } : s\r\n      )\r\n    );\r\n    showSuccessNotification(`Staff member ${newStatus === 'active' ? 'activated' : 'suspended'} successfully!`);\r\n  };\r\n\r\n  const handleResetPassword = (staff: StaffControl) => {\r\n    if (window.confirm(`Reset password for ${staff.name}?`)) {\r\n      showSuccessNotification(`Password reset email sent to ${staff.email}`);\r\n    }\r\n  };\r\n\r\n  // Filter staff controls\r\n  const filteredStaffControls = useMemo(() => {\r\n    return staffControls.filter((staff) => {\r\n      const matchesSearch = filters.search === '' || \r\n        staff.name.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n        staff.email.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n        staff.staffId.toLowerCase().includes(filters.search.toLowerCase());\r\n      \r\n      const matchesRole = filters.role === 'all' || staff.role === filters.role;\r\n      const matchesStatus = filters.status === 'all' || staff.status === filters.status;\r\n      const matchesDepartment = filters.department === 'all' || staff.department === filters.department;\r\n      const matchesAccessLevel = filters.accessLevel === 'all' || staff.accessLevel === filters.accessLevel;\r\n\r\n      return matchesSearch && matchesRole && matchesStatus && matchesDepartment && matchesAccessLevel;\r\n    });\r\n  }, [staffControls, filters]);\r\n\r\n  const columns = [\r\n    {\r\n      key: 'staffId' as keyof StaffControl,\r\n      label: 'Staff ID',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'name' as keyof StaffControl,\r\n      label: 'Name',\r\n      render: (value: string, row: StaffControl) => (\r\n        <div>\r\n          <p className=\"font-medium text-gray-900 dark:text-gray-100\">{value}</p>\r\n          <p className=\"text-xs text-gray-500\">{row.email}</p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'role' as keyof StaffControl,\r\n      label: 'Role',\r\n      render: (value: string) => (\r\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n          value === 'admin' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200' :\r\n          value === 'manager' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-200' :\r\n          value === 'supervisor' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-200' :\r\n          value === 'operator' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\r\n          'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-200'\r\n        }`}>\r\n          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'status' as keyof StaffControl,\r\n      label: 'Status',\r\n      render: (value: string) => (\r\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n          value === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\r\n          value === 'suspended' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200' :\r\n          value === 'inactive' ? 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-200' :\r\n          'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200'\r\n        }`}>\r\n          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'accessLevel' as keyof StaffControl,\r\n      label: 'Access Level',\r\n      render: (value: string) => (\r\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n          value === 'full' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200' :\r\n          value === 'limited' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200' :\r\n          'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200'\r\n        }`}>\r\n          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'lastLogin' as keyof StaffControl,\r\n      label: 'Last Login',\r\n      render: (value: string) => value ? new Date(value).toLocaleDateString() : 'Never',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'twoFactorEnabled' as keyof StaffControl,\r\n      label: '2FA',\r\n      render: (value: boolean) => (\r\n        <div className=\"flex items-center\">\r\n          {value ? (\r\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n          ) : (\r\n            <XCircle className=\"h-4 w-4 text-red-500\" />\r\n          )}\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  // Calculate summary statistics\r\n  const summaryStats = useMemo(() => {\r\n    const totalStaff = staffControls.length;\r\n    const activeStaff = staffControls.filter(s => s.status === 'active').length;\r\n    const adminStaff = staffControls.filter(s => s.role === 'admin').length;\r\n    const twoFactorEnabled = staffControls.filter(s => s.twoFactorEnabled).length;\r\n    const suspendedStaff = staffControls.filter(s => s.status === 'suspended').length;\r\n\r\n    return {\r\n      totalStaff,\r\n      activeStaff,\r\n      adminStaff,\r\n      twoFactorEnabled,\r\n      suspendedStaff,\r\n    };\r\n  }, [staffControls]);\r\n\r\n  if (user?.role !== 'admin') {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <p className=\"text-xl text-red-500\">Access Denied: Admins only.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6 max-w-full overflow-hidden\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Staff Control</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Comprehensive staff management and access control system\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3\">\r\n          <button className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n            <Download className=\"h-4 w-4\" />\r\n            <span>Export</span>\r\n          </button>\r\n          <button\r\n            onClick={() => handleOpenModal()}\r\n            className=\"flex items-center space-x-2 px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n          >\r\n            <Plus className=\"h-4 w-4\" />\r\n            <span>Add Staff</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-blue-500 flex-shrink-0\">\r\n              <Users className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right min-w-0 flex-1\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Staff</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">{summaryStats.totalStaff}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-green-500 flex-shrink-0\">\r\n              <UserCheck className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right min-w-0 flex-1\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Active</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">{summaryStats.activeStaff}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-red-500 flex-shrink-0\">\r\n              <Shield className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right min-w-0 flex-1\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Admins</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">{summaryStats.adminStaff}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-purple-500 flex-shrink-0\">\r\n              <Settings className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right min-w-0 flex-1\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">2FA Enabled</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">{summaryStats.twoFactorEnabled}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-orange-500 flex-shrink-0\">\r\n              <UserX className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right min-w-0 flex-1\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Suspended</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">{summaryStats.suspendedStaff}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <Card className=\"p-4\">\r\n        <div className=\"flex items-center space-x-4 mb-4\">\r\n          <Filter className=\"h-5 w-5 text-gray-500\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Filters</h3>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search staff...\"\r\n              value={filters.search}\r\n              onChange={(e) => setFilters({ ...filters, search: e.target.value })}\r\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-bright-green focus:border-bright-green\"\r\n            />\r\n          </div>\r\n          \r\n          <FormSelect\r\n            label=\"Role\"\r\n            value={filters.role}\r\n            onChange={(value) => setFilters({ ...filters, role: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Roles' },\r\n              { value: 'admin', label: 'Admin' },\r\n              { value: 'manager', label: 'Manager' },\r\n              { value: 'supervisor', label: 'Supervisor' },\r\n              { value: 'operator', label: 'Operator' },\r\n              { value: 'driver', label: 'Driver' },\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Status\"\r\n            value={filters.status}\r\n            onChange={(value) => setFilters({ ...filters, status: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Status' },\r\n              { value: 'active', label: 'Active' },\r\n              { value: 'inactive', label: 'Inactive' },\r\n              { value: 'suspended', label: 'Suspended' },\r\n              { value: 'pending', label: 'Pending' },\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Department\"\r\n            value={filters.department}\r\n            onChange={(value) => setFilters({ ...filters, department: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Departments' },\r\n              { value: 'Management', label: 'Management' },\r\n              { value: 'Operations', label: 'Operations' },\r\n              { value: 'Transport', label: 'Transport' },\r\n              { value: 'Data Entry', label: 'Data Entry' },\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Access Level\"\r\n            value={filters.accessLevel}\r\n            onChange={(value) => setFilters({ ...filters, accessLevel: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Levels' },\r\n              { value: 'full', label: 'Full Access' },\r\n              { value: 'limited', label: 'Limited Access' },\r\n              { value: 'readonly', label: 'Read Only' },\r\n            ]}\r\n          />\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Data Table */}\r\n      <Card className=\"p-6 overflow-x-auto\">\r\n        <DataTable\r\n          data={filteredStaffControls}\r\n          columns={columns}\r\n          onEdit={handleOpenModal}\r\n          onDelete={handleDelete}\r\n          emptyMessage=\"No staff members found matching the current filters.\"\r\n          additionalActions={[\r\n            {\r\n              label: 'Toggle Status',\r\n              icon: Activity,\r\n              onClick: handleToggleStatus,\r\n              className: 'text-blue-600 hover:text-blue-800',\r\n            },\r\n            {\r\n              label: 'Reset Password',\r\n              icon: Settings,\r\n              onClick: handleResetPassword,\r\n              className: 'text-orange-600 hover:text-orange-800',\r\n            },\r\n          ]}\r\n        />\r\n      </Card>\r\n\r\n      {/* Add/Edit Modal */}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        title={editingStaff ? 'Edit Staff Member' : 'Add New Staff Member'}\r\n        size=\"xl\"\r\n      >\r\n        <div className=\"max-h-[80vh] overflow-y-auto\">\r\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n            {/* Basic Information */}\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Basic Information</h4>\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n                <FormInput\r\n                  label=\"Full Name\"\r\n                  type=\"text\"\r\n                  value={formData.name}\r\n                  onChange={(value) => setFormData({ ...formData, name: value as string })}\r\n                  required\r\n                />\r\n                \r\n                <FormInput\r\n                  label=\"Email\"\r\n                  type=\"email\"\r\n                  value={formData.email}\r\n                  onChange={(value) => setFormData({ ...formData, email: value as string })}\r\n                  required\r\n                />\r\n                \r\n                <FormInput\r\n                  label=\"Phone\"\r\n                  type=\"tel\"\r\n                  value={formData.phone}\r\n                  onChange={(value) => setFormData({ ...formData, phone: value as string })}\r\n                  required\r\n                />\r\n                \r\n                <FormInput\r\n                  label=\"Department\"\r\n                  type=\"text\"\r\n                  value={formData.department}\r\n                  onChange={(value) => setFormData({ ...formData, department: value as string })}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Role & Access */}\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Role & Access Control</h4>\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n                <FormSelect\r\n                  label=\"Role\"\r\n                  value={formData.role}\r\n                  onChange={(value) => setFormData({ ...formData, role: value as any })}\r\n                  options={[\r\n                    { value: 'admin', label: 'Administrator' },\r\n                    { value: 'manager', label: 'Manager' },\r\n                    { value: 'supervisor', label: 'Supervisor' },\r\n                    { value: 'operator', label: 'Operator' },\r\n                    { value: 'driver', label: 'Driver' },\r\n                  ]}\r\n                  required\r\n                />\r\n                \r\n                <FormSelect\r\n                  label=\"Status\"\r\n                  value={formData.status}\r\n                  onChange={(value) => setFormData({ ...formData, status: value as any })}\r\n                  options={[\r\n                    { value: 'active', label: 'Active' },\r\n                    { value: 'inactive', label: 'Inactive' },\r\n                    { value: 'suspended', label: 'Suspended' },\r\n                    { value: 'pending', label: 'Pending' },\r\n                  ]}\r\n                  required\r\n                />\r\n                \r\n                <FormSelect\r\n                  label=\"Access Level\"\r\n                  value={formData.accessLevel}\r\n                  onChange={(value) => setFormData({ ...formData, accessLevel: value as any })}\r\n                  options={[\r\n                    { value: 'full', label: 'Full Access' },\r\n                    { value: 'limited', label: 'Limited Access' },\r\n                    { value: 'readonly', label: 'Read Only' },\r\n                  ]}\r\n                  required\r\n                />\r\n                \r\n                <FormSelect\r\n                  label=\"Security Level\"\r\n                  value={formData.securityLevel}\r\n                  onChange={(value) => setFormData({ ...formData, securityLevel: value as any })}\r\n                  options={[\r\n                    { value: 'high', label: 'High Security' },\r\n                    { value: 'medium', label: 'Medium Security' },\r\n                    { value: 'low', label: 'Low Security' },\r\n                  ]}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Security Settings */}\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Security Settings</h4>\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={formData.twoFactorEnabled}\r\n                    onChange={(e) => setFormData({ ...formData, twoFactorEnabled: e.target.checked })}\r\n                    className=\"h-4 w-4 text-bright-green rounded border-gray-300 focus:ring-bright-green\"\r\n                  />\r\n                  <label className=\"text-sm text-gray-700 dark:text-gray-300\">Enable Two-Factor Authentication</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Notes */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Notes\r\n              </label>\r\n              <textarea\r\n                value={formData.notes || ''}\r\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\r\n                className=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                rows={3}\r\n                placeholder=\"Additional notes about this staff member...\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex justify-end space-x-3\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleCloseModal}\r\n                className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n              >\r\n                {editingStaff ? 'Update Staff Member' : 'Create Staff Member'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}