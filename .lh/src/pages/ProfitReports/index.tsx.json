{
    "sourceFile": "src/pages/ProfitReports/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1759587377902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759587401681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \r\n   // Calculate mock destination records (in real app, this would come from context)\r\n   const destinationRecords = useMemo(() => [\r\n     { id: '1', trackingNo: 'TRIP-001', destination: 'Nairobi', buyer: 'John Doe', quantitySold: 50, itemPrice: 800, totalRevenue: 40000, date: '2024-01-15' },\r\n-    { id: '2', trackingNo. 'TRIP-002', destination: 'Mombasa', buyer: 'Jane Smith', quantitySold: 75, itemPrice: 700, totalRevenue: 52500, date: '2024-01-14' },\r\n+    { id: '2', trackingNo: 'TRIP-002', destination: 'Mombasa', buyer: 'Jane Smith', quantitySold: 75, itemPrice: 700, totalRevenue: 52500, date: '2024-01-14' },\r\n     { id: '3', trackingNo: 'TRIP-003', destination: 'Garissa', buyer: 'Bob Johnson', quantitySold: 30, itemPrice: 650, totalRevenue: 19500, date: '2024-01-13' },\r\n     { id: '4', trackingNo: 'TRIP-004', destination: 'Meru', buyer: 'Alice Brown', quantitySold: 40, itemPrice: 750, totalRevenue: 30000, date: '2024-01-12' },\r\n     { id: '5', trackingNo: 'TRIP-005', destination: 'Nairobi', buyer: 'Charlie Wilson', quantitySold: 60, itemPrice: 850, totalRevenue: 51000, date: '2024-01-11' },\r\n   ], []);\r\n"
                },
                {
                    "date": 1759587422665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n           \r\n           <select \r\n             value={selectedView} \r\n             onChange={(e) => setSelectedView(e.target.value as any)}\r\n-            className=\"px-3 py-2 border border-gray-300 dark:cart-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n+            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n           >\r\n             <option value=\"overview\">Overview</option>\r\n             <option value=\"pickup-analysis\">Pickup Analysis</option>\r\n             <option value=\"monthly-trends\">Monthly Trends</option>\r\n@@ -342,9 +342,9 @@\n           </Card>\r\n         </>\r\n       )}\r\n \r\n-      {selected ): 'toggle' | 'monthly-trends'>('pickup-analysis') && (\r\n+      {selectedView === 'pickup-analysis' && (\r\n         <>\r\n           {/* Pickup Point Analysis */}\r\n           <Card className=\"p-6\">\r\n             <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Pickup Point Analysis</h3>\r\n"
                },
                {
                    "date": 1759587599747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useMemo } from 'react';\r\n import { useApp } from '../../context/AppContext';\r\n import { Card } from '../../components/Card';\r\n-import { formatCurrency, formatDate, getProfitMargin } from '../../utils/helpers';\r\n+import { formatCurrency, formatDate } from '../../utils/helpers';\r\n import { \r\n   TrendingUp, \r\n   TrendingDown, \r\n   BarChart3, \r\n@@ -11,9 +11,15 @@\n   AlertTriangle,\r\n   Target,\r\n   Activity,\r\n   Package,\r\n-  MapPin\r\n+  MapPin,\r\n+  Calendar,\r\n+  Filter,\r\n+  Download,\r\n+  RefreshCw,\r\n+  ChevronRight,\r\n+  ChevronDown\r\n } from 'lucide-react';\r\n \r\n interface ProfitAnalysis {\r\n   pickupPoint: string;\r\n"
                },
                {
                    "date": 1759587606626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,18 @@\n   profit: number;\r\n   margin: number;\r\n   avgCostPerKg: number;\r\n   avgRevenuePerKg: number;\r\n+  efficiency: number;\r\n+  growth: number;\r\n }\r\n \r\n+// Helper function for profit margin calculation\r\n+const getProfitMargin = (cost: number, revenue: number): number => {\r\n+  if (cost === 0) return 0;\r\n+  return ((revenue - cost) / revenue) * 100;\r\n+};\r\n+\r\n interface MonthlyData {\r\n   month: string;\r\n   profit: number;\r\n   cost: number;\r\n"
                },
                {
                    "date": 1759587621179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,33 +61,56 @@\n     { id: '4', trackingNo: 'TRIP-004', destination: 'Meru', buyer: 'Alice Brown', quantitySold: 40, itemPrice: 750, totalRevenue: 30000, date: '2024-01-12' },\r\n     { id: '5', trackingNo: 'TRIP-005', destination: 'Nairobi', buyer: 'Charlie Wilson', quantitySold: 60, itemPrice: 850, totalRevenue: 51000, date: '2024-01-11' },\r\n   ], []);\r\n \r\n-  // Calculate profit analysis\r\n+  // Calculate profit analysis with enhanced metrics\r\n   const profitAnalysis = useMemo(() => {\r\n     const analysis: ProfitAnalysis[] = [];\r\n     \r\n     ['A', 'B', 'C', 'D'].forEach(point => {\r\n       const records = sourceRecords.filter(r => r.pickupPoint === point);\r\n-      if (records.length === 0) return;\r\n+      if (records.length === 0) {\r\n+        // Add placeholder for inactive points\r\n+        analysis.push({\r\n+          pickupPoint: `Point ${point}`,\r\n+          totalRecords: 0,\r\n+          totalCost: 0,\r\n+          totalRevenue: 0,\r\n+          profit: 0,\r\n+          margin: 0,\r\n+          avgCostPerKg: 0,\r\n+          avgRevenuePerKg: 0,\r\n+          efficiency: 0,\r\n+          growth: 0,\r\n+        });\r\n+        return;\r\n+      }\r\n       \r\n       const totalCost = records.reduce((sum, record) => sum + record.totalCost, 0);\r\n       const totalRecords = records.length;\r\n       const totalQuantity = records.reduce((sum, record) => sum + record.quantitySold, 0);\r\n       \r\n-      // Mock revenue (in real app, calculate from destination records)\r\n-      const avgSellingPrice = 750; // Mock price\r\n+      // Mock revenue with varying prices based on point\r\n+      const avgSellingPrice = 750 + (point.charCodeAt(0) - 65) * 50; // A=750, B=800, C=850, D=900\r\n       const totalRevenue = totalQuantity * avgSellingPrice;\r\n       \r\n+      // Calculate efficiency (profit per trip)\r\n+      const efficiency = totalCost > 0 ? (totalRevenue - totalCost) / totalRecords : 0;\r\n+      \r\n+      // Mock growth (in real app, compare with previous period)\r\n+      const growth = 15 + Math.random() * 30; // Random growth between 15-45%\r\n+      \r\n       analysis.push({\r\n         pickupPoint: `Point ${point}`,\r\n         totalRecords,\r\n         totalCost,\r\n         totalRevenue,\r\n         profit: totalRevenue - totalCost,\r\n         margin: getProfitMargin(totalCost, totalRevenue),\r\n-        avgCostPerKg: totalCost / totalQuantity,\r\n-        avgRevenuePerKg: totalRevenue / totalQuantity,\r\n+        avgCostPerKg: totalQuantity > 0 ? totalCost / totalQuantity : 0,\r\n+        avgRevenuePerKg: totalQuantity > 0 ? totalRevenue / totalQuantity : 0,\r\n+        efficiency,\r\n+        growth,\r\n       });\r\n     });\r\n     \r\n     return analysis.sort((a, b) => b.profit - a.profit);\r\n"
                },
                {
                    "date": 1759587651824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,76 +200,77 @@\n           </select>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Key Metrics */}\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n-        <Card className=\"p-6\">\r\n-          <div className=\"flex items-center\">\r\n-            <div className=\"p-3 rounded-lg bg-green-500\">\r\n-              <DollarSign className=\"h-6 w-6 text-white\" />\r\n+      {/* Compact Key Metrics */}\r\n+      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n+        <Card className=\"p-4\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div className=\"p-2 rounded-lg bg-green-500\">\r\n+              <DollarSign className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"ml-4\">\r\n-              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Revenue</p>\r\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n-                {formatCurrency(totalMetrics.totalRevenue)}\r\n+            <div className=\"text-right\">\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Revenue</p>\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+                {(totalMetrics.totalRevenue / 1000).toFixed(0)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-4\">\r\n-            <p className=\"text-xs text-green-600 dark:text-green-400\">+12.5% from last month</p>\r\n+          <div className=\"mt-2 flex items-center text-xs text-green-600\">\r\n+            <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n+            +12.5%\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-6\">\r\n-          <div className=\"flex items-center\">\r\n-            <div className=\"p-3 rounded-lg bg-red-500\">\r\n-              <Package className=\"h-6 w-6 text-white\" />\r\n+        <Card className=\"p-4\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div className=\"p-2 rounded-lg bg-red-500\">\r\n+              <Package className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"ml-4\">\r\n-              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Costs</p>\r\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n-                {formatCurrency(totalMetrics.totalCost)}\r\n+            <div className=\"text-right\">\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Costs</p>\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+                {(totalMetrics.totalCost / 1000).toFixed(0)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-4\">\r\n-            <p className=\"text-xs text-red-600 dark:text-red-400\">-5.2% from last month</p>\r\n+          <div className=\"mt-2 flex items-center text-xs text-red-600\">\r\n+            <TrendingDown className=\"h-3 w-3 mr-1\" />\r\n+            -5.2%\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-6\">\r\n-          <div className=\"flex items-center\">\r\n-            <div className=\"p-3 rounded-lg bg-blue-500\">\r\n-              <TrendingUp className=\"h-6 w-6 text-white\" />\r\n+        <Card className=\"p-4\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div className=\"p-2 rounded-lg bg-blue-500\">\r\n+              <Target className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"ml-4\">\r\n-              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Net Profit</p>\r\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n-                {formatCurrency(totalMetrics.totalProfit)}\r\n+            <div className=\"text-right\">\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Profit</p>\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+                {(totalMetrics.totalProfit / 1000).toFixed(0)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-4\">\r\n-            <p className=\"text-xs text-blue-600 dark:text-blue-400\">{totalMetrics.profitMargin.toFixed(1)}% margin</p>\r\n+          <div className=\"mt-2 flex items-center text-xs text-blue-600\">\r\n+            <Activity className=\"h-3 w-3 mr-1\" />\r\n+            {totalMetrics.profitMargin.toFixed(1)}%\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-6\">\r\n-          <div className=\"flex items-center\">\r\n-            <div className=\"p-3 rounded-lg bg-yellow-500\">\r\n-              <Target className=\"h-6 w-6 text-white\" />\r\n+        <Card className=\"p-4\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div className=\"p-2 rounded-lg bg-purple-500\">\r\n+              <BarChart3 className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"ml-4\">\r\n-              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Avg Profit/Trip</p>\r\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n-                {formatCurrency(totalMetrics.avgProfitPerTrip)}\r\n+            <div className=\"text-right\">\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Avg/Trip</p>\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+                {(totalMetrics.avgProfitPerTrip / 1000).toFixed(1)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-4\">\r\n-            <p className=\"text-xs text-yellow-600 dark:text-yellow-400\">Per delivery</p>\r\n-          </div>\r\n+          <div className=\"mt-2 text-xs text-purple-600\">Per delivery</div>\r\n         </Card>\r\n       </div>\r\n \r\n       {selectedView === 'overview' && (\r\n"
                },
                {
                    "date": 1759587700051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,10 +274,10 @@\n       </div>\r\n \r\n       {selectedView === 'overview' && (\r\n         <>\r\n-          {/* Performance Overview */}\r\n-          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n+          {/* Compact Performance Grid */}\r\n+          <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-4\">\r\n             {/* Best/Worst Performers */}\r\n             <Card className=\"lg:col-span-1 p-6\">\r\n               <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Performance Summary</h3>\r\n               <div className=\"space-y-4\">\r\n"
                },
                {
                    "date": 1759587744780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,64 +382,102 @@\n       )}\r\n \r\n       {selectedView === 'pickup-analysis' && (\r\n         <>\r\n-          {/* Pickup Point Analysis */}\r\n-          <Card className=\"p-6\">\r\n-            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Pickup Point Analysis</h3>\r\n-            <div className=\"space-y-4\">\r\n-              {profitAnalysis.map((analysis) => (\r\n-                <div key={analysis.pickupPoint} className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\r\n-                  <div className=\"flex items-center justify-between mb-3\">\r\n-                    <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">{analysis.pickupPoint}</h4>\r\n-                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n-                      analysis.margin >= 30 \r\n-                        ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200'\r\n-                        : analysis.margin >= 20 \r\n-                        ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200'\r\n-                        : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200'\r\n-                    }`}>\r\n-                      {analysis.margin.toFixed(1)}% Margin\r\n+          {/* Enhanced Pickup Analysis */}\r\n+          <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-4\">\r\n+            {/* Pickup Performance Table */}\r\n+            <Card className=\"p-4\">\r\n+              <div className=\"flex items-center justify-between mb-3\">\r\n+                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Performance Analysis</h3>\r\n+                <Download className=\"h-4 w-4 text-gray-400 cursor-pointer\" />\r\n+              </div>\r\n+              <div className=\"overflow-x-auto\">\r\n+                <table className=\"w-full text-sm\">\r\n+                  <thead>\r\n+                    <tr className=\"border-b border-gray-200 dark:border-gray-600\">\r\n+                      <th className=\"text-left py-2 text-gray-500 dark:text-gray-400\">Point</th>\r\n+                      <th className=\"text-right py-2 text-gray-500 dark:text-gray-400\">Trips</th>\r\n+                      <th className=\"text-right py-2 text-gray-500 dark:text-gray-400\">Revenue</th>\r\n+                      <th className=\"text-right py-2 text-gray-500 dark:text-gray-400\">Profit</th>\r\n+                      <th className=\"text-right py-2 text-gray-500 dark:text-gray-400\">Margin</th>\r\n+                      <th className=\"text-right py-2 text-gray-500 dark:text-gray-400\">Growth</th>\r\n+                    </tr>\r\n+                  </thead>\r\n+                  <tbody>\r\n+                    {profitAnalysis.map((analysis) => (\r\n+                      <tr key={analysis.pickupPoint} className=\"border-b border-gray-100 dark:border-gray-700\">\r\n+                        <td className=\"py-2 font-medium text-gray-900 dark:text-gray-100\">{analysis.pickupPoint}</td>\r\n+                        <td className=\"py-2 text-right text-gray-900 dark:text-gray-100\">{analysis.totalRecords}</td>\r\n+                        <td className=\"py-2 text-right text-gray-900 dark:text-gray-100\">{(analysis.totalRevenue / 1000).toFixed(1)}K</td>\r\n+                        <td className={`py-2 text-right font-medium ${analysis.profit > 0 ? 'text-green-600' : analysis.profit === 0 ? 'text-gray-600' : 'text-red-600'}`}>\r\n+                          {analysis.profit > 0 ? '+' : ''}{(analysis.profit / 1000).toFixed(1)}K\r\n+                        </td>\r\n+                        <td className=\"py-2 text-right\">\r\n+                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n+                            analysis.margin >= 30 ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\r\n+                            analysis.margin >= 20 ? 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-200' :\r\n+                            analysis.margin > 0 ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200' :\r\n+                            'bg-gray-100 text-gray-600 dark:bg-gray-900/20 dark:text-gray-400'\r\n+                          }`}>\r\n+                            {analysis.margin.toFixed(1)}%\r\n+                          </span>\r\n+                        </td>\r\n+                        <td className=\"py-2 text-right\">\r\n+                          <div className=\"flex items-center justify-end space-x-1\">\r\n+                            {analysis.growth > 0 ? (\r\n+                              <TrendingUp className=\"h-3 w-3 text-green-500\" />\r\n+                            ) : (\r\n+                              <TrendingDown className=\"h-3 w-3 text-red-500\" />\r\n+                            )}\r\n+                            <span className={analysis.growth > 0 ? 'text-green-600' : 'text-red-600'}>\r\n+                              +{analysis.growth.toFixed(1)}%\r\n+                            </span>\r\n+                          </div>\r\n+                        </td>\r\n+                      </tr>\r\n+                    ))}\r\n+                  </tbody>\r\n+                </table>\r\n+              </div>\r\n+            </Card>\r\n+\r\n+            {/* Efficiency Metrics */}\r\n+            <Card className=\"p-4\">\r\n+              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Efficiency Metrics</h3>\r\n+              <div className=\"space-y-3\">\r\n+                {profitAnalysis.filter(a => a.totalRecords > 0).map((analysis) => (\r\n+                  <div key={analysis.pickupPoint} className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n+                    <div className=\"flex items-center justify-between mb-2\">\r\n+                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">{analysis.pickupPoint}</span>\r\n+                      <span className=\"text-xs text-gray-500\">{analysis.totalRecords} trips</span>\r\n                     </div>\r\n-                  </div>\r\n-                  \r\n-                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n-                    <div>\r\n-                      <p className=\"text-gray-500 dark:text-gray-400\">Trips</p>\r\n-                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{analysis.totalRecords}</p>\r\n+                    \r\n+                    <div className=\"space-y-2 text-xs\">\r\n+                      <div className=\"flex justify-between\">\r\n+                        <span className=\"text-gray-500\">Cost/kg:</span>\r\n+                        <span className=\"font-medium\">{formatCurrency(analysis.avgCostPerKg)}</span>\r\n+                      </div>\r\n+                      <div className=\"flex justify-between\">\r\n+                        <span className=\"text-gray-500\">Revenue/kg:</span>\r\n+                        <span className=\"font-medium\">{formatCurrency(analysis.avgRevenuePerKg)}</span>\r\n+                      </div>\r\n+                      <div className=\"flex justify-between\">\r\n+                        <span className=\"text-gray-500\">Profit/trip:</span>\r\n+                        <span className=\"font-medium text-green-600\">{formatCurrency(analysis.efficiency)}</span>\r\n+                      </div>\r\n+                      <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-1.5 mt-2\">\r\n+                        <div \r\n+                          className=\"bg-gradient-to-r from-red-400 via-yellow-400 to-green-500 h-1.5 rounded-full transition-all duration-300\"\r\n+                          style={{ width: `${Math.min(100, Math.max(0, analysis.margin))}%` }}\r\n+                        ></div>\r\n+                      </div>\r\n                     </div>\r\n-                    <div>\r\n-                      <p className=\"text-gray-500 dark:text-gray-400\">Total Cost</p>\r\n-                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(analysis.totalCost)}</p>\r\n-                    </div>\r\n-                    <div>\r\n-                      <p className=\"text-gray-500 dark:text-gray-400\">Revenue</p>\r\n-                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(analysis.totalRevenue)}</p>\r\n-                    </div>\r\n-                    <div>\r\n-                      <p className=\"text-gray-500 dark:text-gray-400\">Profit</p>\r\n-                      <p className={`font-medium ${analysis.profit > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n-                        {formatCurrency(analysis.profit)}\r\n-                      </p>\r\n-                    </div>\r\n                   </div>\r\n-                  \r\n-                  <div className=\"mt-3\">\r\n-                    <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\r\n-                      <span>Avg Cost: {formatCurrency(analysis.avgCostPerKg)}/kg</span>\r\n-                      <span>Avg Revenue: {formatCurrency(analysis.avgRevenuePerKg)}/kg</span>\r\n-                    </div>\r\n-                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n-                      <div \r\n-                        className=\"bg-gradient-to-r from-red-500 to-green-500 h-2 rounded-full\"\r\n-                        style={{ width: `${Math.min(100, Math.max(0, analysis.margin))}%` }}\r\n-                      ></div>\r\n-                    </div>\r\n-                  </div>\r\n-                </div>\r\n-              ))}\r\n-            </div>\r\n-          </Card>\r\n+                ))}\r\n+              </div>\r\n+            </Card>\r\n+          </div>\r\n         </>\r\n       )}\r\n \r\n       {selectedView === 'monthly-trends' && (\r\n"
                },
                {
                    "date": 1759587778004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,19 @@\n import React, { useState, useMemo } from 'react';\r\n import { useApp } from '../../context/AppContext';\r\n import { Card } from '../../components/Card';\r\n-import { formatCurrency, formatDate } from '../../utils/helpers';\r\n+import { formatCurrency } from '../../utils/helpers';\r\n import { \r\n   TrendingUp, \r\n   TrendingDown, \r\n   BarChart3, \r\n-  PieChart, \r\n   DollarSign,\r\n   AlertTriangle,\r\n   Target,\r\n   Activity,\r\n   Package,\r\n   MapPin,\r\n-  Calendar,\r\n-  Filter,\r\n-  Download,\r\n-  RefreshCw,\r\n-  ChevronRight,\r\n-  ChevronDown\r\n+  Download\r\n } from 'lucide-react';\r\n \r\n interface ProfitAnalysis {\r\n   pickupPoint: string;\r\n"
                },
                {
                    "date": 1759587793983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState, useMemo } from 'react';\r\n import { useApp } from '../../context/AppContext';\r\n import { Card } from '../../components/Card';\r\n+import { MonthlyTrends } from '../MonthlyTrends';\r\n import { formatCurrency } from '../../utils/helpers';\r\n import { \r\n   TrendingUp, \r\n   TrendingDown, \r\n"
                },
                {
                    "date": 1759587812013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,47 +475,9 @@\n         </>\r\n       )}\r\n \r\n       {selectedView === 'monthly-trends' && (\r\n-        <>\r\n-          {/* Monthly Trends */}\r\n-          <Card className=\"p-6\">\r\n-            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Monthly Profits Trend</h3>\r\n-            <div className=\"space-y-4\">\r\n-              {monthlyData.map((month, index) => (\r\n-                <div key={month.month} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n-                  <div className=\"flex items-center space-x-4\">\r\n-                    <div className=\"text-sm font-medium text-gray-500 dark:text-gray-400 w-12\">\r\n-                      {month.month}\r\n-                    </div>\r\n-                    <div className=\"flex items-center space-x-2\">\r\n-                      {month.trend === 'up' && <TrendingUp className=\"h-4 w-4 text-green-600\" />}\r\n-                      {month.trend === 'down' && <TrendingDown className=\"h-4 w-4 text-red-600\" />}\r\n-                      {month.trend === 'stable' && <Activity className=\"h-4 w-4 text-gray-600\" />}\r\n-                    </div>\r\n-                  </div>\r\n-                  \r\n-                  <div className=\"flex items-center space-x-6 text-sm\">\r\n-                    <div className=\"text-right\">\r\n-                      <p className=\"text-gray-500 dark:text-gray-400\">Costs</p>\r\n-                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(month.cost)}</p>\r\n-                    </div>\r\n-                    <div className=\"text-right\">\r\n-                      <p className=\"text-gray-500 dark:text-gray-400\">Revenue</p>\r\n-                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(month.revenue)}</p>\r\n-                    </div>\r\n-                    <div className=\"text-right\">\r\n-                      <p className=\"text-gray-500 dark:text-gray-400\">Profit</p>\r\n-                      <p className={`font-medium ${month.profit > 40000 ? 'text-green-600' : 'text-orange-600'}`}>\r\n-                        {formatCurrency(month.profit)}\r\n-                      </p>\r\n-                    </div>\r\n-                  </div>\r\n-                </div>\r\n-              ))}\r\n-            </div>\r\n-          </Card>\r\n-        </>\r\n+        <MonthlyTrends monthlyData={monthlyData} />\r\n       )}\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1759904599473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,14 +199,14 @@\n       {/* Compact Key Metrics */}\r\n       <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n         <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-green-500\">\r\n+            <div className=\"p-2 rounded-lg bg-green-500 flex-shrink-0\">\r\n               <DollarSign className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"text-right\">\r\n+            <div className=\"text-right min-w-0 flex-1\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Revenue</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n                 {(totalMetrics.totalRevenue / 1000).toFixed(0)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n@@ -217,14 +217,14 @@\n         </Card>\r\n \r\n         <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-red-500\">\r\n+            <div className=\"p-2 rounded-lg bg-red-500 flex-shrink-0\">\r\n               <Package className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"text-right\">\r\n+            <div className=\"text-right min-w-0 flex-1\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Costs</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n                 {(totalMetrics.totalCost / 1000).toFixed(0)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n@@ -235,14 +235,14 @@\n         </Card>\r\n \r\n         <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-blue-500\">\r\n+            <div className=\"p-2 rounded-lg bg-blue-500 flex-shrink-0\">\r\n               <Target className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"text-right\">\r\n+            <div className=\"text-right min-w-0 flex-1\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Profit</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n                 {(totalMetrics.totalProfit / 1000).toFixed(0)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n@@ -253,14 +253,14 @@\n         </Card>\r\n \r\n         <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-purple-500\">\r\n+            <div className=\"p-2 rounded-lg bg-purple-500 flex-shrink-0\">\r\n               <BarChart3 className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n-            <div className=\"text-right\">\r\n+            <div className=\"text-right min-w-0 flex-1\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Avg/Trip</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n+              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n                 {(totalMetrics.avgProfitPerTrip / 1000).toFixed(1)}K\r\n               </p>\r\n             </div>\r\n           </div>\r\n"
                },
                {
                    "date": 1759907993485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n   // Calculate profit analysis with enhanced metrics\r\n   const profitAnalysis = useMemo(() => {\r\n     const analysis: ProfitAnalysis[] = [];\r\n     \r\n-    ['A', 'B', 'C', 'D'].forEach(point => {\r\n-      const records = sourceRecords.filter(r => r.pickupPoint === point);\r\n+    ['AC001', 'AC002', 'AC003', 'AC004', 'AC005'].forEach(areaCode => {\r\n+      const records = sourceRecords.filter(r => r.areaCode === areaCode);\r\n       if (records.length === 0) {\r\n         // Add placeholder for inactive points\r\n         analysis.push({\r\n           pickupPoint: `Point ${point}`,\r\n"
                },
                {
                    "date": 1759908029851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n       const records = sourceRecords.filter(r => r.areaCode === areaCode);\r\n       if (records.length === 0) {\r\n         // Add placeholder for inactive points\r\n         analysis.push({\r\n-          pickupPoint: `Point ${point}`,\r\n+          pickupPoint: `Area ${areaCode}`,\r\n           totalRecords: 0,\r\n           totalCost: 0,\r\n           totalRevenue: 0,\r\n           profit: 0,\r\n@@ -83,10 +83,10 @@\n       const totalCost = records.reduce((sum, record) => sum + record.totalCost, 0);\r\n       const totalRecords = records.length;\r\n       const totalQuantity = records.reduce((sum, record) => sum + record.quantitySold, 0);\r\n       \r\n-      // Mock revenue with varying prices based on point\r\n-      const avgSellingPrice = 750 + (point.charCodeAt(0) - 65) * 50; // A=750, B=800, C=850, D=900\r\n+      // Mock revenue with varying prices based on area code\r\n+      const avgSellingPrice = 750 + (areaCode.charCodeAt(4) - 48) * 50; // AC001=750, AC002=800, AC003=850, AC004=900, AC005=950\r\n       const totalRevenue = totalQuantity * avgSellingPrice;\r\n       \r\n       // Calculate efficiency (profit per trip)\r\n       const efficiency = totalCost > 0 ? (totalRevenue - totalCost) / totalRecords : 0;\r\n@@ -94,9 +94,9 @@\n       // Mock growth (in real app, compare with previous period)\r\n       const growth = 15 + Math.random() * 30; // Random growth between 15-45%\r\n       \r\n       analysis.push({\r\n-        pickupPoint: `Point ${point}`,\r\n+        pickupPoint: `Area ${areaCode}`,\r\n         totalRecords,\r\n         totalCost,\r\n         totalRevenue,\r\n         profit: totalRevenue - totalCost,\r\n"
                },
                {
                    "date": 1759912143003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n-import React, { useState, useMemo } from 'react';\r\n+import React, { useState, useMemo, useEffect } from 'react';\r\n import { useApp } from '../../context/AppContext';\r\n import { Card } from '../../components/Card';\r\n import { MonthlyTrends } from '../MonthlyTrends';\r\n-import { formatCurrency } from '../../utils/helpers';\r\n+import { formatCurrency, formatDate } from '../../utils/helpers';\r\n+import { useNotificationService } from '../../services/notificationService';\r\n import { \r\n   TrendingUp, \r\n   TrendingDown, \r\n   BarChart3, \r\n@@ -12,13 +13,45 @@\n   Target,\r\n   Activity,\r\n   Package,\r\n   MapPin,\r\n-  Download\r\n+  Download,\r\n+  Filter,\r\n+  Calendar,\r\n+  RefreshCw,\r\n+  Settings,\r\n+  Eye,\r\n+  FileText,\r\n+  PieChart,\r\n+  LineChart,\r\n+  Users,\r\n+  Truck,\r\n+  Clock,\r\n+  CheckCircle,\r\n+  XCircle,\r\n+  Zap,\r\n+  Award,\r\n+  TrendingUp as TrendingUpIcon,\r\n+  TrendingDown as TrendingDownIcon,\r\n+  ArrowUpRight,\r\n+  ArrowDownRight,\r\n+  Minus,\r\n+  Plus,\r\n+  Search,\r\n+  MoreHorizontal,\r\n+  Edit,\r\n+  Trash2,\r\n+  Save,\r\n+  Upload,\r\n+  Database,\r\n+  Cloud,\r\n+  Wifi,\r\n+  WifiOff\r\n } from 'lucide-react';\r\n \r\n interface ProfitAnalysis {\r\n   pickupPoint: string;\r\n+  areaCode: string;\r\n   totalRecords: number;\r\n   totalCost: number;\r\n   totalRevenue: number;\r\n   profit: number;\r\n@@ -26,10 +59,86 @@\n   avgCostPerKg: number;\r\n   avgRevenuePerKg: number;\r\n   efficiency: number;\r\n   growth: number;\r\n+  lastUpdated: string;\r\n+  status: 'active' | 'inactive' | 'warning' | 'critical';\r\n+  trends: {\r\n+    profit: 'up' | 'down' | 'stable';\r\n+    revenue: 'up' | 'down' | 'stable';\r\n+    cost: 'up' | 'down' | 'stable';\r\n+  };\r\n+  kpis: {\r\n+    roi: number;\r\n+    costEfficiency: number;\r\n+    revenueGrowth: number;\r\n+    marketShare: number;\r\n+  };\r\n }\r\n \r\n+interface PerformanceMetrics {\r\n+  totalRevenue: number;\r\n+  totalCost: number;\r\n+  totalProfit: number;\r\n+  profitMargin: number;\r\n+  avgProfitPerTrip: number;\r\n+  totalTrips: number;\r\n+  avgRevenuePerTrip: number;\r\n+  avgCostPerTrip: number;\r\n+  efficiency: number;\r\n+  growthRate: number;\r\n+  lastUpdated: string;\r\n+  dataQuality: 'excellent' | 'good' | 'fair' | 'poor';\r\n+  realTimeSync: boolean;\r\n+}\r\n+\r\n+interface DestinationPerformance {\r\n+  destination: string;\r\n+  totalTrips: number;\r\n+  totalRevenue: number;\r\n+  totalCost: number;\r\n+  profit: number;\r\n+  margin: number;\r\n+  avgPricePerKg: number;\r\n+  topBuyers: Array<{\r\n+    name: string;\r\n+    totalPurchases: number;\r\n+    lastPurchase: string;\r\n+  }>;\r\n+  trends: {\r\n+    revenue: 'up' | 'down' | 'stable';\r\n+    volume: 'up' | 'down' | 'stable';\r\n+  };\r\n+}\r\n+\r\n+interface DriverPerformance {\r\n+  driverId: string;\r\n+  driverName: string;\r\n+  totalTrips: number;\r\n+  totalRevenue: number;\r\n+  totalCost: number;\r\n+  profit: number;\r\n+  efficiency: number;\r\n+  avgTripTime: number;\r\n+  reliability: number;\r\n+  rating: number;\r\n+  lastTrip: string;\r\n+}\r\n+\r\n+interface VehiclePerformance {\r\n+  vehicleReg: string;\r\n+  vehicleModel: string;\r\n+  totalTrips: number;\r\n+  totalRevenue: number;\r\n+  totalCost: number;\r\n+  profit: number;\r\n+  efficiency: number;\r\n+  maintenanceCost: number;\r\n+  fuelEfficiency: number;\r\n+  utilization: number;\r\n+  lastService: string;\r\n+}\r\n+\r\n // Helper function for profit margin calculation\r\n const getProfitMargin = (cost: number, revenue: number): number => {\r\n   if (cost === 0) return 0;\r\n   return ((revenue - cost) / revenue) * 100;\r\n@@ -43,31 +152,88 @@\n   trend: 'up' | 'down' | 'stable';\r\n }\r\n \r\n export const ProfitReportsPage: React.FC = () => {\r\n-  const { sourceRecords, user } = useApp();\r\n+  const { sourceRecords, user, transportLogs, destinationRecords } = useApp();\r\n+  const { showSuccessNotification, showErrorNotification } = useNotificationService();\r\n+  \r\n+  // Enhanced state management\r\n   const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\r\n-  const [selectedView, setSelectedView] = useState<'overview' | 'pickup-analysis' | 'monthly-trends'>('overview');\r\n+  const [selectedView, setSelectedView] = useState<'overview' | 'pickup-analysis' | 'monthly-trends' | 'driver-performance' | 'vehicle-performance' | 'destination-analysis'>('overview');\r\n+  const [selectedDateRange, setSelectedDateRange] = useState<{ start: string; end: string }>({\r\n+    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n+    end: new Date().toISOString().split('T')[0]\r\n+  });\r\n+  const [filters, setFilters] = useState({\r\n+    areaCode: 'all',\r\n+    destination: 'all',\r\n+    driver: 'all',\r\n+    vehicle: 'all',\r\n+    status: 'all'\r\n+  });\r\n+  const [isRealTimeSync, setIsRealTimeSync] = useState(true);\r\n+  const [isExporting, setIsExporting] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [autoRefresh, setAutoRefresh] = useState(false);\r\n+  const [dataQuality, setDataQuality] = useState<'excellent' | 'good' | 'fair' | 'poor'>('good');\r\n \r\n-  // Calculate mock destination records (in real app, this would come from context)\r\n-  const destinationRecords = useMemo(() => [\r\n-    { id: '1', trackingNo: 'TRIP-001', destination: 'Nairobi', buyer: 'John Doe', quantitySold: 50, itemPrice: 800, totalRevenue: 40000, date: '2024-01-15' },\r\n-    { id: '2', trackingNo: 'TRIP-002', destination: 'Mombasa', buyer: 'Jane Smith', quantitySold: 75, itemPrice: 700, totalRevenue: 52500, date: '2024-01-14' },\r\n-    { id: '3', trackingNo: 'TRIP-003', destination: 'Garissa', buyer: 'Bob Johnson', quantitySold: 30, itemPrice: 650, totalRevenue: 19500, date: '2024-01-13' },\r\n-    { id: '4', trackingNo: 'TRIP-004', destination: 'Meru', buyer: 'Alice Brown', quantitySold: 40, itemPrice: 750, totalRevenue: 30000, date: '2024-01-12' },\r\n-    { id: '5', trackingNo: 'TRIP-005', destination: 'Nairobi', buyer: 'Charlie Wilson', quantitySold: 60, itemPrice: 850, totalRevenue: 51000, date: '2024-01-11' },\r\n-  ], []);\r\n+  // Real-time data processing and integration\r\n+  const processedDestinationRecords = useMemo(() => {\r\n+    // In real app, this would come from context or API\r\n+    return destinationRecords || [\r\n+      { id: '1', trackingNo: 'TRIP-001', destination: 'Nairobi', buyer: 'John Doe', quantitySold: 50, itemPrice: 800, totalRevenue: 40000, date: '2024-01-15' },\r\n+      { id: '2', trackingNo: 'TRIP-002', destination: 'Mombasa', buyer: 'Jane Smith', quantitySold: 75, itemPrice: 700, totalRevenue: 52500, date: '2024-01-14' },\r\n+      { id: '3', trackingNo: 'TRIP-003', destination: 'Garissa', buyer: 'Bob Johnson', quantitySold: 30, itemPrice: 650, totalRevenue: 19500, date: '2024-01-13' },\r\n+      { id: '4', trackingNo: 'TRIP-004', destination: 'Meru', buyer: 'Alice Brown', quantitySold: 40, itemPrice: 750, totalRevenue: 30000, date: '2024-01-12' },\r\n+      { id: '5', trackingNo: 'TRIP-005', destination: 'Nairobi', buyer: 'Charlie Wilson', quantitySold: 60, itemPrice: 850, totalRevenue: 51000, date: '2024-01-11' },\r\n+    ];\r\n+  }, [destinationRecords]);\r\n \r\n-  // Calculate profit analysis with enhanced metrics\r\n+  // Enhanced data processing with real-life integration\r\n+  const performanceMetrics: PerformanceMetrics = useMemo(() => {\r\n+    const totalCost = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\r\n+    const totalRevenue = processedDestinationRecords.reduce((sum, record) => sum + record.totalRevenue, 0);\r\n+    const totalProfit = totalRevenue - totalCost;\r\n+    const totalTrips = sourceRecords.length;\r\n+    \r\n+    // Calculate data quality based on completeness and consistency\r\n+    const dataCompleteness = sourceRecords.length > 0 ? \r\n+      (sourceRecords.filter(r => r.areaCode && r.totalCost > 0).length / sourceRecords.length) * 100 : 0;\r\n+    \r\n+    const dataQualityScore = dataCompleteness >= 95 ? 'excellent' : \r\n+                           dataCompleteness >= 85 ? 'good' : \r\n+                           dataCompleteness >= 70 ? 'fair' : 'poor';\r\n+\r\n+    return {\r\n+      totalRevenue,\r\n+      totalCost,\r\n+      totalProfit,\r\n+      profitMargin: getProfitMargin(totalCost, totalRevenue),\r\n+      avgProfitPerTrip: totalTrips > 0 ? totalProfit / totalTrips : 0,\r\n+      totalTrips,\r\n+      avgRevenuePerTrip: totalTrips > 0 ? totalRevenue / totalTrips : 0,\r\n+      avgCostPerTrip: totalTrips > 0 ? totalCost / totalTrips : 0,\r\n+      efficiency: totalCost > 0 ? (totalRevenue / totalCost) * 100 : 0,\r\n+      growthRate: 15.2, // In real app, calculate from historical data\r\n+      lastUpdated: new Date().toISOString(),\r\n+      dataQuality: dataQualityScore as 'excellent' | 'good' | 'fair' | 'poor',\r\n+      realTimeSync: isRealTimeSync\r\n+    };\r\n+  }, [sourceRecords, processedDestinationRecords, isRealTimeSync]);\r\n+\r\n+  // Enhanced profit analysis with real-life data integration\r\n   const profitAnalysis = useMemo(() => {\r\n     const analysis: ProfitAnalysis[] = [];\r\n     \r\n     ['AC001', 'AC002', 'AC003', 'AC004', 'AC005'].forEach(areaCode => {\r\n       const records = sourceRecords.filter(r => r.areaCode === areaCode);\r\n+      const now = new Date().toISOString();\r\n+      \r\n       if (records.length === 0) {\r\n         // Add placeholder for inactive points\r\n         analysis.push({\r\n           pickupPoint: `Area ${areaCode}`,\r\n+          areaCode,\r\n           totalRecords: 0,\r\n           totalCost: 0,\r\n           totalRevenue: 0,\r\n           profit: 0,\r\n@@ -75,42 +241,72 @@\n           avgCostPerKg: 0,\r\n           avgRevenuePerKg: 0,\r\n           efficiency: 0,\r\n           growth: 0,\r\n+          lastUpdated: now,\r\n+          status: 'inactive',\r\n+          trends: { profit: 'stable', revenue: 'stable', cost: 'stable' },\r\n+          kpis: { roi: 0, costEfficiency: 0, revenueGrowth: 0, marketShare: 0 }\r\n         });\r\n         return;\r\n       }\r\n       \r\n       const totalCost = records.reduce((sum, record) => sum + record.totalCost, 0);\r\n       const totalRecords = records.length;\r\n       const totalQuantity = records.reduce((sum, record) => sum + record.quantitySold, 0);\r\n       \r\n-      // Mock revenue with varying prices based on area code\r\n-      const avgSellingPrice = 750 + (areaCode.charCodeAt(4) - 48) * 50; // AC001=750, AC002=800, AC003=850, AC004=900, AC005=950\r\n-      const totalRevenue = totalQuantity * avgSellingPrice;\r\n+      // Real revenue calculation from destination records\r\n+      const relatedDestinations = processedDestinationRecords.filter(d => \r\n+        records.some(r => r.tripCode === d.trackingNo)\r\n+      );\r\n+      const totalRevenue = relatedDestinations.reduce((sum, dest) => sum + dest.totalRevenue, 0);\r\n       \r\n-      // Calculate efficiency (profit per trip)\r\n+      // Calculate efficiency metrics\r\n       const efficiency = totalCost > 0 ? (totalRevenue - totalCost) / totalRecords : 0;\r\n+      const roi = totalCost > 0 ? ((totalRevenue - totalCost) / totalCost) * 100 : 0;\r\n       \r\n-      // Mock growth (in real app, compare with previous period)\r\n-      const growth = 15 + Math.random() * 30; // Random growth between 15-45%\r\n+      // Determine status based on performance\r\n+      const margin = getProfitMargin(totalCost, totalRevenue);\r\n+      const status = margin >= 30 ? 'active' : \r\n+                    margin >= 20 ? 'warning' : \r\n+                    margin > 0 ? 'critical' : 'inactive';\r\n       \r\n+      // Calculate trends (in real app, compare with previous periods)\r\n+      const trends = {\r\n+        profit: efficiency > 1000 ? 'up' : efficiency > 500 ? 'stable' : 'down',\r\n+        revenue: totalRevenue > totalCost * 1.3 ? 'up' : totalRevenue > totalCost * 1.1 ? 'stable' : 'down',\r\n+        cost: totalCost > 0 ? 'stable' : 'stable'\r\n+      };\r\n+      \r\n+      // Mock growth (in real app, calculate from historical data)\r\n+      const growth = 15 + Math.random() * 30;\r\n+      \r\n       analysis.push({\r\n         pickupPoint: `Area ${areaCode}`,\r\n+        areaCode,\r\n         totalRecords,\r\n         totalCost,\r\n         totalRevenue,\r\n         profit: totalRevenue - totalCost,\r\n-        margin: getProfitMargin(totalCost, totalRevenue),\r\n+        margin,\r\n         avgCostPerKg: totalQuantity > 0 ? totalCost / totalQuantity : 0,\r\n         avgRevenuePerKg: totalQuantity > 0 ? totalRevenue / totalQuantity : 0,\r\n         efficiency,\r\n         growth,\r\n+        lastUpdated: now,\r\n+        status,\r\n+        trends,\r\n+        kpis: {\r\n+          roi,\r\n+          costEfficiency: totalCost > 0 ? (totalRevenue / totalCost) * 100 : 0,\r\n+          revenueGrowth: growth,\r\n+          marketShare: totalRecords / sourceRecords.length * 100\r\n+        }\r\n       });\r\n     });\r\n     \r\n     return analysis.sort((a, b) => b.profit - a.profit);\r\n-  }, [sourceRecords]);\r\n+  }, [sourceRecords, processedDestinationRecords]);\r\n \r\n   // Calculate monthly trends\r\n   const monthlyData: MonthlyData[] = [\r\n     { month: 'Aug', profit: 45000, cost: 18000, revenue: 63000, trend: 'up' },\r\n"
                },
                {
                    "date": 1759912226726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,23 +316,59 @@\n     { month: 'Dec', profit: 62000, cost: 23000, revenue: 85000, trend: 'up' },\r\n     { month: 'Jan', profit: 58000, cost: 25000, revenue: 83000, trend: 'down' },\r\n   ];\r\n \r\n-  // Calculate total metrics\r\n-  const totalMetrics = useMemo(() => {\r\n-    const totalCost = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\r\n-    const totalRevenue = destinationRecords.reduce((sum, record) => sum + record.totalRevenue, 0);\r\n-    const totalProfit = totalRevenue - totalCost;\r\n-    \r\n-    return {\r\n-      totalCost,\r\n-      totalRevenue,\r\n-      totalProfit,\r\n-      profitMargin: getProfitMargin(totalCost, totalRevenue),\r\n-      avgProfitPerTrip: destinationRecords.length > 0 ? totalProfit / destinationRecords.length : 0,\r\n-    };\r\n-  }, [sourceRecords, destinationRecords]);\r\n+  // Enhanced functionality functions\r\n+  const handleRefresh = async () => {\r\n+    setIsRefreshing(true);\r\n+    try {\r\n+      // In real app, this would fetch fresh data from API\r\n+      await new Promise(resolve => setTimeout(resolve, 1000));\r\n+      showSuccessNotification('Success', 'Data refreshed successfully');\r\n+    } catch (error) {\r\n+      showErrorNotification('Error', 'Failed to refresh data');\r\n+    } finally {\r\n+      setIsRefreshing(false);\r\n+    }\r\n+  };\r\n \r\n+  const handleExport = async (format: 'csv' | 'excel' | 'pdf') => {\r\n+    setIsExporting(true);\r\n+    try {\r\n+      // In real app, this would generate and download the report\r\n+      await new Promise(resolve => setTimeout(resolve, 2000));\r\n+      showSuccessNotification('Success', `${format.toUpperCase()} report exported successfully`);\r\n+    } catch (error) {\r\n+      showErrorNotification('Error', `Failed to export ${format.toUpperCase()} report`);\r\n+    } finally {\r\n+      setIsExporting(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleFilterChange = (key: string, value: string) => {\r\n+    setFilters(prev => ({ ...prev, [key]: value }));\r\n+  };\r\n+\r\n+  const handleDateRangeChange = (start: string, end: string) => {\r\n+    setSelectedDateRange({ start, end });\r\n+  };\r\n+\r\n+  // Auto-refresh functionality\r\n+  useEffect(() => {\r\n+    if (autoRefresh) {\r\n+      const interval = setInterval(() => {\r\n+        handleRefresh();\r\n+      }, 30000); // Refresh every 30 seconds\r\n+      return () => clearInterval(interval);\r\n+    }\r\n+  }, [autoRefresh]);\r\n+\r\n+  // Real-time sync toggle\r\n+  const toggleRealTimeSync = () => {\r\n+    setIsRealTimeSync(!isRealTimeSync);\r\n+    showSuccessNotification('Success', `Real-time sync ${!isRealTimeSync ? 'enabled' : 'disabled'}`);\r\n+  };\r\n+\r\n   // Find best and worst performing pickup points\r\n   const bestPerformer = profitAnalysis[0];\r\n   const worstPerformer = profitAnalysis[profitAnalysis.length - 1];\r\n \r\n"
                },
                {
                    "date": 1759912250026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,39 +393,150 @@\n   }\r\n \r\n   return (\r\n     <div className=\"space-y-6\">\r\n-      {/* Header */}\r\n-      <div className=\"flex items-center justify-between\">\r\n+      {/* Enhanced Header with Real-time Controls */}\r\n+      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n         <div>\r\n-          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Profit Reports</h1>\r\n+          <div className=\"flex items-center gap-3\">\r\n+            <h1 className=\"text-2xl font-bold text-gradient-primary\">Performance Reports</h1>\r\n+            <div className=\"flex items-center gap-2\">\r\n+              {isRealTimeSync ? (\r\n+                <div className=\"flex items-center gap-1 text-green-600\">\r\n+                  <Wifi className=\"h-4 w-4\" />\r\n+                  <span className=\"text-xs font-medium\">Live</span>\r\n+                </div>\r\n+              ) : (\r\n+                <div className=\"flex items-center gap-1 text-gray-500\">\r\n+                  <WifiOff className=\"h-4 w-4\" />\r\n+                  <span className=\"text-xs font-medium\">Offline</span>\r\n+                </div>\r\n+              )}\r\n+              <div className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n+                performanceMetrics.dataQuality === 'excellent' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\r\n+                performanceMetrics.dataQuality === 'good' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-200' :\r\n+                performanceMetrics.dataQuality === 'fair' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200' :\r\n+                'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200'\r\n+              }`}>\r\n+                {performanceMetrics.dataQuality.toUpperCase()} DATA\r\n+              </div>\r\n+            </div>\r\n+          </div>\r\n           <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n-            Comprehensive analysis of miraa transport profitability\r\n+            Comprehensive analysis of miraa transport profitability with real-time insights\r\n           </p>\r\n+          <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\r\n+            Last updated: {formatDate(performanceMetrics.lastUpdated)}\r\n+          </p>\r\n         </div>\r\n         \r\n-        {/* Controls */}\r\n-        <div className=\"flex items-center space-x-4\">\r\n+        {/* Enhanced Controls */}\r\n+        <div className=\"flex flex-wrap items-center gap-3\">\r\n+          {/* Date Range */}\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Calendar className=\"h-4 w-4 text-gray-500\" />\r\n+            <input\r\n+              type=\"date\"\r\n+              value={selectedDateRange.start}\r\n+              onChange={(e) => handleDateRangeChange(e.target.value, selectedDateRange.end)}\r\n+              className=\"px-2 py-1 border border-gray-300 dark:border-gray-600 rounded text-sm bg-white dark:bg-gray-700\"\r\n+            />\r\n+            <span className=\"text-gray-500\">to</span>\r\n+            <input\r\n+              type=\"date\"\r\n+              value={selectedDateRange.end}\r\n+              onChange={(e) => handleDateRangeChange(selectedDateRange.start, e.target.value)}\r\n+              className=\"px-2 py-1 border border-gray-300 dark:border-gray-600 rounded text-sm bg-white dark:bg-gray-700\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Period Selector */}\r\n           <select \r\n             value={selectedPeriod} \r\n             onChange={(e) => setSelectedPeriod(e.target.value as any)}\r\n-            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n+            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm focus-ring\"\r\n           >\r\n             <option value=\"week\">This Week</option>\r\n             <option value=\"month\">This Month</option>\r\n             <option value=\"quarter\">This Quarter</option>\r\n             <option value=\"year\">This Year</option>\r\n           </select>\r\n           \r\n+          {/* View Selector */}\r\n           <select \r\n             value={selectedView} \r\n             onChange={(e) => setSelectedView(e.target.value as any)}\r\n-            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n+            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm focus-ring\"\r\n           >\r\n             <option value=\"overview\">Overview</option>\r\n             <option value=\"pickup-analysis\">Pickup Analysis</option>\r\n             <option value=\"monthly-trends\">Monthly Trends</option>\r\n+            <option value=\"driver-performance\">Driver Performance</option>\r\n+            <option value=\"vehicle-performance\">Vehicle Performance</option>\r\n+            <option value=\"destination-analysis\">Destination Analysis</option>\r\n           </select>\r\n+\r\n+          {/* Action Buttons */}\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <button\r\n+              onClick={handleRefresh}\r\n+              disabled={isRefreshing}\r\n+              className=\"btn-glass flex items-center gap-2\"\r\n+            >\r\n+              <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n+              Refresh\r\n+            </button>\r\n+\r\n+            <div className=\"relative\">\r\n+              <button\r\n+                onClick={() => setIsExporting(!isExporting)}\r\n+                className=\"btn-gradient-primary flex items-center gap-2\"\r\n+              >\r\n+                <Download className=\"h-4 w-4\" />\r\n+                Export\r\n+              </button>\r\n+              {isExporting && (\r\n+                <div className=\"absolute right-0 top-full mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-10\">\r\n+                  <div className=\"p-2\">\r\n+                    <button\r\n+                      onClick={() => handleExport('csv')}\r\n+                      className=\"w-full text-left px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\r\n+                    >\r\n+                      Export CSV\r\n+                    </button>\r\n+                    <button\r\n+                      onClick={() => handleExport('excel')}\r\n+                      className=\"w-full text-left px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\r\n+                    >\r\n+                      Export Excel\r\n+                    </button>\r\n+                    <button\r\n+                      onClick={() => handleExport('pdf')}\r\n+                      className=\"w-full text-left px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\r\n+                    >\r\n+                      Export PDF\r\n+                    </button>\r\n+                  </div>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+\r\n+            <button\r\n+              onClick={toggleRealTimeSync}\r\n+              className={`btn-glass flex items-center gap-2 ${isRealTimeSync ? 'text-green-600' : 'text-gray-500'}`}\r\n+            >\r\n+              {isRealTimeSync ? <Wifi className=\"h-4 w-4\" /> : <WifiOff className=\"h-4 w-4\" />}\r\n+              Sync\r\n+            </button>\r\n+\r\n+            <button\r\n+              onClick={() => setAutoRefresh(!autoRefresh)}\r\n+              className={`btn-glass flex items-center gap-2 ${autoRefresh ? 'text-blue-600' : 'text-gray-500'}`}\r\n+            >\r\n+              <Clock className=\"h-4 w-4\" />\r\n+              Auto\r\n+            </button>\r\n+          </div>\r\n         </div>\r\n       </div>\r\n \r\n       {/* Compact Key Metrics */}\r\n"
                },
                {
                    "date": 1759912289679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -538,77 +538,100 @@\n           </div>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Compact Key Metrics */}\r\n-      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n-        <Card className=\"p-4\">\r\n+      {/* Enhanced Key Metrics with Real-time Data */}\r\n+      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n+        <Card variant=\"glass\" className=\"p-4 hover-lift\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-green-500 flex-shrink-0\">\r\n-              <DollarSign className=\"h-4 w-4 text-white\" />\r\n+            <div className=\"p-3 rounded-lg gradient-primary flex-shrink-0\">\r\n+              <DollarSign className=\"h-5 w-5 text-white\" />\r\n             </div>\r\n             <div className=\"text-right min-w-0 flex-1\">\r\n-              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Revenue</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n-                {(totalMetrics.totalRevenue / 1000).toFixed(0)}K\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Revenue</p>\r\n+              <p className=\"text-lg font-bold text-gradient-primary truncate\">\r\n+                {formatCurrency(performanceMetrics.totalRevenue)}\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-2 flex items-center text-xs text-green-600\">\r\n-            <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n-            +12.5%\r\n+          <div className=\"mt-2 flex items-center justify-between text-xs\">\r\n+            <div className=\"flex items-center text-green-600\">\r\n+              <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n+              +{performanceMetrics.growthRate.toFixed(1)}%\r\n+            </div>\r\n+            <div className=\"text-gray-500\">\r\n+              {performanceMetrics.totalTrips} trips\r\n+            </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"glass\" className=\"p-4 hover-lift\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-red-500 flex-shrink-0\">\r\n-              <Package className=\"h-4 w-4 text-white\" />\r\n+            <div className=\"p-3 rounded-lg gradient-warm flex-shrink-0\">\r\n+              <Package className=\"h-5 w-5 text-white\" />\r\n             </div>\r\n             <div className=\"text-right min-w-0 flex-1\">\r\n-              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Costs</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n-                {(totalMetrics.totalCost / 1000).toFixed(0)}K\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Costs</p>\r\n+              <p className=\"text-lg font-bold text-gradient-warm truncate\">\r\n+                {formatCurrency(performanceMetrics.totalCost)}\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-2 flex items-center text-xs text-red-600\">\r\n-            <TrendingDown className=\"h-3 w-3 mr-1\" />\r\n-            -5.2%\r\n+          <div className=\"mt-2 flex items-center justify-between text-xs\">\r\n+            <div className=\"flex items-center text-orange-600\">\r\n+              <TrendingDown className=\"h-3 w-3 mr-1\" />\r\n+              -5.2%\r\n+            </div>\r\n+            <div className=\"text-gray-500\">\r\n+              Avg: {formatCurrency(performanceMetrics.avgCostPerTrip)}\r\n+            </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"glass\" className=\"p-4 hover-lift\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-blue-500 flex-shrink-0\">\r\n-              <Target className=\"h-4 w-4 text-white\" />\r\n+            <div className=\"p-3 rounded-lg gradient-secondary flex-shrink-0\">\r\n+              <Target className=\"h-5 w-5 text-white\" />\r\n             </div>\r\n             <div className=\"text-right min-w-0 flex-1\">\r\n-              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Profit</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n-                {(totalMetrics.totalProfit / 1000).toFixed(0)}K\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Net Profit</p>\r\n+              <p className=\"text-lg font-bold text-gradient-secondary truncate\">\r\n+                {formatCurrency(performanceMetrics.totalProfit)}\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-2 flex items-center text-xs text-blue-600\">\r\n-            <Activity className=\"h-3 w-3 mr-1\" />\r\n-            {totalMetrics.profitMargin.toFixed(1)}%\r\n+          <div className=\"mt-2 flex items-center justify-between text-xs\">\r\n+            <div className=\"flex items-center text-blue-600\">\r\n+              <Activity className=\"h-3 w-3 mr-1\" />\r\n+              {performanceMetrics.profitMargin.toFixed(1)}%\r\n+            </div>\r\n+            <div className=\"text-gray-500\">\r\n+              Margin\r\n+            </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"glass\" className=\"p-4 hover-lift\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-purple-500 flex-shrink-0\">\r\n-              <BarChart3 className=\"h-4 w-4 text-white\" />\r\n+            <div className=\"p-3 rounded-lg gradient-accent flex-shrink-0\">\r\n+              <BarChart3 className=\"h-5 w-5 text-white\" />\r\n             </div>\r\n             <div className=\"text-right min-w-0 flex-1\">\r\n-              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Avg/Trip</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 truncate\">\r\n-                {(totalMetrics.avgProfitPerTrip / 1000).toFixed(1)}K\r\n+              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Efficiency</p>\r\n+              <p className=\"text-lg font-bold text-gradient-accent truncate\">\r\n+                {performanceMetrics.efficiency.toFixed(1)}%\r\n               </p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"mt-2 text-xs text-purple-600\">Per delivery</div>\r\n+          <div className=\"mt-2 flex items-center justify-between text-xs\">\r\n+            <div className=\"flex items-center text-purple-600\">\r\n+              <Zap className=\"h-3 w-3 mr-1\" />\r\n+              ROI\r\n+            </div>\r\n+            <div className=\"text-gray-500\">\r\n+              {performanceMetrics.dataQuality} data\r\n+            </div>\r\n+          </div>\r\n         </Card>\r\n       </div>\r\n \r\n       {selectedView === 'overview' && (\r\n"
                },
                {
                    "date": 1759912313425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,37 +14,12 @@\n   Activity,\r\n   Package,\r\n   MapPin,\r\n   Download,\r\n-  Filter,\r\n   Calendar,\r\n   RefreshCw,\r\n-  Settings,\r\n-  Eye,\r\n-  FileText,\r\n-  PieChart,\r\n-  LineChart,\r\n-  Users,\r\n-  Truck,\r\n   Clock,\r\n-  CheckCircle,\r\n-  XCircle,\r\n   Zap,\r\n-  Award,\r\n-  TrendingUp as TrendingUpIcon,\r\n-  TrendingDown as TrendingDownIcon,\r\n-  ArrowUpRight,\r\n-  ArrowDownRight,\r\n-  Minus,\r\n-  Plus,\r\n-  Search,\r\n-  MoreHorizontal,\r\n-  Edit,\r\n-  Trash2,\r\n-  Save,\r\n-  Upload,\r\n-  Database,\r\n-  Cloud,\r\n   Wifi,\r\n   WifiOff\r\n } from 'lucide-react';\r\n \r\n"
                },
                {
                    "date": 1759912342685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,55 +65,9 @@\n   dataQuality: 'excellent' | 'good' | 'fair' | 'poor';\r\n   realTimeSync: boolean;\r\n }\r\n \r\n-interface DestinationPerformance {\r\n-  destination: string;\r\n-  totalTrips: number;\r\n-  totalRevenue: number;\r\n-  totalCost: number;\r\n-  profit: number;\r\n-  margin: number;\r\n-  avgPricePerKg: number;\r\n-  topBuyers: Array<{\r\n-    name: string;\r\n-    totalPurchases: number;\r\n-    lastPurchase: string;\r\n-  }>;\r\n-  trends: {\r\n-    revenue: 'up' | 'down' | 'stable';\r\n-    volume: 'up' | 'down' | 'stable';\r\n-  };\r\n-}\r\n \r\n-interface DriverPerformance {\r\n-  driverId: string;\r\n-  driverName: string;\r\n-  totalTrips: number;\r\n-  totalRevenue: number;\r\n-  totalCost: number;\r\n-  profit: number;\r\n-  efficiency: number;\r\n-  avgTripTime: number;\r\n-  reliability: number;\r\n-  rating: number;\r\n-  lastTrip: string;\r\n-}\r\n-\r\n-interface VehiclePerformance {\r\n-  vehicleReg: string;\r\n-  vehicleModel: string;\r\n-  totalTrips: number;\r\n-  totalRevenue: number;\r\n-  totalCost: number;\r\n-  profit: number;\r\n-  efficiency: number;\r\n-  maintenanceCost: number;\r\n-  fuelEfficiency: number;\r\n-  utilization: number;\r\n-  lastService: string;\r\n-}\r\n-\r\n // Helper function for profit margin calculation\r\n const getProfitMargin = (cost: number, revenue: number): number => {\r\n   if (cost === 0) return 0;\r\n   return ((revenue - cost) / revenue) * 100;\r\n"
                },
                {
                    "date": 1759912368345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n   trend: 'up' | 'down' | 'stable';\r\n }\r\n \r\n export const ProfitReportsPage: React.FC = () => {\r\n-  const { sourceRecords, user, transportLogs, destinationRecords } = useApp();\r\n+  const { sourceRecords, user, destinationRecords } = useApp();\r\n   const { showSuccessNotification, showErrorNotification } = useNotificationService();\r\n   \r\n   // Enhanced state management\r\n   const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\r\n@@ -91,20 +91,12 @@\n   const [selectedDateRange, setSelectedDateRange] = useState<{ start: string; end: string }>({\r\n     start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n     end: new Date().toISOString().split('T')[0]\r\n   });\r\n-  const [filters, setFilters] = useState({\r\n-    areaCode: 'all',\r\n-    destination: 'all',\r\n-    driver: 'all',\r\n-    vehicle: 'all',\r\n-    status: 'all'\r\n-  });\r\n   const [isRealTimeSync, setIsRealTimeSync] = useState(true);\r\n   const [isExporting, setIsExporting] = useState(false);\r\n   const [isRefreshing, setIsRefreshing] = useState(false);\r\n   const [autoRefresh, setAutoRefresh] = useState(false);\r\n-  const [dataQuality, setDataQuality] = useState<'excellent' | 'good' | 'fair' | 'poor'>('good');\r\n \r\n   // Real-time data processing and integration\r\n   const processedDestinationRecords = useMemo(() => {\r\n     // In real app, this would come from context or API\r\n"
                },
                {
                    "date": 1759912406285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,11 +192,11 @@\n                     margin > 0 ? 'critical' : 'inactive';\r\n       \r\n       // Calculate trends (in real app, compare with previous periods)\r\n       const trends = {\r\n-        profit: efficiency > 1000 ? 'up' : efficiency > 500 ? 'stable' : 'down',\r\n-        revenue: totalRevenue > totalCost * 1.3 ? 'up' : totalRevenue > totalCost * 1.1 ? 'stable' : 'down',\r\n-        cost: totalCost > 0 ? 'stable' : 'stable'\r\n+        profit: efficiency > 1000 ? 'up' as const : efficiency > 500 ? 'stable' as const : 'down' as const,\r\n+        revenue: totalRevenue > totalCost * 1.3 ? 'up' as const : totalRevenue > totalCost * 1.1 ? 'stable' as const : 'down' as const,\r\n+        cost: totalCost > 0 ? 'stable' as const : 'stable' as const\r\n       };\r\n       \r\n       // Mock growth (in real app, calculate from historical data)\r\n       const growth = 15 + Math.random() * 30;\r\n"
                },
                {
                    "date": 1759912438126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,12 +264,8 @@\n       setIsExporting(false);\r\n     }\r\n   };\r\n \r\n-  const handleFilterChange = (key: string, value: string) => {\r\n-    setFilters(prev => ({ ...prev, [key]: value }));\r\n-  };\r\n-\r\n   const handleDateRangeChange = (start: string, end: string) => {\r\n     setSelectedDateRange({ start, end });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1759912483337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -614,32 +614,32 @@\n             </Card>\r\n           </div>\r\n \r\n           {/* Destination Performance */}\r\n-          <Card className=\"p-6\">\r\n+          <Card variant=\"glass\" className=\"p-6\">\r\n             <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Destination Performance</h3>\r\n             <div className=\"space-y-3\">\r\n-              {destinationRecords.map((record) => {\r\n+              {processedDestinationRecords.map((record) => {\r\n                 // Mock cost calculation\r\n-                const cost = record.quantitySold * 450; // Mock purchase price\r\n+                const cost = (record as any).quantitySold * 450; // Mock purchase price\r\n                 const profit = record.totalRevenue - cost;\r\n                 const margin = getProfitMargin(cost, record.totalRevenue);\r\n                 \r\n                 return (\r\n-                  <div key={record.id} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n+                  <div key={record.id} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover-lift\">\r\n                     <div className=\"flex items-center space-x-4\">\r\n                       <div className=\"p-2 bg-blue-500 rounded-lg\">\r\n                         <MapPin className=\"h-4 w-4 text-white\" />\r\n                       </div>\r\n                       <div>\r\n-                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">{record.destination}</p>\r\n-                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{record.buyer}</p>\r\n+                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">{(record as any).destination}</p>\r\n+                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{(record as any).buyer}</p>\r\n                       </div>\r\n                     </div>\r\n                     <div className=\"flex items-center space-x-6 text-sm\">\r\n                       <div className=\"text-right\">\r\n                         <p className=\"text-gray-500 dark:text-gray-400\">Quantity</p>\r\n-                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">{record.quantitySold}kg</p>\r\n+                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">{(record as any).quantitySold}kg</p>\r\n                       </div>\r\n                       <div className=\"text-right\">\r\n                         <p className=\"text-gray-500 dark:text-gray-400\">Revenue</p>\r\n                         <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(record.totalRevenue)}</p>\r\n"
                },
                {
                    "date": 1759912509620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n       const totalQuantity = records.reduce((sum, record) => sum + record.quantitySold, 0);\r\n       \r\n       // Real revenue calculation from destination records\r\n       const relatedDestinations = processedDestinationRecords.filter(d => \r\n-        records.some(r => r.tripCode === d.trackingNo)\r\n+        records.some(r => (r as any).tripCode === (d as any).trackingNo)\r\n       );\r\n       const totalRevenue = relatedDestinations.reduce((sum, dest) => sum + dest.totalRevenue, 0);\r\n       \r\n       // Calculate efficiency metrics\r\n"
                },
                {
                    "date": 1759912580642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,9 +292,9 @@\n   // Identify shortcomings\r\n   const shortcomings = [\r\n     ...(worstPerformer && worstPerformer.margin < 20 ? [`Low profit margin at ${worstPerformer.pickupPoint} (${worstPerformer.margin.toFixed(1)}%)`] : []),\r\n     ...(profitAnalysis.filter(p => p.totalRecords < 3).map(p => `Low activity at ${p.pickupPoint} (${p.totalRecords} trips)`)),\r\n-    ...(totalMetrics.profitMargin < 30 ? ['Overall profit margin below target (30%+)'] : []),\r\n+    ...(performanceMetrics.profitMargin < 30 ? ['Overall profit margin below target (30%+)'] : []),\r\n     ...(monthlyData[monthlyData.length - 1].trend === 'down' ? ['Recent downward trend in profits'] : []),\r\n   ];\r\n \r\n   if (user?.role !== 'admin') {\r\n"
                },
                {
                    "date": 1759916408750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n       {/* Enhanced Header with Real-time Controls */}\r\n       <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n         <div>\r\n           <div className=\"flex items-center gap-3\">\r\n-            <h1 className=\"text-2xl font-bold text-gradient-primary\">Performance Reports</h1>\r\n+            <h1 className=\"text-3xl font-bold text-gradient-purple\">Performance Reports</h1>\r\n             <div className=\"flex items-center gap-2\">\r\n               {isRealTimeSync ? (\r\n                 <div className=\"flex items-center gap-1 text-green-600\">\r\n                   <Wifi className=\"h-4 w-4\" />\r\n"
                }
            ],
            "date": 1759587377902,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { Card } from '../../components/Card';\r\nimport { formatCurrency, formatDate, getProfitMargin } from '../../utils/helpers';\r\nimport { \r\n  TrendingUp, \r\n  TrendingDown, \r\n  BarChart3, \r\n  PieChart, \r\n  DollarSign,\r\n  AlertTriangle,\r\n  Target,\r\n  Activity,\r\n  Package,\r\n  MapPin\r\n} from 'lucide-react';\r\n\r\ninterface ProfitAnalysis {\r\n  pickupPoint: string;\r\n  totalRecords: number;\r\n  totalCost: number;\r\n  totalRevenue: number;\r\n  profit: number;\r\n  margin: number;\r\n  avgCostPerKg: number;\r\n  avgRevenuePerKg: number;\r\n}\r\n\r\ninterface MonthlyData {\r\n  month: string;\r\n  profit: number;\r\n  cost: number;\r\n  revenue: number;\r\n  trend: 'up' | 'down' | 'stable';\r\n}\r\n\r\nexport const ProfitReportsPage: React.FC = () => {\r\n  const { sourceRecords, user } = useApp();\r\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\r\n  const [selectedView, setSelectedView] = useState<'overview' | 'pickup-analysis' | 'monthly-trends'>('overview');\r\n\r\n  // Calculate mock destination records (in real app, this would come from context)\r\n  const destinationRecords = useMemo(() => [\r\n    { id: '1', trackingNo: 'TRIP-001', destination: 'Nairobi', buyer: 'John Doe', quantitySold: 50, itemPrice: 800, totalRevenue: 40000, date: '2024-01-15' },\r\n    { id: '2', trackingNo. 'TRIP-002', destination: 'Mombasa', buyer: 'Jane Smith', quantitySold: 75, itemPrice: 700, totalRevenue: 52500, date: '2024-01-14' },\r\n    { id: '3', trackingNo: 'TRIP-003', destination: 'Garissa', buyer: 'Bob Johnson', quantitySold: 30, itemPrice: 650, totalRevenue: 19500, date: '2024-01-13' },\r\n    { id: '4', trackingNo: 'TRIP-004', destination: 'Meru', buyer: 'Alice Brown', quantitySold: 40, itemPrice: 750, totalRevenue: 30000, date: '2024-01-12' },\r\n    { id: '5', trackingNo: 'TRIP-005', destination: 'Nairobi', buyer: 'Charlie Wilson', quantitySold: 60, itemPrice: 850, totalRevenue: 51000, date: '2024-01-11' },\r\n  ], []);\r\n\r\n  // Calculate profit analysis\r\n  const profitAnalysis = useMemo(() => {\r\n    const analysis: ProfitAnalysis[] = [];\r\n    \r\n    ['A', 'B', 'C', 'D'].forEach(point => {\r\n      const records = sourceRecords.filter(r => r.pickupPoint === point);\r\n      if (records.length === 0) return;\r\n      \r\n      const totalCost = records.reduce((sum, record) => sum + record.totalCost, 0);\r\n      const totalRecords = records.length;\r\n      const totalQuantity = records.reduce((sum, record) => sum + record.quantitySold, 0);\r\n      \r\n      // Mock revenue (in real app, calculate from destination records)\r\n      const avgSellingPrice = 750; // Mock price\r\n      const totalRevenue = totalQuantity * avgSellingPrice;\r\n      \r\n      analysis.push({\r\n        pickupPoint: `Point ${point}`,\r\n        totalRecords,\r\n        totalCost,\r\n        totalRevenue,\r\n        profit: totalRevenue - totalCost,\r\n        margin: getProfitMargin(totalCost, totalRevenue),\r\n        avgCostPerKg: totalCost / totalQuantity,\r\n        avgRevenuePerKg: totalRevenue / totalQuantity,\r\n      });\r\n    });\r\n    \r\n    return analysis.sort((a, b) => b.profit - a.profit);\r\n  }, [sourceRecords]);\r\n\r\n  // Calculate monthly trends\r\n  const monthlyData: MonthlyData[] = [\r\n    { month: 'Aug', profit: 45000, cost: 18000, revenue: 63000, trend: 'up' },\r\n    { month: 'Sep', profit: 52000, cost: 22000, revenue: 74000, trend: 'up' },\r\n    { month: 'Oct', profit: 48000, cost: 20000, revenue: 68000, trend: 'down' },\r\n    { month: 'Nov', profit: 55000, cost: 21000, revenue: 76000, trend: 'up' },\r\n    { month: 'Dec', profit: 62000, cost: 23000, revenue: 85000, trend: 'up' },\r\n    { month: 'Jan', profit: 58000, cost: 25000, revenue: 83000, trend: 'down' },\r\n  ];\r\n\r\n  // Calculate total metrics\r\n  const totalMetrics = useMemo(() => {\r\n    const totalCost = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\r\n    const totalRevenue = destinationRecords.reduce((sum, record) => sum + record.totalRevenue, 0);\r\n    const totalProfit = totalRevenue - totalCost;\r\n    \r\n    return {\r\n      totalCost,\r\n      totalRevenue,\r\n      totalProfit,\r\n      profitMargin: getProfitMargin(totalCost, totalRevenue),\r\n      avgProfitPerTrip: destinationRecords.length > 0 ? totalProfit / destinationRecords.length : 0,\r\n    };\r\n  }, [sourceRecords, destinationRecords]);\r\n\r\n  // Find best and worst performing pickup points\r\n  const bestPerformer = profitAnalysis[0];\r\n  const worstPerformer = profitAnalysis[profitAnalysis.length - 1];\r\n\r\n  // Identify shortcomings\r\n  const shortcomings = [\r\n    ...(worstPerformer && worstPerformer.margin < 20 ? [`Low profit margin at ${worstPerformer.pickupPoint} (${worstPerformer.margin.toFixed(1)}%)`] : []),\r\n    ...(profitAnalysis.filter(p => p.totalRecords < 3).map(p => `Low activity at ${p.pickupPoint} (${p.totalRecords} trips)`)),\r\n    ...(totalMetrics.profitMargin < 30 ? ['Overall profit margin below target (30%+)'] : []),\r\n    ...(monthlyData[monthlyData.length - 1].trend === 'down' ? ['Recent downward trend in profits'] : []),\r\n  ];\r\n\r\n  if (user?.role !== 'admin') {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <Card className=\"p-8 text-center\">\r\n          <Target className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2\">Access Restricted</h2>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">Profit reports are only available to administrators.</p>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Profit Reports</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Comprehensive analysis of miraa transport profitability\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Controls */}\r\n        <div className=\"flex items-center space-x-4\">\r\n          <select \r\n            value={selectedPeriod} \r\n            onChange={(e) => setSelectedPeriod(e.target.value as any)}\r\n            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n          >\r\n            <option value=\"week\">This Week</option>\r\n            <option value=\"month\">This Month</option>\r\n            <option value=\"quarter\">This Quarter</option>\r\n            <option value=\"year\">This Year</option>\r\n          </select>\r\n          \r\n          <select \r\n            value={selectedView} \r\n            onChange={(e) => setSelectedView(e.target.value as any)}\r\n            className=\"px-3 py-2 border border-gray-300 dark:cart-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\r\n          >\r\n            <option value=\"overview\">Overview</option>\r\n            <option value=\"pickup-analysis\">Pickup Analysis</option>\r\n            <option value=\"monthly-trends\">Monthly Trends</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Key Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"p-3 rounded-lg bg-green-500\">\r\n              <DollarSign className=\"h-6 w-6 text-white\" />\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Revenue</p>\r\n              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n                {formatCurrency(totalMetrics.totalRevenue)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <p className=\"text-xs text-green-600 dark:text-green-400\">+12.5% from last month</p>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"p-3 rounded-lg bg-red-500\">\r\n              <Package className=\"h-6 w-6 text-white\" />\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Costs</p>\r\n              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n                {formatCurrency(totalMetrics.totalCost)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <p className=\"text-xs text-red-600 dark:text-red-400\">-5.2% from last month</p>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"p-3 rounded-lg bg-blue-500\">\r\n              <TrendingUp className=\"h-6 w-6 text-white\" />\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Net Profit</p>\r\n              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n                {formatCurrency(totalMetrics.totalProfit)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <p className=\"text-xs text-blue-600 dark:text-blue-400\">{totalMetrics.profitMargin.toFixed(1)}% margin</p>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"p-3 rounded-lg bg-yellow-500\">\r\n              <Target className=\"h-6 w-6 text-white\" />\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Avg Profit/Trip</p>\r\n              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\r\n                {formatCurrency(totalMetrics.avgProfitPerTrip)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <p className=\"text-xs text-yellow-600 dark:text-yellow-400\">Per delivery</p>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {selectedView === 'overview' && (\r\n        <>\r\n          {/* Performance Overview */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n            {/* Best/Worst Performers */}\r\n            <Card className=\"lg:col-span-1 p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Performance Summary</h3>\r\n              <div className=\"space-y-4\">\r\n                {/* Best Performer */}\r\n                {bestPerformer && (\r\n                  <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\r\n                    <div className=\"flex items-center mb-2\">\r\n                      <TrendingUp className=\"h-4 w-4 text-green-600 mr-2\" />\r\n                      <span className=\"font-medium text-green-800 dark:text-green-200\">Best Performer</span>\r\n                    </div>\r\n                    <p className=\"font-semibold text-green-900 dark:text-green-100\">{bestPerformer.pickupPoint}</p>\r\n                    <p className=\"text-sm text-green-700 dark:text-green-300\">\r\n                      Profit: {formatCurrency(bestPerformer.profit)} ({bestPerformer.margin.toFixed(1)}%)\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Worst Performer */}\r\n                {worstPerformer && (\r\n                  <div className=\"p-4 bg-red-50 dark:bg-red-900/20 rounded-lg\">\r\n                    <div className=\"flex items-center mb-2\">\r\n                      <TrendingDown className=\"h-4 w-4 text-red-600 mr-2\" />\r\n                      <span className=\"font-medium text-red-800 dark:text-red-200\">Needs Improvement</span>\r\n                    </div>\r\n                    <p className=\"font-semibold text-red-900 dark:text-red-100\">{worstPerformer.pickupPoint}</p>\r\n                    <p className=\"text-sm text-red-700 dark:text-red-300\">\r\n                      Profit: {formatCurrency(worstPerformer.profit)} ({worstPerformer.margin.toFixed(1)}%)\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Shortcomings & Recommendations */}\r\n            <Card className=\"lg:col-span-2 p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Issues & Recommendations</h3>\r\n              <div className=\"space-y-3\">\r\n                {shortcomings.length > 0 ? (\r\n                  shortcomings.map((shortcoming, index) => (\r\n                    <div key={index} className=\"flex items-start space-x-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\r\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\r\n                      <div>\r\n                        <p className=\"font-medium text-yellow-800 dark:text-yellow-200\">Issue</p>\r\n                        <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">{shortcoming}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"text-center py-8\">\r\n                    <Target className=\"h-12 w-12 text-green-500 mx-auto mb-3\" />\r\n                    <p className=\"text-gray-900 dark:text-gray-100 font-medium\">Excellent Performance!</p>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">No critical issues identified</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Destination Performance */}\r\n          <Card className=\"p-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Destination Performance</h3>\r\n            <div className=\"space-y-3\">\r\n              {destinationRecords.map((record) => {\r\n                // Mock cost calculation\r\n                const cost = record.quantitySold * 450; // Mock purchase price\r\n                const profit = record.totalRevenue - cost;\r\n                const margin = getProfitMargin(cost, record.totalRevenue);\r\n                \r\n                return (\r\n                  <div key={record.id} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <div className=\"p-2 bg-blue-500 rounded-lg\">\r\n                        <MapPin className=\"h-4 w-4 text-white\" />\r\n                      </div>\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">{record.destination}</p>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{record.buyer}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-6 text-sm\">\r\n                      <div className=\"text-right\">\r\n                        <p className=\"text-gray-500 dark:text-gray-400\">Quantity</p>\r\n                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">{record.quantitySold}kg</p>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <p className=\"text-gray-500 dark:text-gray-400\">Revenue</p>\r\n                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(record.totalRevenue)}</p>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <p className=\"text-gray-500 dark:text-gray-400\">Profit</p>\r\n                        <p className={`font-medium ${profit > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                          {formatCurrency(profit)} ({margin.toFixed(1)}%)\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </>\r\n      )}\r\n\r\n      {selected ): 'toggle' | 'monthly-trends'>('pickup-analysis') && (\r\n        <>\r\n          {/* Pickup Point Analysis */}\r\n          <Card className=\"p-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Pickup Point Analysis</h3>\r\n            <div className=\"space-y-4\">\r\n              {profitAnalysis.map((analysis) => (\r\n                <div key={analysis.pickupPoint} className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\r\n                  <div className=\"flex items-center justify-between mb-3\">\r\n                    <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">{analysis.pickupPoint}</h4>\r\n                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                      analysis.margin >= 30 \r\n                        ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200'\r\n                        : analysis.margin >= 20 \r\n                        ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200'\r\n                        : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200'\r\n                    }`}>\r\n                      {analysis.margin.toFixed(1)}% Margin\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                    <div>\r\n                      <p className=\"text-gray-500 dark:text-gray-400\">Trips</p>\r\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{analysis.totalRecords}</p>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-gray-500 dark:text-gray-400\">Total Cost</p>\r\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(analysis.totalCost)}</p>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-gray-500 dark:text-gray-400\">Revenue</p>\r\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(analysis.totalRevenue)}</p>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-gray-500 dark:text-gray-400\">Profit</p>\r\n                      <p className={`font-medium ${analysis.profit > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                        {formatCurrency(analysis.profit)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"mt-3\">\r\n                    <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\r\n                      <span>Avg Cost: {formatCurrency(analysis.avgCostPerKg)}/kg</span>\r\n                      <span>Avg Revenue: {formatCurrency(analysis.avgRevenuePerKg)}/kg</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n                      <div \r\n                        className=\"bg-gradient-to-r from-red-500 to-green-500 h-2 rounded-full\"\r\n                        style={{ width: `${Math.min(100, Math.max(0, analysis.margin))}%` }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Card>\r\n        </>\r\n      )}\r\n\r\n      {selectedView === 'monthly-trends' && (\r\n        <>\r\n          {/* Monthly Trends */}\r\n          <Card className=\"p-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Monthly Profits Trend</h3>\r\n            <div className=\"space-y-4\">\r\n              {monthlyData.map((month, index) => (\r\n                <div key={month.month} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                  <div className=\"flex items-center space-x-4\">\r\n                    <div className=\"text-sm font-medium text-gray-500 dark:text-gray-400 w-12\">\r\n                      {month.month}\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      {month.trend === 'up' && <TrendingUp className=\"h-4 w-4 text-green-600\" />}\r\n                      {month.trend === 'down' && <TrendingDown className=\"h-4 w-4 text-red-600\" />}\r\n                      {month.trend === 'stable' && <Activity className=\"h-4 w-4 text-gray-600\" />}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center space-x-6 text-sm\">\r\n                    <div className=\"text-right\">\r\n                      <p className=\"text-gray-500 dark:text-gray-400\">Costs</p>\r\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(month.cost)}</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <p className=\"text-gray-500 dark:text-gray-400\">Revenue</p>\r\n                      <p className=\"font-medium text-gray-900 dark:text-gray-100\">{formatCurrency(month.revenue)}</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <p className=\"text-gray-500 dark:text-gray-400\">Profit</p>\r\n                      <p className={`font-medium ${month.profit > 40000 ? 'text-green-600' : 'text-orange-600'}`}>\r\n                        {formatCurrency(month.profit)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Card>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}