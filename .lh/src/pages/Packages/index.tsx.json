{
    "sourceFile": "src/pages/Packages/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1761636676955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761638382324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,131 @@\n-import React from 'react';\r\n+import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n+import { FormInput } from '../../components/FormInput';\r\n+import { FormSelect } from '../../components/FormSelect';\r\n+import { Button } from '../../components/Button';\r\n+import { useApp } from '../../context/AppContext';\r\n \r\n export const PackagesPage: React.FC = () => {\r\n+  const { packages, setPackages } = useApp();\r\n+  const [q, setQ] = useState('');\r\n+  const [status, setStatus] = useState<'all' | 'registered' | 'in-transit' | 'delivered' | 'cancelled'>('all');\r\n+\r\n+  const filtered = useMemo(() => {\r\n+    const query = q.trim().toLowerCase();\r\n+    return packages.filter(p => {\r\n+      const matchQ = !query || p.trackingNumber.toLowerCase().includes(query) || p.recipientName.toLowerCase().includes(query) || p.senderName.toLowerCase().includes(query);\r\n+      const matchStatus = status === 'all' || p.status === status;\r\n+      return matchQ && matchStatus;\r\n+    });\r\n+  }, [packages, q, status]);\r\n+\r\n+  const totals = useMemo(() => {\r\n+    let boxes = 0, basins = 0, smallSacks = 0;\r\n+    for (const p of filtered) {\r\n+      if (!p.notes) continue;\r\n+      for (const part of String(p.notes).split('|')) {\r\n+        const [k, v] = (part || '').split(':');\r\n+        const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n+        if (k === 'boxes') boxes += val;\r\n+        if (k === 'basins') basins += val;\r\n+        if (k === 'smallSacks') smallSacks += val;\r\n+      }\r\n+    }\r\n+    return { count: filtered.length, boxes, basins, smallSacks };\r\n+  }, [filtered]);\r\n+\r\n+  const updateStatus = (id: string, newStatus: 'registered' | 'in-transit' | 'delivered' | 'cancelled') => {\r\n+    setPackages(packages.map(p => p.id === id ? { ...p, status: newStatus } : p));\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Package Management</h1>\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <p className=\"text-gray-700 dark:text-gray-300\">Search and manage packages by status will appear here.</p>\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n+          <FormInput label=\"Search\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Tracking, recipient, sender\" />\r\n+          <FormSelect label=\"Status\" value={status} onChange={(v)=>setStatus(v as any)} options={[\r\n+            { value: 'all', label: 'All' },\r\n+            { value: 'registered', label: 'Registered' },\r\n+            { value: 'in-transit', label: 'In Transit' },\r\n+            { value: 'delivered', label: 'Delivered' },\r\n+            { value: 'cancelled', label: 'Cancelled' },\r\n+          ]} />\r\n+        </div>\r\n+        <div className=\"mt-4 grid grid-cols-4 gap-3 text-center\">\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Packages</div>\r\n+            <div className=\"text-xl font-bold\">{totals.count}</div>\r\n+          </div>\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Boxes</div>\r\n+            <div className=\"text-xl font-bold\">{totals.boxes}</div>\r\n+          </div>\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Basins</div>\r\n+            <div className=\"text-xl font-bold\">{totals.basins}</div>\r\n+          </div>\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Small Sacks</div>\r\n+            <div className=\"text-xl font-bold\">{totals.smallSacks}</div>\r\n+          </div>\r\n+        </div>\r\n       </Card>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <div className=\"overflow-x-auto\">\r\n+          <table className=\"min-w-full\">\r\n+            <thead>\r\n+              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n+                <th className=\"py-2 pr-4\">Tracking</th>\r\n+                <th className=\"py-2 pr-4\">Recipient</th>\r\n+                <th className=\"py-2 pr-4\">Destination</th>\r\n+                <th className=\"py-2 pr-4\">Boxes</th>\r\n+                <th className=\"py-2 pr-4\">Basins</th>\r\n+                <th className=\"py-2 pr-4\">Small Sacks</th>\r\n+                <th className=\"py-2 pr-4\">Status</th>\r\n+                <th className=\"py-2 pr-4\">Actions</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {filtered.map(p => {\r\n+                let b=0,bs=0,ss=0;\r\n+                if (p.notes) {\r\n+                  for (const part of String(p.notes).split('|')) {\r\n+                    const [k, v] = (part || '').split(':');\r\n+                    const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n+                    if (k === 'boxes') b += val;\r\n+                    if (k === 'basins') bs += val;\r\n+                    if (k === 'smallSacks') ss += val;\r\n+                  }\r\n+                }\r\n+                return (\r\n+                  <tr key={p.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n+                    <td className=\"py-2 pr-4\">{p.trackingNumber}</td>\r\n+                    <td className=\"py-2 pr-4\">{p.recipientName}</td>\r\n+                    <td className=\"py-2 pr-4\">{p.destination}</td>\r\n+                    <td className=\"py-2 pr-4\">{b}</td>\r\n+                    <td className=\"py-2 pr-4\">{bs}</td>\r\n+                    <td className=\"py-2 pr-4\">{ss}</td>\r\n+                    <td className=\"py-2 pr-4 capitalize\">{p.status}</td>\r\n+                    <td className=\"py-2 pr-4 space-x-2\">\r\n+                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(p.id,'registered')}>Registered</Button>\r\n+                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(p.id,'in-transit')}>In Transit</Button>\r\n+                      <Button size=\"sm\" onClick={()=>updateStatus(p.id,'delivered')}>Delivered</Button>\r\n+                      <Button size=\"sm\" variant=\"destructive\" onClick={()=>updateStatus(p.id,'cancelled')}>Cancel</Button>\r\n+                    </td>\r\n+                  </tr>\r\n+                );\r\n+              })}\r\n+              {filtered.length === 0 && (\r\n+                <tr>\r\n+                  <td colSpan={8} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No packages</td>\r\n+                </tr>\r\n+              )}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+      </Card>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1761638549846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,20 +5,23 @@\n import { Button } from '../../components/Button';\r\n import { useApp } from '../../context/AppContext';\r\n \r\n export const PackagesPage: React.FC = () => {\r\n-  const { packages, setPackages } = useApp();\r\n+  const { packages, setPackages, pickupStations } = useApp();\r\n   const [q, setQ] = useState('');\r\n   const [status, setStatus] = useState<'all' | 'registered' | 'in-transit' | 'delivered' | 'cancelled'>('all');\r\n+  const [station, setStation] = useState<string>('all');\r\n+  const [selected, setSelected] = useState<Record<string, boolean>>({});\r\n \r\n   const filtered = useMemo(() => {\r\n     const query = q.trim().toLowerCase();\r\n     return packages.filter(p => {\r\n       const matchQ = !query || p.trackingNumber.toLowerCase().includes(query) || p.recipientName.toLowerCase().includes(query) || p.senderName.toLowerCase().includes(query);\r\n       const matchStatus = status === 'all' || p.status === status;\r\n-      return matchQ && matchStatus;\r\n+      const matchStation = station === 'all' || p.station === station;\r\n+      return matchQ && matchStatus && matchStation;\r\n     });\r\n-  }, [packages, q, status]);\r\n+  }, [packages, q, status, station]);\r\n \r\n   const totals = useMemo(() => {\r\n     let boxes = 0, basins = 0, smallSacks = 0;\r\n     for (const p of filtered) {\r\n@@ -33,25 +36,63 @@\n     }\r\n     return { count: filtered.length, boxes, basins, smallSacks };\r\n   }, [filtered]);\r\n \r\n-  const updateStatus = (id: string, newStatus: 'registered' | 'in-transit' | 'delivered' | 'cancelled') => {\r\n-    setPackages(packages.map(p => p.id === id ? { ...p, status: newStatus } : p));\r\n+  const updateStatus = (ids: string[], newStatus: 'registered' | 'in-transit' | 'delivered' | 'cancelled') => {\r\n+    setPackages(packages.map(p => ids.includes(p.id) ? { ...p, status: newStatus } : p));\r\n+    setSelected({});\r\n   };\r\n \r\n+  const toggleAll = (checked: boolean) => {\r\n+    const next: Record<string, boolean> = {};\r\n+    if (checked) for (const p of filtered) next[p.id] = true;\r\n+    setSelected(next);\r\n+  };\r\n+\r\n+  const selectedIds = useMemo(() => Object.keys(selected).filter(id => selected[id]), [selected]);\r\n+\r\n+  const exportCSV = () => {\r\n+    const rows = [\r\n+      ['id','trackingNumber','station','recipientName','destination','status','registeredAt','boxes','basins','smallSacks']\r\n+    ];\r\n+    for (const p of filtered) {\r\n+      let b=0,bs=0,ss=0;\r\n+      if (p.notes) {\r\n+        for (const part of String(p.notes).split('|')) {\r\n+          const [k, v] = (part || '').split(':');\r\n+          const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n+          if (k === 'boxes') b += val;\r\n+          if (k === 'basins') bs += val;\r\n+          if (k === 'smallSacks') ss += val;\r\n+        }\r\n+      }\r\n+      rows.push([p.id,p.trackingNumber,p.station,p.recipientName,p.destination,p.status,p.registeredAt || '',String(b),String(bs),String(ss)]);\r\n+    }\r\n+    const csv = rows.map(r => r.map(x => `\"${String(x).replace(/\"/g,'\"\"')}\"`).join(',')).join('\\n');\r\n+    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n+    const url = URL.createObjectURL(blob);\r\n+    const a = document.createElement('a');\r\n+    a.href = url; a.download = 'packages.csv'; a.click();\r\n+    URL.revokeObjectURL(url);\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Package Management</h1>\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n           <FormInput label=\"Search\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Tracking, recipient, sender\" />\r\n           <FormSelect label=\"Status\" value={status} onChange={(v)=>setStatus(v as any)} options={[\r\n             { value: 'all', label: 'All' },\r\n             { value: 'registered', label: 'Registered' },\r\n             { value: 'in-transit', label: 'In Transit' },\r\n             { value: 'delivered', label: 'Delivered' },\r\n             { value: 'cancelled', label: 'Cancelled' },\r\n           ]} />\r\n+          <FormSelect label=\"Station\" value={station} onChange={(v)=>setStation(String(v))} options={[{value:'all',label:'All Stations'}, ...pickupStations.map(s=>({value:s.name,label:s.name}))]} />\r\n+          <div className=\"flex items-end\">\r\n+            <Button variant=\"outline\" className=\"w-full\" onClick={exportCSV}>Export CSV</Button>\r\n+          </div>\r\n         </div>\r\n         <div className=\"mt-4 grid grid-cols-4 gap-3 text-center\">\r\n           <div>\r\n             <div className=\"text-xs text-gray-500\">Packages</div>\r\n@@ -69,16 +110,26 @@\n             <div className=\"text-xs text-gray-500\">Small Sacks</div>\r\n             <div className=\"text-xl font-bold\">{totals.smallSacks}</div>\r\n           </div>\r\n         </div>\r\n+        {selectedIds.length > 0 && (\r\n+          <div className=\"mt-4 flex flex-wrap gap-2\">\r\n+            <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(selectedIds,'registered')}>Mark Registered</Button>\r\n+            <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(selectedIds,'in-transit')}>Mark In Transit</Button>\r\n+            <Button size=\"sm\" onClick={()=>updateStatus(selectedIds,'delivered')}>Mark Delivered</Button>\r\n+            <Button size=\"sm\" variant=\"destructive\" onClick={()=>updateStatus(selectedIds,'cancelled')}>Cancel</Button>\r\n+          </div>\r\n+        )}\r\n       </Card>\r\n \r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n         <div className=\"overflow-x-auto\">\r\n           <table className=\"min-w-full\">\r\n             <thead>\r\n               <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n+                <th className=\"py-2 pr-4\"><input type=\"checkbox\" onChange={(e)=>toggleAll(e.currentTarget.checked)} /></th>\r\n                 <th className=\"py-2 pr-4\">Tracking</th>\r\n+                <th className=\"py-2 pr-4\">Station</th>\r\n                 <th className=\"py-2 pr-4\">Recipient</th>\r\n                 <th className=\"py-2 pr-4\">Destination</th>\r\n                 <th className=\"py-2 pr-4\">Boxes</th>\r\n                 <th className=\"py-2 pr-4\">Basins</th>\r\n@@ -100,27 +151,29 @@\n                   }\r\n                 }\r\n                 return (\r\n                   <tr key={p.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n+                    <td className=\"py-2 pr-4\"><input type=\"checkbox\" checked={!!selected[p.id]} onChange={(e)=>setSelected({...selected,[p.id]:e.currentTarget.checked})} /></td>\r\n                     <td className=\"py-2 pr-4\">{p.trackingNumber}</td>\r\n+                    <td className=\"py-2 pr-4\">{p.station}</td>\r\n                     <td className=\"py-2 pr-4\">{p.recipientName}</td>\r\n                     <td className=\"py-2 pr-4\">{p.destination}</td>\r\n                     <td className=\"py-2 pr-4\">{b}</td>\r\n                     <td className=\"py-2 pr-4\">{bs}</td>\r\n                     <td className=\"py-2 pr-4\">{ss}</td>\r\n                     <td className=\"py-2 pr-4 capitalize\">{p.status}</td>\r\n                     <td className=\"py-2 pr-4 space-x-2\">\r\n-                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(p.id,'registered')}>Registered</Button>\r\n-                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(p.id,'in-transit')}>In Transit</Button>\r\n-                      <Button size=\"sm\" onClick={()=>updateStatus(p.id,'delivered')}>Delivered</Button>\r\n-                      <Button size=\"sm\" variant=\"destructive\" onClick={()=>updateStatus(p.id,'cancelled')}>Cancel</Button>\r\n+                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus([p.id],'registered')}>Registered</Button>\r\n+                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus([p.id],'in-transit')}>In Transit</Button>\r\n+                      <Button size=\"sm\" onClick={()=>updateStatus([p.id],'delivered')}>Delivered</Button>\r\n+                      <Button size=\"sm\" variant=\"destructive\" onClick={()=>updateStatus([p.id],'cancelled')}>Cancel</Button>\r\n                     </td>\r\n                   </tr>\r\n                 );\r\n               })}\r\n               {filtered.length === 0 && (\r\n                 <tr>\r\n-                  <td colSpan={8} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No packages</td>\r\n+                  <td colSpan={10} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No packages</td>\r\n                 </tr>\r\n               )}\r\n             </tbody>\r\n           </table>\r\n"
                },
                {
                    "date": 1761802038669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,23 +5,20 @@\n import { Button } from '../../components/Button';\r\n import { useApp } from '../../context/AppContext';\r\n \r\n export const PackagesPage: React.FC = () => {\r\n-  const { packages, setPackages, pickupStations } = useApp();\r\n+  const { packages, pickupStations } = useApp();\r\n   const [q, setQ] = useState('');\r\n-  const [status, setStatus] = useState<'all' | 'registered' | 'in-transit' | 'delivered' | 'cancelled'>('all');\r\n   const [station, setStation] = useState<string>('all');\r\n-  const [selected, setSelected] = useState<Record<string, boolean>>({});\r\n \r\n   const filtered = useMemo(() => {\r\n     const query = q.trim().toLowerCase();\r\n     return packages.filter(p => {\r\n       const matchQ = !query || p.trackingNumber.toLowerCase().includes(query) || p.recipientName.toLowerCase().includes(query) || p.senderName.toLowerCase().includes(query);\r\n-      const matchStatus = status === 'all' || p.status === status;\r\n       const matchStation = station === 'all' || p.station === station;\r\n-      return matchQ && matchStatus && matchStation;\r\n+      return matchQ && matchStation;\r\n     });\r\n-  }, [packages, q, status, station]);\r\n+  }, [packages, q, station]);\r\n \r\n   const totals = useMemo(() => {\r\n     let boxes = 0, basins = 0, smallSacks = 0;\r\n     for (const p of filtered) {\r\n@@ -36,24 +33,13 @@\n     }\r\n     return { count: filtered.length, boxes, basins, smallSacks };\r\n   }, [filtered]);\r\n \r\n-  const updateStatus = (ids: string[], newStatus: 'registered' | 'in-transit' | 'delivered' | 'cancelled') => {\r\n-    setPackages(packages.map(p => ids.includes(p.id) ? { ...p, status: newStatus } : p));\r\n-    setSelected({});\r\n-  };\r\n+  // Status/actions removed per request\r\n \r\n-  const toggleAll = (checked: boolean) => {\r\n-    const next: Record<string, boolean> = {};\r\n-    if (checked) for (const p of filtered) next[p.id] = true;\r\n-    setSelected(next);\r\n-  };\r\n-\r\n-  const selectedIds = useMemo(() => Object.keys(selected).filter(id => selected[id]), [selected]);\r\n-\r\n   const exportCSV = () => {\r\n     const rows = [\r\n-      ['id','trackingNumber','station','recipientName','destination','status','registeredAt','boxes','basins','smallSacks']\r\n+      ['id','trackingNumber','station','recipientName','destination','registeredAt','boxes','basins','smallSacks']\r\n     ];\r\n     for (const p of filtered) {\r\n       let b=0,bs=0,ss=0;\r\n       if (p.notes) {\r\n@@ -64,9 +50,9 @@\n           if (k === 'basins') bs += val;\r\n           if (k === 'smallSacks') ss += val;\r\n         }\r\n       }\r\n-      rows.push([p.id,p.trackingNumber,p.station,p.recipientName,p.destination,p.status,p.registeredAt || '',String(b),String(bs),String(ss)]);\r\n+      rows.push([p.id,p.trackingNumber,p.station,p.recipientName,p.destination,p.registeredAt || '',String(b),String(bs),String(ss)]);\r\n     }\r\n     const csv = rows.map(r => r.map(x => `\"${String(x).replace(/\"/g,'\"\"')}\"`).join(',')).join('\\n');\r\n     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n     const url = URL.createObjectURL(blob);\r\n@@ -78,17 +64,10 @@\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Package Management</h1>\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n           <FormInput label=\"Search\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Tracking, recipient, sender\" />\r\n-          <FormSelect label=\"Status\" value={status} onChange={(v)=>setStatus(v as any)} options={[\r\n-            { value: 'all', label: 'All' },\r\n-            { value: 'registered', label: 'Registered' },\r\n-            { value: 'in-transit', label: 'In Transit' },\r\n-            { value: 'delivered', label: 'Delivered' },\r\n-            { value: 'cancelled', label: 'Cancelled' },\r\n-          ]} />\r\n           <FormSelect label=\"Station\" value={station} onChange={(v)=>setStation(String(v))} options={[{value:'all',label:'All Stations'}, ...pickupStations.map(s=>({value:s.name,label:s.name}))]} />\r\n           <div className=\"flex items-end\">\r\n             <Button variant=\"outline\" className=\"w-full\" onClick={exportCSV}>Export CSV</Button>\r\n           </div>\r\n@@ -110,33 +89,23 @@\n             <div className=\"text-xs text-gray-500\">Small Sacks</div>\r\n             <div className=\"text-xl font-bold\">{totals.smallSacks}</div>\r\n           </div>\r\n         </div>\r\n-        {selectedIds.length > 0 && (\r\n-          <div className=\"mt-4 flex flex-wrap gap-2\">\r\n-            <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(selectedIds,'registered')}>Mark Registered</Button>\r\n-            <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus(selectedIds,'in-transit')}>Mark In Transit</Button>\r\n-            <Button size=\"sm\" onClick={()=>updateStatus(selectedIds,'delivered')}>Mark Delivered</Button>\r\n-            <Button size=\"sm\" variant=\"destructive\" onClick={()=>updateStatus(selectedIds,'cancelled')}>Cancel</Button>\r\n-          </div>\r\n-        )}\r\n+        {/* Status bulk actions removed */}\r\n       </Card>\r\n \r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n         <div className=\"overflow-x-auto\">\r\n           <table className=\"min-w-full\">\r\n             <thead>\r\n               <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n-                <th className=\"py-2 pr-4\"><input type=\"checkbox\" onChange={(e)=>toggleAll(e.currentTarget.checked)} /></th>\r\n                 <th className=\"py-2 pr-4\">Tracking</th>\r\n                 <th className=\"py-2 pr-4\">Station</th>\r\n                 <th className=\"py-2 pr-4\">Recipient</th>\r\n                 <th className=\"py-2 pr-4\">Destination</th>\r\n                 <th className=\"py-2 pr-4\">Boxes</th>\r\n                 <th className=\"py-2 pr-4\">Basins</th>\r\n                 <th className=\"py-2 pr-4\">Small Sacks</th>\r\n-                <th className=\"py-2 pr-4\">Status</th>\r\n-                <th className=\"py-2 pr-4\">Actions</th>\r\n               </tr>\r\n             </thead>\r\n             <tbody>\r\n               {filtered.map(p => {\r\n@@ -151,29 +120,21 @@\n                   }\r\n                 }\r\n                 return (\r\n                   <tr key={p.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n-                    <td className=\"py-2 pr-4\"><input type=\"checkbox\" checked={!!selected[p.id]} onChange={(e)=>setSelected({...selected,[p.id]:e.currentTarget.checked})} /></td>\r\n                     <td className=\"py-2 pr-4\">{p.trackingNumber}</td>\r\n                     <td className=\"py-2 pr-4\">{p.station}</td>\r\n                     <td className=\"py-2 pr-4\">{p.recipientName}</td>\r\n                     <td className=\"py-2 pr-4\">{p.destination}</td>\r\n                     <td className=\"py-2 pr-4\">{b}</td>\r\n                     <td className=\"py-2 pr-4\">{bs}</td>\r\n                     <td className=\"py-2 pr-4\">{ss}</td>\r\n-                    <td className=\"py-2 pr-4 capitalize\">{p.status}</td>\r\n-                    <td className=\"py-2 pr-4 space-x-2\">\r\n-                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus([p.id],'registered')}>Registered</Button>\r\n-                      <Button size=\"sm\" variant=\"outline\" onClick={()=>updateStatus([p.id],'in-transit')}>In Transit</Button>\r\n-                      <Button size=\"sm\" onClick={()=>updateStatus([p.id],'delivered')}>Delivered</Button>\r\n-                      <Button size=\"sm\" variant=\"destructive\" onClick={()=>updateStatus([p.id],'cancelled')}>Cancel</Button>\r\n-                    </td>\r\n                   </tr>\r\n                 );\r\n               })}\r\n               {filtered.length === 0 && (\r\n                 <tr>\r\n-                  <td colSpan={10} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No packages</td>\r\n+                  <td colSpan={8} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No packages</td>\r\n                 </tr>\r\n               )}\r\n             </tbody>\r\n           </table>\r\n"
                },
                {
                    "date": 1761803891478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,11 +94,11 @@\n       </Card>\r\n \r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n         <div className=\"overflow-x-auto\">\r\n-          <table className=\"min-w-full\">\r\n+          <table className=\"min-w-[720px] md:min-w-full text-xs md:text-sm\">\r\n             <thead>\r\n-              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n+              <tr className=\"text-left text-xs md:text-sm text-gray-600 dark:text-gray-300 sticky top-0 bg-white dark:bg-gray-800 z-10\">\r\n                 <th className=\"py-2 pr-4\">Tracking</th>\r\n                 <th className=\"py-2 pr-4\">Station</th>\r\n                 <th className=\"py-2 pr-4\">Recipient</th>\r\n                 <th className=\"py-2 pr-4\">Destination</th>\r\n@@ -119,9 +119,9 @@\n                     if (k === 'smallSacks') ss += val;\r\n                   }\r\n                 }\r\n                 return (\r\n-                  <tr key={p.id} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n+                  <tr key={p.id} className=\"border-t border-gray-200 dark:border-gray-700\">\r\n                     <td className=\"py-2 pr-4\">{p.trackingNumber}</td>\r\n                     <td className=\"py-2 pr-4\">{p.station}</td>\r\n                     <td className=\"py-2 pr-4\">{p.recipientName}</td>\r\n                     <td className=\"py-2 pr-4\">{p.destination}</td>\r\n"
                }
            ],
            "date": 1761636676955,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Card } from '../../components/Card';\r\n\r\nexport const PackagesPage: React.FC = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Package Management</h1>\r\n      <Card padding=\"lg\" variant=\"enhanced\">\r\n        <p className=\"text-gray-700 dark:text-gray-300\">Search and manage packages by status will appear here.</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}