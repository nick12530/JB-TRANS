{
    "sourceFile": "src/pages/DestinationRecords/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1759901847367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759901887539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useMemo } from 'react';\r\n-import { Plus, MapPin, Package, AlertTriangle, CheckCircle, Clock, Filter, Download, Eye, Edit, Trash2 } from 'lucide-react';\r\n+import { Plus, Package, AlertTriangle, CheckCircle, Filter, Download } from 'lucide-react';\r\n import { FormInput } from '../../components/FormInput';\r\n import { FormSelect } from '../../components/FormSelect';\r\n import { Modal } from '../../components/Modal';\r\n import { Card } from '../../components/Card';\r\n"
                },
                {
                    "date": 1759901960535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { Modal } from '../../components/Modal';\r\n import { Card } from '../../components/Card';\r\n import { DataTable } from '../../components/DataTable';\r\n import { useApp } from '../../context/AppContext';\r\n-import { DestinationRecord, DeliveryVerification } from '../../types';\r\n+import { DestinationRecord } from '../../types';\r\n import { formatDate, formatCurrency } from '../../utils/helpers';\r\n \r\n // Destination locations with their area codes\r\n const destinationLocations = {\r\n@@ -85,9 +85,9 @@\n   lastModifiedDate: new Date().toISOString(),\r\n };\r\n \r\n export const DestinationRecordsPage: React.FC = () => {\r\n-  const { sourceRecords, user } = useApp();\r\n+  const { user } = useApp();\r\n   const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n   const [isModalOpen, setIsModalOpen] = useState(false);\r\n   const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n   const [editingRecord, setEditingRecord] = useState<DestinationRecord | null>(null);\r\n@@ -164,9 +164,9 @@\n       ...formData,\r\n       quantityDifference,\r\n       totalRevenue,\r\n       hasDiscrepancy,\r\n-      discrepancyType: hasDiscrepancy ? (quantityDifference > 0 ? 'quantity' : 'quantity') : undefined,\r\n+      discrepancyType: hasDiscrepancy ? (quantityDifference > 0 ? 'quantity' as const : 'quantity' as const) : undefined,\r\n       discrepancyDescription: hasDiscrepancy ? \r\n         `Quantity difference: ${quantityDifference > 0 ? '+' : ''}${quantityDifference.toFixed(2)}kg` : undefined,\r\n       verifiedBy: user?.name || 'Unknown',\r\n       verificationDate: new Date().toISOString(),\r\n@@ -317,8 +317,34 @@\n       label: 'Revenue',\r\n       render: (value: number) => formatCurrency(value),\r\n       sortable: true,\r\n     },\r\n+    {\r\n+      key: 'actions' as any,\r\n+      label: 'Actions',\r\n+      render: (value: any, row: DestinationRecord) => (\r\n+        <div className=\"flex items-center space-x-2\">\r\n+          {row.deliveryStatus !== 'delivered' && (\r\n+            <button\r\n+              onClick={() => handleOpenVerificationModal(row)}\r\n+              className=\"p-1 text-green-600 hover:bg-green-100 dark:hover:bg-green-900/20 rounded\"\r\n+              title=\"Verify Delivery\"\r\n+            >\r\n+              <CheckCircle className=\"h-4 w-4\" />\r\n+            </button>\r\n+          )}\r\n+          {row.hasDiscrepancy && !row.discrepancyResolved && (\r\n+            <button\r\n+              onClick={() => handleResolveDiscrepancy(row)}\r\n+              className=\"p-1 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded\"\r\n+              title=\"Resolve Discrepancy\"\r\n+            >\r\n+              <AlertTriangle className=\"h-4 w-4\" />\r\n+            </button>\r\n+          )}\r\n+        </div>\r\n+      ),\r\n+    },\r\n   ];\r\n \r\n   // Calculate summary statistics\r\n   const summaryStats = useMemo(() => {\r\n@@ -507,22 +533,8 @@\n           columns={columns}\r\n           onEdit={handleOpenModal}\r\n           onDelete={handleDelete}\r\n           emptyMessage=\"No destination records yet. Click 'Add Record' to get started.\"\r\n-          actions={[\r\n-            {\r\n-              label: 'Verify',\r\n-              icon: CheckCircle,\r\n-              onClick: handleOpenVerificationModal,\r\n-              condition: (record: DestinationRecord) => record.deliveryStatus !== 'delivered',\r\n-            },\r\n-            {\r\n-              label: 'Resolve',\r\n-              icon: CheckCircle,\r\n-              onClick: handleResolveDiscrepancy,\r\n-              condition: (record: DestinationRecord) => record.hasDiscrepancy && !record.discrepancyResolved,\r\n-            },\r\n-          ]}\r\n         />\r\n       </Card>\r\n \r\n       {/* Add/Edit Modal */}\r\n"
                },
                {
                    "date": 1759901985994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n     },\r\n     {\r\n       key: 'actions' as any,\r\n       label: 'Actions',\r\n-      render: (value: any, row: DestinationRecord) => (\r\n+      render: (_: any, row: DestinationRecord) => (\r\n         <div className=\"flex items-center space-x-2\">\r\n           {row.deliveryStatus !== 'delivered' && (\r\n             <button\r\n               onClick={() => handleOpenVerificationModal(row)}\r\n"
                },
                {
                    "date": 1759916185847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState, useMemo } from 'react';\r\n-import { Plus, Package, AlertTriangle, CheckCircle, Filter, Download } from 'lucide-react';\r\n+import { Plus, Package, AlertTriangle, CheckCircle, Filter, Download, BarChart3, TrendingUp, RefreshCw } from 'lucide-react';\r\n+import { useNotificationService } from '../../services/notificationService';\r\n import { FormInput } from '../../components/FormInput';\r\n import { FormSelect } from '../../components/FormSelect';\r\n import { Modal } from '../../components/Modal';\r\n import { Card } from '../../components/Card';\r\n@@ -86,24 +87,32 @@\n };\r\n \r\n export const DestinationRecordsPage: React.FC = () => {\r\n   const { user } = useApp();\r\n+  const { showSuccessNotification, showErrorNotification } = useNotificationService();\r\n+  \r\n+  // Enhanced state management\r\n   const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n   const [isModalOpen, setIsModalOpen] = useState(false);\r\n   const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n   const [editingRecord, setEditingRecord] = useState<DestinationRecord | null>(null);\r\n   const [selectedRecord, setSelectedRecord] = useState<DestinationRecord | null>(null);\r\n   const [formData, setFormData] = useState<Omit<DestinationRecord, 'id' | 'totalRevenue' | 'quantityDifference'>>(defaultRecord);\r\n   const [errors, setErrors] = useState<Record<string, string>>({});\r\n   \r\n-  // Filter states\r\n+  // Enhanced filter states\r\n   const [filters, setFilters] = useState({\r\n     areaCode: 'all',\r\n     location: 'all',\r\n     status: 'all',\r\n     hasDiscrepancy: 'all',\r\n     dateRange: { start: '', end: '' },\r\n   });\r\n+  \r\n+  // Additional state for enhanced functionality\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\r\n+  const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');\r\n \r\n   const resetForm = () => {\r\n     setFormData(defaultRecord);\r\n     setErrors({});\r\n@@ -190,11 +199,62 @@\n \r\n   const handleDelete = (record: DestinationRecord) => {\r\n     if (window.confirm('Are you sure you want to delete this destination record?')) {\r\n       setDestinationRecords(destinationRecords.filter((r) => r.id !== record.id));\r\n+      showSuccessNotification('Success', 'Destination record deleted successfully');\r\n     }\r\n   };\r\n \r\n+  // Enhanced functionality functions\r\n+  const handleRefresh = async () => {\r\n+    setIsRefreshing(true);\r\n+    try {\r\n+      await new Promise(resolve => setTimeout(resolve, 1000));\r\n+      showSuccessNotification('Success', 'Data refreshed successfully');\r\n+    } catch (error) {\r\n+      showErrorNotification('Error', 'Failed to refresh data');\r\n+    } finally {\r\n+      setIsRefreshing(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleExport = async (format: 'csv' | 'excel' | 'pdf') => {\r\n+    try {\r\n+      await new Promise(resolve => setTimeout(resolve, 2000));\r\n+      showSuccessNotification('Success', `${format.toUpperCase()} export completed`);\r\n+    } catch (error) {\r\n+      showErrorNotification('Error', `Failed to export ${format.toUpperCase()}`);\r\n+    }\r\n+  };\r\n+\r\n+  const handleBulkDelete = () => {\r\n+    if (selectedRecords.length === 0) {\r\n+      showErrorNotification('Error', 'No records selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    if (window.confirm(`Are you sure you want to delete ${selectedRecords.length} records?`)) {\r\n+      setDestinationRecords(destinationRecords.filter(record => !selectedRecords.includes(record.id)));\r\n+      setSelectedRecords([]);\r\n+      showSuccessNotification('Success', `${selectedRecords.length} records deleted successfully`);\r\n+    }\r\n+  };\r\n+\r\n+  const handleBulkStatusUpdate = (newStatus: string) => {\r\n+    if (selectedRecords.length === 0) {\r\n+      showErrorNotification('Error', 'No records selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    setDestinationRecords(destinationRecords.map(record => \r\n+      selectedRecords.includes(record.id) \r\n+        ? { ...record, deliveryStatus: newStatus as any }\r\n+        : record\r\n+    ));\r\n+    setSelectedRecords([]);\r\n+    showSuccessNotification('Success', `${selectedRecords.length} records updated to ${newStatus}`);\r\n+  };\r\n+\r\n   const handleVerifyDelivery = (record: DestinationRecord) => {\r\n     const updatedRecord = {\r\n       ...record,\r\n       deliveryStatus: 'delivered' as const,\r\n"
                },
                {
                    "date": 1759916209713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,24 +425,41 @@\n   }, [filteredRecords]);\r\n \r\n   return (\r\n     <div className=\"space-y-6\">\r\n-      {/* Header */}\r\n-      <div className=\"flex items-center justify-between\">\r\n+      {/* Enhanced Header */}\r\n+      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n         <div>\r\n-          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Destination Records</h1>\r\n+          <h1 className=\"text-3xl font-bold text-gradient-purple\">Destination Records</h1>\r\n           <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n-            Track deliveries and verify goods received at destination points\r\n+            Track deliveries and verify goods received at destination points with enhanced analytics\r\n           </p>\r\n+          <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500 dark:text-gray-400\">\r\n+            <span>Last updated: {new Date().toLocaleString()}</span>\r\n+            <span>•</span>\r\n+            <span>{filteredRecords.length} of {destinationRecords.length} records</span>\r\n+          </div>\r\n         </div>\r\n         \r\n-        <div className=\"flex items-center space-x-3\">\r\n-          <button className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n-            <Download className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\r\n+        <div className=\"flex items-center gap-3\">\r\n+          <button\r\n+            onClick={handleRefresh}\r\n+            disabled={isRefreshing}\r\n+            className=\"btn-teal flex items-center gap-2\"\r\n+          >\r\n+            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n+            Refresh\r\n           </button>\r\n           <button\r\n+            onClick={() => handleExport('csv')}\r\n+            className=\"btn-blue flex items-center gap-2\"\r\n+          >\r\n+            <Download className=\"h-4 w-4\" />\r\n+            Export\r\n+          </button>\r\n+          <button\r\n             onClick={() => handleOpenModal()}\r\n-            className=\"flex items-center space-x-2 px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n+            className=\"btn-emerald flex items-center space-x-2\"\r\n           >\r\n             <Plus className=\"h-4 w-4\" />\r\n             <span>Add Record</span>\r\n           </button>\r\n"
                },
                {
                    "date": 1759916224681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,13 +465,24 @@\n           </button>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Filters */}\r\n-      <Card className=\"p-4\">\r\n-        <div className=\"flex items-center space-x-4 mb-4\">\r\n-          <Filter className=\"h-5 w-5 text-gray-500\" />\r\n-          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Filters</h3>\r\n+      {/* Enhanced Filters */}\r\n+      <Card variant=\"blue\" className=\"p-6\">\r\n+        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6\">\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <Filter className=\"h-5 w-5 text-gray-500\" />\r\n+            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Filters & Controls</h3>\r\n+          </div>\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <button\r\n+              onClick={() => setViewMode(viewMode === 'table' ? 'cards' : 'table')}\r\n+              className=\"btn-purple flex items-center gap-2\"\r\n+            >\r\n+              <BarChart3 className=\"h-4 w-4\" />\r\n+              {viewMode === 'table' ? 'Card View' : 'Table View'}\r\n+            </button>\r\n+          </div>\r\n         </div>\r\n         \r\n         <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n           <FormSelect\r\n"
                },
                {
                    "date": 1759916343445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -552,77 +552,77 @@\n       </Card>\r\n \r\n       {/* Summary Cards */}\r\n       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"blue\" className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-blue-500\">\r\n+            <div className=\"p-2 rounded-lg gradient-blue\">\r\n               <Package className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n             <div className=\"text-right\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Deliveries</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.totalDeliveries}</p>\r\n+              <p className=\"text-lg font-bold text-gradient-blue\">{summaryStats.totalDeliveries}</p>\r\n             </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"emerald\" className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-green-500\">\r\n+            <div className=\"p-2 rounded-lg gradient-emerald\">\r\n               <Package className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n             <div className=\"text-right\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Quantity</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(summaryStats.totalQuantity / 1000).toFixed(1)}K kg</p>\r\n+              <p className=\"text-lg font-bold text-gradient-emerald\">{(summaryStats.totalQuantity / 1000).toFixed(1)}K kg</p>\r\n             </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"purple\" className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-yellow-500\">\r\n-              <Package className=\"h-4 w-4 text-white\" />\r\n+            <div className=\"p-2 rounded-lg gradient-purple\">\r\n+              <BarChart3 className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n             <div className=\"text-right\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Revenue</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(summaryStats.totalRevenue / 1000).toFixed(0)}K</p>\r\n+              <p className=\"text-lg font-bold text-gradient-purple\">{(summaryStats.totalRevenue / 1000).toFixed(0)}K</p>\r\n             </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"red\" className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-red-500\">\r\n+            <div className=\"p-2 rounded-lg gradient-red\">\r\n               <AlertTriangle className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n             <div className=\"text-right\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Discrepancies</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.deliveriesWithDiscrepancy}</p>\r\n+              <p className=\"text-lg font-bold text-gradient-red\">{summaryStats.deliveriesWithDiscrepancy}</p>\r\n             </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-4\">\r\n+        <Card variant=\"lime\" className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div className=\"p-2 rounded-lg bg-purple-500\">\r\n+            <div className=\"p-2 rounded-lg gradient-lime\">\r\n               <CheckCircle className=\"h-4 w-4 text-white\" />\r\n             </div>\r\n             <div className=\"text-right\">\r\n               <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Delivery Rate</p>\r\n-              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.deliveryRate.toFixed(1)}%</p>\r\n+              <p className=\"text-lg font-bold text-gradient-lime\">{summaryStats.deliveryRate.toFixed(1)}%</p>\r\n             </div>\r\n           </div>\r\n         </Card>\r\n       </div>\r\n \r\n       {/* Data Table */}\r\n-      <Card className=\"p-6\">\r\n+      <Card variant=\"green\" className=\"p-6\">\r\n         <DataTable\r\n           data={filteredRecords}\r\n           columns={columns}\r\n           onEdit={handleOpenModal}\r\n           onDelete={handleDelete}\r\n-          emptyMessage=\"No destination records yet. Click 'Add Record' to get started.\"\r\n+          emptyMessage=\"No destination records found. Try adjusting your filters or click 'Add Record' to get started.\"\r\n         />\r\n       </Card>\r\n \r\n       {/* Add/Edit Modal */}\r\n@@ -879,15 +879,15 @@\n           <div className=\"flex justify-end space-x-3\">\r\n             <button\r\n               type=\"button\"\r\n               onClick={handleCloseModal}\r\n-              className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n+              className=\"btn-blue\"\r\n             >\r\n               Cancel\r\n             </button>\r\n             <button\r\n               type=\"submit\"\r\n-              className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n+              className=\"btn-emerald\"\r\n             >\r\n               {editingRecord ? 'Update Record' : 'Add Record'}\r\n             </button>\r\n           </div>\r\n"
                },
                {
                    "date": 1759916376797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -929,15 +929,15 @@\n \r\n             <div className=\"flex justify-end space-x-3\">\r\n               <button\r\n                 onClick={() => setIsVerificationModalOpen(false)}\r\n-                className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n+                className=\"btn-blue\"\r\n               >\r\n                 Cancel\r\n               </button>\r\n               <button\r\n                 onClick={() => handleVerifyDelivery(selectedRecord)}\r\n-                className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n+                className=\"btn-emerald\"\r\n               >\r\n                 Verify Delivery\r\n               </button>\r\n             </div>\r\n"
                },
                {
                    "date": 1759916447432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useMemo } from 'react';\r\n-import { Plus, Package, AlertTriangle, CheckCircle, Filter, Download, BarChart3, TrendingUp, RefreshCw } from 'lucide-react';\r\n+import { Plus, Package, AlertTriangle, CheckCircle, Filter, Download, BarChart3, RefreshCw } from 'lucide-react';\r\n import { useNotificationService } from '../../services/notificationService';\r\n import { FormInput } from '../../components/FormInput';\r\n import { FormSelect } from '../../components/FormSelect';\r\n import { Modal } from '../../components/Modal';\r\n@@ -225,36 +225,9 @@\n       showErrorNotification('Error', `Failed to export ${format.toUpperCase()}`);\r\n     }\r\n   };\r\n \r\n-  const handleBulkDelete = () => {\r\n-    if (selectedRecords.length === 0) {\r\n-      showErrorNotification('Error', 'No records selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    if (window.confirm(`Are you sure you want to delete ${selectedRecords.length} records?`)) {\r\n-      setDestinationRecords(destinationRecords.filter(record => !selectedRecords.includes(record.id)));\r\n-      setSelectedRecords([]);\r\n-      showSuccessNotification('Success', `${selectedRecords.length} records deleted successfully`);\r\n-    }\r\n-  };\r\n \r\n-  const handleBulkStatusUpdate = (newStatus: string) => {\r\n-    if (selectedRecords.length === 0) {\r\n-      showErrorNotification('Error', 'No records selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    setDestinationRecords(destinationRecords.map(record => \r\n-      selectedRecords.includes(record.id) \r\n-        ? { ...record, deliveryStatus: newStatus as any }\r\n-        : record\r\n-    ));\r\n-    setSelectedRecords([]);\r\n-    showSuccessNotification('Success', `${selectedRecords.length} records updated to ${newStatus}`);\r\n-  };\r\n-\r\n   const handleVerifyDelivery = (record: DestinationRecord) => {\r\n     const updatedRecord = {\r\n       ...record,\r\n       deliveryStatus: 'delivered' as const,\r\n"
                },
                {
                    "date": 1759917765850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -597,14 +597,16 @@\n           emptyMessage=\"No destination records found. Try adjusting your filters or click 'Add Record' to get started.\"\r\n         />\r\n       </Card>\r\n \r\n-      {/* Add/Edit Modal */}\r\n+      {/* Enhanced Add/Edit Modal */}\r\n       <Modal\r\n         isOpen={isModalOpen}\r\n         onClose={handleCloseModal}\r\n         title={editingRecord ? 'Edit Destination Record' : 'Add Destination Record'}\r\n-        size=\"lg\"\r\n+        size=\"xl\"\r\n+        type=\"info\"\r\n+        icon={<MapPin className=\"h-6 w-6\" />}\r\n       >\r\n         <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n           {/* Basic Info */}\r\n           <div>\r\n@@ -866,14 +868,16 @@\n           </div>\r\n         </form>\r\n       </Modal>\r\n \r\n-      {/* Verification Modal */}\r\n+      {/* Enhanced Verification Modal */}\r\n       <Modal\r\n         isOpen={isVerificationModalOpen}\r\n         onClose={() => setIsVerificationModalOpen(false)}\r\n         title=\"Verify Delivery\"\r\n         size=\"md\"\r\n+        type=\"warning\"\r\n+        icon={<CheckCircle className=\"h-6 w-6\" />}\r\n       >\r\n         {selectedRecord && (\r\n           <div className=\"space-y-4\">\r\n             <div className=\"p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n"
                },
                {
                    "date": 1759918578221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useMemo } from 'react';\r\n-import { Plus, Package, AlertTriangle, CheckCircle, Filter, Download, BarChart3, RefreshCw } from 'lucide-react';\r\n+import { Plus, Package, AlertTriangle, CheckCircle, Filter, Download, BarChart3, RefreshCw, MapPin } from 'lucide-react';\r\n import { useNotificationService } from '../../services/notificationService';\r\n import { FormInput } from '../../components/FormInput';\r\n import { FormSelect } from '../../components/FormSelect';\r\n import { Modal } from '../../components/Modal';\r\n@@ -109,9 +109,8 @@\n   });\r\n   \r\n   // Additional state for enhanced functionality\r\n   const [isRefreshing, setIsRefreshing] = useState(false);\r\n-  const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\r\n   const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');\r\n \r\n   const resetForm = () => {\r\n     setFormData(defaultRecord);\r\n"
                },
                {
                    "date": 1760598580021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,51 +11,43 @@\n import { formatDate, formatCurrency } from '../../utils/helpers';\r\n \r\n // Destination locations with their area codes\r\n const destinationLocations = {\r\n-  'AC001': [ // Central Highlands\r\n-    { location: 'Meru Town Market', type: 'market' },\r\n-    { location: 'Maua Wholesale Center', type: 'wholesale' },\r\n-    { location: 'Chuka Retail Hub', type: 'retail' },\r\n-    { location: 'Nkubu Export Center', type: 'export' },\r\n-    { location: 'Mitunguu Warehouse', type: 'warehouse' },\r\n+  'AC001': [ // Embu Area\r\n+    { location: 'Embu Town Market', type: 'market' },\r\n+    { location: 'Embu Wholesale Center', type: 'wholesale' },\r\n+    { location: 'Embu Retail Hub', type: 'retail' },\r\n+    { location: 'Embu Export Center', type: 'export' },\r\n+    { location: 'Embu Warehouse', type: 'warehouse' },\r\n   ],\r\n-  'AC002': [ // Eastern Plains\r\n-    { location: 'Kitui Central Market', type: 'market' },\r\n-    { location: 'Mwingi Wholesale', type: 'wholesale' },\r\n-    { location: 'Mutomo Retail', type: 'retail' },\r\n-    { location: 'Kibwezi Export', type: 'export' },\r\n-    { location: 'Makindu Warehouse', type: 'warehouse' },\r\n+  'AC002': [ // Mecca Area\r\n+    { location: 'Mecca Central Market', type: 'market' },\r\n+    { location: 'Mecca Wholesale', type: 'wholesale' },\r\n+    { location: 'Mecca Retail', type: 'retail' },\r\n+    { location: 'Mecca Export', type: 'export' },\r\n+    { location: 'Mecca Warehouse', type: 'warehouse' },\r\n   ],\r\n-  'AC003': [ // Coastal Region\r\n-    { location: 'Mombasa CBD Market', type: 'market' },\r\n-    { location: 'Kilifi Wholesale', type: 'wholesale' },\r\n-    { location: 'Malindi Retail', type: 'retail' },\r\n-    { location: 'Watamu Export', type: 'export' },\r\n-    { location: 'Diani Warehouse', type: 'warehouse' },\r\n+  'AC003': [ // Ena Area\r\n+    { location: 'Ena CBD Market', type: 'market' },\r\n+    { location: 'Ena Wholesale', type: 'wholesale' },\r\n+    { location: 'Ena Retail', type: 'retail' },\r\n+    { location: 'Ena Export', type: 'export' },\r\n+    { location: 'Ena Warehouse', type: 'warehouse' },\r\n   ],\r\n-  'AC004': [ // Northern Frontier\r\n-    { location: 'Garissa Central Market', type: 'market' },\r\n-    { location: 'Dadaab Wholesale', type: 'wholesale' },\r\n-    { location: 'Fafi Retail', type: 'retail' },\r\n-    { location: 'Hulugho Export', type: 'export' },\r\n-    { location: 'Ijara Warehouse', type: 'warehouse' },\r\n+  'AC004': [ // Ugweri Area\r\n+    { location: 'Ugweri Central Market', type: 'market' },\r\n+    { location: 'Ugweri Wholesale', type: 'wholesale' },\r\n+    { location: 'Ugweri Retail', type: 'retail' },\r\n+    { location: 'Ugweri Export', type: 'export' },\r\n+    { location: 'Ugweri Warehouse', type: 'warehouse' },\r\n   ],\r\n-  'AC005': [ // Metropolitan Area\r\n-    { location: 'Nairobi CBD Market', type: 'market' },\r\n-    { location: 'Eastleigh Wholesale', type: 'wholesale' },\r\n-    { location: 'Kasarani Retail', type: 'retail' },\r\n-    { location: 'Ruaraka Export', type: 'export' },\r\n-    { location: 'Kahawa Warehouse', type: 'warehouse' },\r\n-  ],\r\n };\r\n \r\n const areaCodes = [\r\n-  { code: 'AC001', name: 'Central Highlands', region: 'Meru County' },\r\n-  { code: 'AC002', name: 'Eastern Plains', region: 'Kitui County' },\r\n-  { code: 'AC003', name: 'Coastal Region', region: 'Mombasa County' },\r\n-  { code: 'AC004', name: 'Northern Frontier', region: 'Garissa County' },\r\n-  { code: 'AC005', name: 'Metropolitan Area', region: 'Nairobi County' },\r\n+  { code: 'AC001', name: 'Embu Area', region: 'Embu County' },\r\n+  { code: 'AC002', name: 'Mecca Area', region: 'Mecca Region' },\r\n+  { code: 'AC003', name: 'Ena Area', region: 'Ena Region' },\r\n+  { code: 'AC004', name: 'Ugweri Area', region: 'Ugweri Region' },\r\n ];\r\n \r\n const defaultRecord: Omit<DestinationRecord, 'id' | 'totalRevenue' | 'quantityDifference'> = {\r\n   date: new Date().toISOString().split('T')[0],\r\n"
                },
                {
                    "date": 1760601025476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,10 @@\n   hasDiscrepancy: false,\r\n   discrepancyResolved: false,\r\n   lastModifiedBy: '',\r\n   lastModifiedDate: new Date().toISOString(),\r\n+  createdAt: new Date().toISOString(),\r\n+  updatedAt: new Date().toISOString(),\r\n };\r\n \r\n export const DestinationRecordsPage: React.FC = () => {\r\n   const { user } = useApp();\r\n@@ -806,9 +808,9 @@\n               <FormInput\r\n                 label=\"Delivery Time\"\r\n                 type=\"datetime-local\"\r\n                 value={formData.deliveryTime}\r\n-                onChange={(value) => setFormData({ ...formData, deliveryTime: value as string })}\r\n+                onChange={(value) => setFormData({ ...formData, deliveryTime: value as string || '' })}\r\n                 error={errors.deliveryTime}\r\n                 required\r\n               />\r\n \r\n"
                },
                {
                    "date": 1760601102182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -807,9 +807,9 @@\n \r\n               <FormInput\r\n                 label=\"Delivery Time\"\r\n                 type=\"datetime-local\"\r\n-                value={formData.deliveryTime}\r\n+                value={formData.deliveryTime || ''}\r\n                 onChange={(value) => setFormData({ ...formData, deliveryTime: value as string || '' })}\r\n                 error={errors.deliveryTime}\r\n                 required\r\n               />\r\n"
                }
            ],
            "date": 1759901847367,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react';\r\nimport { Plus, MapPin, Package, AlertTriangle, CheckCircle, Clock, Filter, Download, Eye, Edit, Trash2 } from 'lucide-react';\r\nimport { FormInput } from '../../components/FormInput';\r\nimport { FormSelect } from '../../components/FormSelect';\r\nimport { Modal } from '../../components/Modal';\r\nimport { Card } from '../../components/Card';\r\nimport { DataTable } from '../../components/DataTable';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { DestinationRecord, DeliveryVerification } from '../../types';\r\nimport { formatDate, formatCurrency } from '../../utils/helpers';\r\n\r\n// Destination locations with their area codes\r\nconst destinationLocations = {\r\n  'AC001': [ // Central Highlands\r\n    { location: 'Meru Town Market', type: 'market' },\r\n    { location: 'Maua Wholesale Center', type: 'wholesale' },\r\n    { location: 'Chuka Retail Hub', type: 'retail' },\r\n    { location: 'Nkubu Export Center', type: 'export' },\r\n    { location: 'Mitunguu Warehouse', type: 'warehouse' },\r\n  ],\r\n  'AC002': [ // Eastern Plains\r\n    { location: 'Kitui Central Market', type: 'market' },\r\n    { location: 'Mwingi Wholesale', type: 'wholesale' },\r\n    { location: 'Mutomo Retail', type: 'retail' },\r\n    { location: 'Kibwezi Export', type: 'export' },\r\n    { location: 'Makindu Warehouse', type: 'warehouse' },\r\n  ],\r\n  'AC003': [ // Coastal Region\r\n    { location: 'Mombasa CBD Market', type: 'market' },\r\n    { location: 'Kilifi Wholesale', type: 'wholesale' },\r\n    { location: 'Malindi Retail', type: 'retail' },\r\n    { location: 'Watamu Export', type: 'export' },\r\n    { location: 'Diani Warehouse', type: 'warehouse' },\r\n  ],\r\n  'AC004': [ // Northern Frontier\r\n    { location: 'Garissa Central Market', type: 'market' },\r\n    { location: 'Dadaab Wholesale', type: 'wholesale' },\r\n    { location: 'Fafi Retail', type: 'retail' },\r\n    { location: 'Hulugho Export', type: 'export' },\r\n    { location: 'Ijara Warehouse', type: 'warehouse' },\r\n  ],\r\n  'AC005': [ // Metropolitan Area\r\n    { location: 'Nairobi CBD Market', type: 'market' },\r\n    { location: 'Eastleigh Wholesale', type: 'wholesale' },\r\n    { location: 'Kasarani Retail', type: 'retail' },\r\n    { location: 'Ruaraka Export', type: 'export' },\r\n    { location: 'Kahawa Warehouse', type: 'warehouse' },\r\n  ],\r\n};\r\n\r\nconst areaCodes = [\r\n  { code: 'AC001', name: 'Central Highlands', region: 'Meru County' },\r\n  { code: 'AC002', name: 'Eastern Plains', region: 'Kitui County' },\r\n  { code: 'AC003', name: 'Coastal Region', region: 'Mombasa County' },\r\n  { code: 'AC004', name: 'Northern Frontier', region: 'Garissa County' },\r\n  { code: 'AC005', name: 'Metropolitan Area', region: 'Nairobi County' },\r\n];\r\n\r\nconst defaultRecord: Omit<DestinationRecord, 'id' | 'totalRevenue' | 'quantityDifference'> = {\r\n  date: new Date().toISOString().split('T')[0],\r\n  transportCode: '',\r\n  sourceAreaCode: '',\r\n  sourceStationCode: '',\r\n  destinationAreaCode: '',\r\n  destinationLocation: '',\r\n  destinationType: 'market',\r\n  buyerName: '',\r\n  buyerId: '',\r\n  buyerPhone: '',\r\n  buyerType: 'individual',\r\n  quantityExpected: 0,\r\n  quantityReceived: 0,\r\n  condition: 'good',\r\n  itemPrice: 0,\r\n  deliveryTime: '',\r\n  deliveryStatus: 'pending',\r\n  driverName: '',\r\n  driverId: '',\r\n  vehicleReg: '',\r\n  verifiedBy: '',\r\n  verificationDate: '',\r\n  hasDiscrepancy: false,\r\n  discrepancyResolved: false,\r\n  lastModifiedBy: '',\r\n  lastModifiedDate: new Date().toISOString(),\r\n};\r\n\r\nexport const DestinationRecordsPage: React.FC = () => {\r\n  const { sourceRecords, user } = useApp();\r\n  const [destinationRecords, setDestinationRecords] = useState<DestinationRecord[]>([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n  const [editingRecord, setEditingRecord] = useState<DestinationRecord | null>(null);\r\n  const [selectedRecord, setSelectedRecord] = useState<DestinationRecord | null>(null);\r\n  const [formData, setFormData] = useState<Omit<DestinationRecord, 'id' | 'totalRevenue' | 'quantityDifference'>>(defaultRecord);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  \r\n  // Filter states\r\n  const [filters, setFilters] = useState({\r\n    areaCode: 'all',\r\n    location: 'all',\r\n    status: 'all',\r\n    hasDiscrepancy: 'all',\r\n    dateRange: { start: '', end: '' },\r\n  });\r\n\r\n  const resetForm = () => {\r\n    setFormData(defaultRecord);\r\n    setErrors({});\r\n    setEditingRecord(null);\r\n  };\r\n\r\n  const handleOpenModal = (record?: DestinationRecord) => {\r\n    if (record) {\r\n      setEditingRecord(record);\r\n      const { id, totalRevenue, quantityDifference, ...recordData } = record;\r\n      setFormData(recordData);\r\n    } else {\r\n      resetForm();\r\n    }\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    resetForm();\r\n  };\r\n\r\n  const handleOpenVerificationModal = (record: DestinationRecord) => {\r\n    setSelectedRecord(record);\r\n    setIsVerificationModalOpen(true);\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.date) newErrors.date = 'Date is required';\r\n    if (!formData.transportCode) newErrors.transportCode = 'Transport code is required';\r\n    if (!formData.sourceAreaCode) newErrors.sourceAreaCode = 'Source area code is required';\r\n    if (!formData.destinationAreaCode) newErrors.destinationAreaCode = 'Destination area code is required';\r\n    if (!formData.destinationLocation) newErrors.destinationLocation = 'Destination location is required';\r\n    if (!formData.buyerName) newErrors.buyerName = 'Buyer name is required';\r\n    if (!formData.buyerPhone) newErrors.buyerPhone = 'Buyer phone is required';\r\n    if (!formData.quantityExpected || formData.quantityExpected <= 0) newErrors.quantityExpected = 'Valid expected quantity is required';\r\n    if (!formData.quantityReceived || formData.quantityReceived <= 0) newErrors.quantityReceived = 'Valid received quantity is required';\r\n    if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\r\n    if (!formData.driverName) newErrors.driverName = 'Driver name is required';\r\n    if (!formData.deliveryTime) newErrors.deliveryTime = 'Delivery time is required';\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) return;\r\n\r\n    const quantityDifference = formData.quantityReceived - formData.quantityExpected;\r\n    const totalRevenue = formData.quantityReceived * formData.itemPrice;\r\n    const hasDiscrepancy = Math.abs(quantityDifference) > 0.1; // Allow 0.1kg tolerance\r\n\r\n    const newRecord = {\r\n      ...formData,\r\n      quantityDifference,\r\n      totalRevenue,\r\n      hasDiscrepancy,\r\n      discrepancyType: hasDiscrepancy ? (quantityDifference > 0 ? 'quantity' : 'quantity') : undefined,\r\n      discrepancyDescription: hasDiscrepancy ? \r\n        `Quantity difference: ${quantityDifference > 0 ? '+' : ''}${quantityDifference.toFixed(2)}kg` : undefined,\r\n      verifiedBy: user?.name || 'Unknown',\r\n      verificationDate: new Date().toISOString(),\r\n      lastModifiedBy: user?.name || 'Unknown',\r\n      lastModifiedDate: new Date().toISOString(),\r\n    };\r\n\r\n    if (editingRecord) {\r\n      setDestinationRecords(\r\n        destinationRecords.map((record) =>\r\n          record.id === editingRecord.id ? { ...newRecord, id: editingRecord.id } : record\r\n        )\r\n      );\r\n    } else {\r\n      const id = `DST-${Date.now()}`;\r\n      setDestinationRecords([...destinationRecords, { ...newRecord, id }]);\r\n    }\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleDelete = (record: DestinationRecord) => {\r\n    if (window.confirm('Are you sure you want to delete this destination record?')) {\r\n      setDestinationRecords(destinationRecords.filter((r) => r.id !== record.id));\r\n    }\r\n  };\r\n\r\n  const handleVerifyDelivery = (record: DestinationRecord) => {\r\n    const updatedRecord = {\r\n      ...record,\r\n      deliveryStatus: 'delivered' as const,\r\n      verificationDate: new Date().toISOString(),\r\n      verifiedBy: user?.name || 'Unknown',\r\n      lastModifiedBy: user?.name || 'Unknown',\r\n      lastModifiedDate: new Date().toISOString(),\r\n    };\r\n    \r\n    setDestinationRecords(\r\n      destinationRecords.map((r) => r.id === record.id ? updatedRecord : r)\r\n    );\r\n    setIsVerificationModalOpen(false);\r\n  };\r\n\r\n  const handleResolveDiscrepancy = (record: DestinationRecord) => {\r\n    const updatedRecord = {\r\n      ...record,\r\n      discrepancyResolved: true,\r\n      lastModifiedBy: user?.name || 'Unknown',\r\n      lastModifiedDate: new Date().toISOString(),\r\n    };\r\n    \r\n    setDestinationRecords(\r\n      destinationRecords.map((r) => r.id === record.id ? updatedRecord : r)\r\n    );\r\n  };\r\n\r\n  // Filter records based on current filters\r\n  const filteredRecords = useMemo(() => {\r\n    return destinationRecords.filter(record => {\r\n      if (filters.areaCode !== 'all' && record.destinationAreaCode !== filters.areaCode) return false;\r\n      if (filters.location !== 'all' && record.destinationLocation !== filters.location) return false;\r\n      if (filters.status !== 'all' && record.deliveryStatus !== filters.status) return false;\r\n      if (filters.hasDiscrepancy !== 'all') {\r\n        if (filters.hasDiscrepancy === 'yes' && !record.hasDiscrepancy) return false;\r\n        if (filters.hasDiscrepancy === 'no' && record.hasDiscrepancy) return false;\r\n      }\r\n      if (filters.dateRange.start && record.date < filters.dateRange.start) return false;\r\n      if (filters.dateRange.end && record.date > filters.dateRange.end) return false;\r\n      return true;\r\n    });\r\n  }, [destinationRecords, filters]);\r\n\r\n  const columns = [\r\n    {\r\n      key: 'date' as keyof DestinationRecord,\r\n      label: 'Date',\r\n      render: (value: string) => formatDate(value),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'transportCode' as keyof DestinationRecord,\r\n      label: 'Transport Code',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'sourceAreaCode' as keyof DestinationRecord,\r\n      label: 'Source Area',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'destinationLocation' as keyof DestinationRecord,\r\n      label: 'Destination',\r\n      render: (value: string, row: DestinationRecord) => (\r\n        <div>\r\n          <p className=\"font-medium text-gray-900 dark:text-gray-100\">{value}</p>\r\n          <p className=\"text-xs text-gray-500\">{row.destinationAreaCode}</p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'buyerName' as keyof DestinationRecord,\r\n      label: 'Buyer',\r\n      render: (value: string, row: DestinationRecord) => (\r\n        <div>\r\n          <p className=\"font-medium text-gray-900 dark:text-gray-100\">{value}</p>\r\n          <p className=\"text-xs text-gray-500\">{row.buyerPhone}</p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'quantityReceived' as keyof DestinationRecord,\r\n      label: 'Quantity',\r\n      render: (value: number, row: DestinationRecord) => (\r\n        <div>\r\n          <p className=\"font-medium text-gray-900 dark:text-gray-100\">{value}kg</p>\r\n          <p className={`text-xs ${row.quantityDifference > 0 ? 'text-green-600' : row.quantityDifference < 0 ? 'text-red-600' : 'text-gray-500'}`}>\r\n            {row.quantityDifference > 0 ? '+' : ''}{row.quantityDifference.toFixed(1)}kg\r\n          </p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'deliveryStatus' as keyof DestinationRecord,\r\n      label: 'Status',\r\n      render: (value: string, row: DestinationRecord) => (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n            value === 'delivered' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\r\n            value === 'in-transit' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200' :\r\n            value === 'failed' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200' :\r\n            value === 'disputed' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-200' :\r\n            'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-200'\r\n          }`}>\r\n            {value}\r\n          </span>\r\n          {row.hasDiscrepancy && !row.discrepancyResolved && (\r\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\r\n          )}\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'totalRevenue' as keyof DestinationRecord,\r\n      label: 'Revenue',\r\n      render: (value: number) => formatCurrency(value),\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  // Calculate summary statistics\r\n  const summaryStats = useMemo(() => {\r\n    const totalDeliveries = filteredRecords.length;\r\n    const totalQuantity = filteredRecords.reduce((sum, record) => sum + record.quantityReceived, 0);\r\n    const totalRevenue = filteredRecords.reduce((sum, record) => sum + record.totalRevenue, 0);\r\n    const deliveriesWithDiscrepancy = filteredRecords.filter(record => record.hasDiscrepancy && !record.discrepancyResolved).length;\r\n    const deliveredCount = filteredRecords.filter(record => record.deliveryStatus === 'delivered').length;\r\n    const deliveryRate = totalDeliveries > 0 ? (deliveredCount / totalDeliveries) * 100 : 0;\r\n\r\n    return {\r\n      totalDeliveries,\r\n      totalQuantity,\r\n      totalRevenue,\r\n      deliveriesWithDiscrepancy,\r\n      deliveryRate,\r\n    };\r\n  }, [filteredRecords]);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Destination Records</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Track deliveries and verify goods received at destination points\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-3\">\r\n          <button className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n            <Download className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\r\n          </button>\r\n          <button\r\n            onClick={() => handleOpenModal()}\r\n            className=\"flex items-center space-x-2 px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n          >\r\n            <Plus className=\"h-4 w-4\" />\r\n            <span>Add Record</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <Card className=\"p-4\">\r\n        <div className=\"flex items-center space-x-4 mb-4\">\r\n          <Filter className=\"h-5 w-5 text-gray-500\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Filters</h3>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n          <FormSelect\r\n            label=\"Area Code\"\r\n            value={filters.areaCode}\r\n            onChange={(value) => setFilters({ ...filters, areaCode: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Areas' },\r\n              ...areaCodes.map(area => ({ value: area.code, label: `${area.code} - ${area.name}` }))\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Location\"\r\n            value={filters.location}\r\n            onChange={(value) => setFilters({ ...filters, location: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Locations' },\r\n              ...(filters.areaCode !== 'all' ? \r\n                destinationLocations[filters.areaCode as keyof typeof destinationLocations]?.map(loc => ({\r\n                  value: loc.location,\r\n                  label: loc.location\r\n                })) || [] : [])\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Status\"\r\n            value={filters.status}\r\n            onChange={(value) => setFilters({ ...filters, status: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Status' },\r\n              { value: 'pending', label: 'Pending' },\r\n              { value: 'in-transit', label: 'In Transit' },\r\n              { value: 'delivered', label: 'Delivered' },\r\n              { value: 'failed', label: 'Failed' },\r\n              { value: 'disputed', label: 'Disputed' },\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Discrepancy\"\r\n            value={filters.hasDiscrepancy}\r\n            onChange={(value) => setFilters({ ...filters, hasDiscrepancy: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Records' },\r\n              { value: 'yes', label: 'With Discrepancy' },\r\n              { value: 'no', label: 'No Discrepancy' },\r\n            ]}\r\n          />\r\n          \r\n          <div className=\"flex space-x-2\">\r\n            <FormInput\r\n              label=\"Start Date\"\r\n              type=\"date\"\r\n              value={filters.dateRange.start}\r\n              onChange={(value) => setFilters({ ...filters, dateRange: { ...filters.dateRange, start: value as string } })}\r\n            />\r\n            <FormInput\r\n              label=\"End Date\"\r\n              type=\"date\"\r\n              value={filters.dateRange.end}\r\n              onChange={(value) => setFilters({ ...filters, dateRange: { ...filters.dateRange, end: value as string } })}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-blue-500\">\r\n              <Package className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Deliveries</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.totalDeliveries}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-green-500\">\r\n              <Package className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Quantity</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(summaryStats.totalQuantity / 1000).toFixed(1)}K kg</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-yellow-500\">\r\n              <Package className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Revenue</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{(summaryStats.totalRevenue / 1000).toFixed(0)}K</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-red-500\">\r\n              <AlertTriangle className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Discrepancies</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.deliveriesWithDiscrepancy}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-purple-500\">\r\n              <CheckCircle className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Delivery Rate</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.deliveryRate.toFixed(1)}%</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Data Table */}\r\n      <Card className=\"p-6\">\r\n        <DataTable\r\n          data={filteredRecords}\r\n          columns={columns}\r\n          onEdit={handleOpenModal}\r\n          onDelete={handleDelete}\r\n          emptyMessage=\"No destination records yet. Click 'Add Record' to get started.\"\r\n          actions={[\r\n            {\r\n              label: 'Verify',\r\n              icon: CheckCircle,\r\n              onClick: handleOpenVerificationModal,\r\n              condition: (record: DestinationRecord) => record.deliveryStatus !== 'delivered',\r\n            },\r\n            {\r\n              label: 'Resolve',\r\n              icon: CheckCircle,\r\n              onClick: handleResolveDiscrepancy,\r\n              condition: (record: DestinationRecord) => record.hasDiscrepancy && !record.discrepancyResolved,\r\n            },\r\n          ]}\r\n        />\r\n      </Card>\r\n\r\n      {/* Add/Edit Modal */}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        title={editingRecord ? 'Edit Destination Record' : 'Add Destination Record'}\r\n        size=\"lg\"\r\n      >\r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          {/* Basic Info */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Basic Information</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormInput\r\n                label=\"Date\"\r\n                type=\"date\"\r\n                value={formData.date}\r\n                onChange={(value) => setFormData({ ...formData, date: value as string })}\r\n                error={errors.date}\r\n                required\r\n              />\r\n\r\n              <FormInput\r\n                label=\"Transport Code\"\r\n                type=\"text\"\r\n                value={formData.transportCode}\r\n                onChange={(value) => setFormData({ ...formData, transportCode: value as string })}\r\n                error={errors.transportCode}\r\n                required\r\n                placeholder=\"e.g., TRIP-001\"\r\n              />\r\n\r\n              <FormSelect\r\n                label=\"Source Area Code\"\r\n                value={formData.sourceAreaCode}\r\n                onChange={(value) => setFormData({ ...formData, sourceAreaCode: value as string })}\r\n                options={areaCodes.map(area => ({ value: area.code, label: `${area.code} - ${area.name}` }))}\r\n                error={errors.sourceAreaCode}\r\n                required\r\n              />\r\n\r\n              <FormSelect\r\n                label=\"Destination Area Code\"\r\n                value={formData.destinationAreaCode}\r\n                onChange={(value) => setFormData({ ...formData, destinationAreaCode: value as string })}\r\n                options={areaCodes.map(area => ({ value: area.code, label: `${area.code} - ${area.name}` }))}\r\n                error={errors.destinationAreaCode}\r\n                required\r\n              />\r\n\r\n              <FormSelect\r\n                label=\"Destination Location\"\r\n                value={formData.destinationLocation}\r\n                onChange={(value) => setFormData({ ...formData, destinationLocation: value as string })}\r\n                options={formData.destinationAreaCode ? \r\n                  destinationLocations[formData.destinationAreaCode as keyof typeof destinationLocations]?.map(loc => ({\r\n                    value: loc.location,\r\n                    label: loc.location\r\n                  })) || [] : []\r\n                }\r\n                error={errors.destinationLocation}\r\n                required\r\n              />\r\n\r\n              <FormSelect\r\n                label=\"Destination Type\"\r\n                value={formData.destinationType}\r\n                onChange={(value) => setFormData({ ...formData, destinationType: value as any })}\r\n                options={[\r\n                  { value: 'market', label: 'Market' },\r\n                  { value: 'warehouse', label: 'Warehouse' },\r\n                  { value: 'retail', label: 'Retail' },\r\n                  { value: 'wholesale', label: 'Wholesale' },\r\n                  { value: 'export', label: 'Export' },\r\n                ]}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Buyer Information */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Buyer Information</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormInput\r\n                label=\"Buyer Name\"\r\n                type=\"text\"\r\n                value={formData.buyerName}\r\n                onChange={(value) => setFormData({ ...formData, buyerName: value as string })}\r\n                error={errors.buyerName}\r\n                required\r\n              />\r\n\r\n              <FormInput\r\n                label=\"Buyer ID\"\r\n                type=\"text\"\r\n                value={formData.buyerId}\r\n                onChange={(value) => setFormData({ ...formData, buyerId: value as string })}\r\n                placeholder=\"Buyer identification\"\r\n              />\r\n\r\n              <FormInput\r\n                label=\"Buyer Phone\"\r\n                type=\"tel\"\r\n                value={formData.buyerPhone}\r\n                onChange={(value) => setFormData({ ...formData, buyerPhone: value as string })}\r\n                error={errors.buyerPhone}\r\n                required\r\n              />\r\n\r\n              <FormSelect\r\n                label=\"Buyer Type\"\r\n                value={formData.buyerType}\r\n                onChange={(value) => setFormData({ ...formData, buyerType: value as any })}\r\n                options={[\r\n                  { value: 'individual', label: 'Individual' },\r\n                  { value: 'company', label: 'Company' },\r\n                  { value: 'cooperative', label: 'Cooperative' },\r\n                ]}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Goods Information */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Goods Information</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <FormInput\r\n                label=\"Expected Quantity (kg)\"\r\n                type=\"number\"\r\n                value={formData.quantityExpected}\r\n                onChange={(value) => setFormData({ ...formData, quantityExpected: value as number })}\r\n                error={errors.quantityExpected}\r\n                required\r\n              />\r\n\r\n              <FormInput\r\n                label=\"Received Quantity (kg)\"\r\n                type=\"number\"\r\n                value={formData.quantityReceived}\r\n                onChange={(value) => setFormData({ ...formData, quantityReceived: value as number })}\r\n                error={errors.quantityReceived}\r\n                required\r\n              />\r\n\r\n              <FormSelect\r\n                label=\"Condition\"\r\n                value={formData.condition}\r\n                onChange={(value) => setFormData({ ...formData, condition: value as any })}\r\n                options={[\r\n                  { value: 'excellent', label: 'Excellent' },\r\n                  { value: 'good', label: 'Good' },\r\n                  { value: 'fair', label: 'Fair' },\r\n                  { value: 'poor', label: 'Poor' },\r\n                  { value: 'damaged', label: 'Damaged' },\r\n                ]}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Pricing */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Pricing</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormInput\r\n                label=\"Price per kg\"\r\n                type=\"number\"\r\n                value={formData.itemPrice}\r\n                onChange={(value) => setFormData({ ...formData, itemPrice: value as number })}\r\n                error={errors.itemPrice}\r\n                required\r\n              />\r\n\r\n              <div className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Revenue</p>\r\n                <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n                  {formatCurrency(formData.quantityReceived * formData.itemPrice)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Delivery Information */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Delivery Information</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormInput\r\n                label=\"Driver Name\"\r\n                type=\"text\"\r\n                value={formData.driverName}\r\n                onChange={(value) => setFormData({ ...formData, driverName: value as string })}\r\n                error={errors.driverName}\r\n                required\r\n              />\r\n\r\n              <FormInput\r\n                label=\"Driver ID\"\r\n                type=\"text\"\r\n                value={formData.driverId}\r\n                onChange={(value) => setFormData({ ...formData, driverId: value as string })}\r\n                placeholder=\"Driver identification\"\r\n              />\r\n\r\n              <FormInput\r\n                label=\"Vehicle Registration\"\r\n                type=\"text\"\r\n                value={formData.vehicleReg}\r\n                onChange={(value) => setFormData({ ...formData, vehicleReg: value as string })}\r\n                required\r\n              />\r\n\r\n              <FormInput\r\n                label=\"Delivery Time\"\r\n                type=\"datetime-local\"\r\n                value={formData.deliveryTime}\r\n                onChange={(value) => setFormData({ ...formData, deliveryTime: value as string })}\r\n                error={errors.deliveryTime}\r\n                required\r\n              />\r\n\r\n              <FormSelect\r\n                label=\"Delivery Status\"\r\n                value={formData.deliveryStatus}\r\n                onChange={(value) => setFormData({ ...formData, deliveryStatus: value as any })}\r\n                options={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'in-transit', label: 'In Transit' },\r\n                  { value: 'delivered', label: 'Delivered' },\r\n                  { value: 'failed', label: 'Failed' },\r\n                  { value: 'disputed', label: 'Disputed' },\r\n                ]}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Admin Notes (Admin Only) */}\r\n          {user?.role === 'admin' && (\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Admin Notes</h4>\r\n              <textarea\r\n                value={formData.adminNotes || ''}\r\n                onChange={(e) => setFormData({ ...formData, adminNotes: e.target.value })}\r\n                className=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                rows={3}\r\n                placeholder=\"Admin notes and observations...\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCloseModal}\r\n              className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n            >\r\n              {editingRecord ? 'Update Record' : 'Add Record'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/* Verification Modal */}\r\n      <Modal\r\n        isOpen={isVerificationModalOpen}\r\n        onClose={() => setIsVerificationModalOpen(false)}\r\n        title=\"Verify Delivery\"\r\n        size=\"md\"\r\n      >\r\n        {selectedRecord && (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n              <h4 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-2\">Delivery Details</h4>\r\n              <div className=\"space-y-1 text-sm\">\r\n                <p><span className=\"font-medium\">Transport Code:</span> {selectedRecord.transportCode}</p>\r\n                <p><span className=\"font-medium\">Destination:</span> {selectedRecord.destinationLocation}</p>\r\n                <p><span className=\"font-medium\">Buyer:</span> {selectedRecord.buyerName}</p>\r\n                <p><span className=\"font-medium\">Quantity Expected:</span> {selectedRecord.quantityExpected}kg</p>\r\n                <p><span className=\"font-medium\">Quantity Received:</span> {selectedRecord.quantityReceived}kg</p>\r\n                <p><span className=\"font-medium\">Condition:</span> {selectedRecord.condition}</p>\r\n              </div>\r\n            </div>\r\n\r\n            {selectedRecord.hasDiscrepancy && (\r\n              <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\r\n                  <span className=\"font-medium text-yellow-800 dark:text-yellow-200\">Discrepancy Detected</span>\r\n                </div>\r\n                <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\r\n                  {selectedRecord.discrepancyDescription}\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"flex justify-end space-x-3\">\r\n              <button\r\n                onClick={() => setIsVerificationModalOpen(false)}\r\n                className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                onClick={() => handleVerifyDelivery(selectedRecord)}\r\n                className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n              >\r\n                Verify Delivery\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}