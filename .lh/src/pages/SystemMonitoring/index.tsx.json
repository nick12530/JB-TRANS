{
    "sourceFile": "src/pages/SystemMonitoring/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759903847685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759904590598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,58 +249,58 @@\n       </div>\r\n \r\n       {/* System Status Overview */}\r\n       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n-        <Card className=\"p-6\">\r\n+        <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div>\r\n+            <div className=\"flex-1 min-w-0\">\r\n               <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">System Status</p>\r\n-              <p className=\"text-2xl font-bold text-green-600\">Healthy</p>\r\n-              <p className=\"text-xs text-gray-500 mt-1\">All systems operational</p>\r\n+              <p className=\"text-xl font-bold text-green-600 truncate\">Healthy</p>\r\n+              <p className=\"text-xs text-gray-500 mt-1 truncate\">All systems operational</p>\r\n             </div>\r\n-            <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900/20\">\r\n-              <CheckCircle className=\"h-6 w-6 text-green-600\" />\r\n+            <div className=\"p-2 rounded-full bg-green-100 dark:bg-green-900/20 flex-shrink-0\">\r\n+              <CheckCircle className=\"h-5 w-5 text-green-600\" />\r\n             </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-6\">\r\n+        <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div>\r\n+            <div className=\"flex-1 min-w-0\">\r\n               <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Alerts</p>\r\n-              <p className=\"text-2xl font-bold text-yellow-600\">\r\n+              <p className=\"text-xl font-bold text-yellow-600 truncate\">\r\n                 {systemAlerts.filter(alert => !alert.resolved).length}\r\n               </p>\r\n-              <p className=\"text-xs text-gray-500 mt-1\">Requires attention</p>\r\n+              <p className=\"text-xs text-gray-500 mt-1 truncate\">Requires attention</p>\r\n             </div>\r\n-            <div className=\"p-3 rounded-full bg-yellow-100 dark:bg-yellow-900/20\">\r\n-              <AlertTriangle className=\"h-6 w-6 text-yellow-600\" />\r\n+            <div className=\"p-2 rounded-full bg-yellow-100 dark:bg-yellow-900/20 flex-shrink-0\">\r\n+              <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\r\n             </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-6\">\r\n+        <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div>\r\n+            <div className=\"flex-1 min-w-0\">\r\n               <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Uptime</p>\r\n-              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">99.9%</p>\r\n-              <p className=\"text-xs text-gray-500 mt-1\">Last 30 days</p>\r\n+              <p className=\"text-xl font-bold text-gray-900 dark:text-gray-100 truncate\">99.9%</p>\r\n+              <p className=\"text-xs text-gray-500 mt-1 truncate\">Last 30 days</p>\r\n             </div>\r\n-            <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900/20\">\r\n-              <Server className=\"h-6 w-6 text-blue-600\" />\r\n+            <div className=\"p-2 rounded-full bg-blue-100 dark:bg-blue-900/20 flex-shrink-0\">\r\n+              <Server className=\"h-5 w-5 text-blue-600\" />\r\n             </div>\r\n           </div>\r\n         </Card>\r\n \r\n-        <Card className=\"p-6\">\r\n+        <Card className=\"p-4\">\r\n           <div className=\"flex items-center justify-between\">\r\n-            <div>\r\n+            <div className=\"flex-1 min-w-0\">\r\n               <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Response Time</p>\r\n-              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">120ms</p>\r\n-              <p className=\"text-xs text-gray-500 mt-1\">Average</p>\r\n+              <p className=\"text-xl font-bold text-gray-900 dark:text-gray-100 truncate\">120ms</p>\r\n+              <p className=\"text-xs text-gray-500 mt-1 truncate\">Average</p>\r\n             </div>\r\n-            <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900/20\">\r\n-              <Zap className=\"h-6 w-6 text-purple-600\" />\r\n+            <div className=\"p-2 rounded-full bg-purple-100 dark:bg-purple-900/20 flex-shrink-0\">\r\n+              <Zap className=\"h-5 w-5 text-purple-600\" />\r\n             </div>\r\n           </div>\r\n         </Card>\r\n       </div>\r\n"
                }
            ],
            "date": 1759903847685,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react';\r\nimport { Card } from '../../components/Card';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { formatDate } from '../../utils/helpers';\r\nimport { \r\n  Activity, \r\n  AlertTriangle, \r\n  CheckCircle, \r\n  Clock, \r\n  Server, \r\n  Database, \r\n  Users, \r\n  Truck,\r\n  MapPin,\r\n  Package,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Zap,\r\n  Shield,\r\n  Eye,\r\n  RefreshCw\r\n} from 'lucide-react';\r\n\r\ninterface SystemAlert {\r\n  id: string;\r\n  type: 'error' | 'warning' | 'info' | 'success';\r\n  title: string;\r\n  description: string;\r\n  timestamp: string;\r\n  source: string;\r\n  resolved: boolean;\r\n}\r\n\r\ninterface SystemMetric {\r\n  name: string;\r\n  value: string | number;\r\n  status: 'healthy' | 'warning' | 'critical';\r\n  trend: 'up' | 'down' | 'stable';\r\n  lastUpdated: string;\r\n}\r\n\r\nexport const SystemMonitoringPage: React.FC = () => {\r\n  const { sourceRecords, user } = useApp();\r\n  const [refreshInterval, setRefreshInterval] = useState<number>(30);\r\n  const [autoRefresh, setAutoRefresh] = useState<boolean>(true);\r\n\r\n  if (user?.role !== 'admin') {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <p className=\"text-xl text-red-500\">Access Denied: Admins only.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Mock system alerts\r\n  const systemAlerts: SystemAlert[] = [\r\n    {\r\n      id: '1',\r\n      type: 'warning',\r\n      title: 'High Memory Usage',\r\n      description: 'Server memory usage is at 85%. Consider optimizing or scaling.',\r\n      timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\r\n      source: 'Server Monitor',\r\n      resolved: false,\r\n    },\r\n    {\r\n      id: '2',\r\n      type: 'error',\r\n      title: 'Database Connection Timeout',\r\n      description: 'Failed to connect to primary database. Using backup connection.',\r\n      timestamp: new Date(Date.now() - 15 * 60 * 1000).toISOString(),\r\n      source: 'Database Monitor',\r\n      resolved: true,\r\n    },\r\n    {\r\n      id: '3',\r\n      type: 'info',\r\n      title: 'Scheduled Maintenance',\r\n      description: 'System maintenance scheduled for tonight at 2:00 AM.',\r\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\r\n      source: 'System Admin',\r\n      resolved: false,\r\n    },\r\n    {\r\n      id: '4',\r\n      type: 'success',\r\n      title: 'Backup Completed',\r\n      description: 'Daily backup completed successfully. 2.3GB backed up.',\r\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\r\n      source: 'Backup Service',\r\n      resolved: true,\r\n    },\r\n  ];\r\n\r\n  // Mock system metrics\r\n  const systemMetrics: SystemMetric[] = [\r\n    {\r\n      name: 'CPU Usage',\r\n      value: '45%',\r\n      status: 'healthy',\r\n      trend: 'stable',\r\n      lastUpdated: new Date().toISOString(),\r\n    },\r\n    {\r\n      name: 'Memory Usage',\r\n      value: '78%',\r\n      status: 'warning',\r\n      trend: 'up',\r\n      lastUpdated: new Date().toISOString(),\r\n    },\r\n    {\r\n      name: 'Disk Space',\r\n      value: '62%',\r\n      status: 'healthy',\r\n      trend: 'stable',\r\n      lastUpdated: new Date().toISOString(),\r\n    },\r\n    {\r\n      name: 'Database Connections',\r\n      value: '23/100',\r\n      status: 'healthy',\r\n      trend: 'down',\r\n      lastUpdated: new Date().toISOString(),\r\n    },\r\n    {\r\n      name: 'Active Users',\r\n      value: sourceRecords.length > 0 ? Math.floor(sourceRecords.length * 0.3) : 0,\r\n      status: 'healthy',\r\n      trend: 'up',\r\n      lastUpdated: new Date().toISOString(),\r\n    },\r\n    {\r\n      name: 'API Response Time',\r\n      value: '120ms',\r\n      status: 'healthy',\r\n      trend: 'stable',\r\n      lastUpdated: new Date().toISOString(),\r\n    },\r\n  ];\r\n\r\n  // Calculate operational metrics\r\n  const operationalMetrics = useMemo(() => {\r\n    const totalRecords = sourceRecords.length;\r\n    const todayRecords = sourceRecords.filter(record => {\r\n      const recordDate = new Date(record.date);\r\n      const today = new Date();\r\n      return recordDate.toDateString() === today.toDateString();\r\n    }).length;\r\n\r\n    const activeTrips = sourceRecords.filter(record => record.status === 'in-transit').length;\r\n    const pendingPickups = sourceRecords.filter(record => record.status === 'loaded').length;\r\n    const completedToday = sourceRecords.filter(record => record.status === 'delivered').length;\r\n\r\n    return {\r\n      totalRecords,\r\n      todayRecords,\r\n      activeTrips,\r\n      pendingPickups,\r\n      completedToday,\r\n    };\r\n  }, [sourceRecords]);\r\n\r\n  const getAlertIcon = (type: SystemAlert['type']) => {\r\n    switch (type) {\r\n      case 'error':\r\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'warning':\r\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\r\n      case 'info':\r\n        return <Activity className=\"h-4 w-4 text-blue-500\" />;\r\n      case 'success':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n    }\r\n  };\r\n\r\n  const getAlertColor = (type: SystemAlert['type']) => {\r\n    switch (type) {\r\n      case 'error':\r\n        return 'border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20';\r\n      case 'warning':\r\n        return 'border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-900/20';\r\n      case 'info':\r\n        return 'border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-900/20';\r\n      case 'success':\r\n        return 'border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20';\r\n    }\r\n  };\r\n\r\n  const getMetricStatusColor = (status: SystemMetric['status']) => {\r\n    switch (status) {\r\n      case 'healthy':\r\n        return 'text-green-600 bg-green-100 dark:text-green-400 dark:bg-green-900/20';\r\n      case 'warning':\r\n        return 'text-yellow-600 bg-yellow-100 dark:text-yellow-400 dark:bg-yellow-900/20';\r\n      case 'critical':\r\n        return 'text-red-600 bg-red-100 dark:text-red-400 dark:bg-red-900/20';\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend: SystemMetric['trend']) => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return <TrendingUp className=\"h-3 w-3 text-green-500\" />;\r\n      case 'down':\r\n        return <TrendingDown className=\"h-3 w-3 text-red-500\" />;\r\n      case 'stable':\r\n        return <Activity className=\"h-3 w-3 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">System Monitoring</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Real-time system health monitoring and alerts\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className={`w-2 h-2 rounded-full ${autoRefresh ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></div>\r\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              Auto-refresh: {autoRefresh ? 'ON' : 'OFF'}\r\n            </span>\r\n          </div>\r\n          \r\n          <select\r\n            value={refreshInterval}\r\n            onChange={(e) => setRefreshInterval(Number(e.target.value))}\r\n            className=\"px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 text-sm\"\r\n          >\r\n            <option value={10}>10s</option>\r\n            <option value={30}>30s</option>\r\n            <option value={60}>1m</option>\r\n            <option value={300}>5m</option>\r\n          </select>\r\n          \r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            className=\"flex items-center space-x-2 px-3 py-1 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors text-sm\"\r\n          >\r\n            <RefreshCw className=\"h-4 w-4\" />\r\n            <span>Refresh</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* System Status Overview */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">System Status</p>\r\n              <p className=\"text-2xl font-bold text-green-600\">Healthy</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">All systems operational</p>\r\n            </div>\r\n            <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900/20\">\r\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Alerts</p>\r\n              <p className=\"text-2xl font-bold text-yellow-600\">\r\n                {systemAlerts.filter(alert => !alert.resolved).length}\r\n              </p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">Requires attention</p>\r\n            </div>\r\n            <div className=\"p-3 rounded-full bg-yellow-100 dark:bg-yellow-900/20\">\r\n              <AlertTriangle className=\"h-6 w-6 text-yellow-600\" />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Uptime</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">99.9%</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">Last 30 days</p>\r\n            </div>\r\n            <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900/20\">\r\n              <Server className=\"h-6 w-6 text-blue-600\" />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Response Time</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">120ms</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">Average</p>\r\n            </div>\r\n            <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900/20\">\r\n              <Zap className=\"h-6 w-6 text-purple-600\" />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* System Metrics */}\r\n      <Card className=\"p-6\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">System Metrics</h3>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Live</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n          {systemMetrics.map((metric, index) => (\r\n            <div key={index} className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">{metric.name}</span>\r\n                <div className=\"flex items-center space-x-1\">\r\n                  {getTrendIcon(metric.trend)}\r\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getMetricStatusColor(metric.status)}`}>\r\n                    {metric.status}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-1\">{metric.value}</div>\r\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                Updated: {formatDate(metric.lastUpdated)}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Operational Metrics */}\r\n      <Card className=\"p-6\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Operational Metrics</h3>\r\n          <Activity className=\"h-5 w-5 text-gray-500\" />\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n          <div className=\"text-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n            <Package className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\r\n            <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{operationalMetrics.totalRecords}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total Records</div>\r\n          </div>\r\n          \r\n          <div className=\"text-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n            <Clock className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\r\n            <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{operationalMetrics.todayRecords}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Today's Records</div>\r\n          </div>\r\n          \r\n          <div className=\"text-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n            <Truck className=\"h-8 w-8 text-yellow-500 mx-auto mb-2\" />\r\n            <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{operationalMetrics.activeTrips}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Active Trips</div>\r\n          </div>\r\n          \r\n          <div className=\"text-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n            <MapPin className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\r\n            <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{operationalMetrics.pendingPickups}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Pending Pickups</div>\r\n          </div>\r\n          \r\n          <div className=\"text-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n            <CheckCircle className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\r\n            <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{operationalMetrics.completedToday}</div>\r\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Completed Today</div>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* System Alerts */}\r\n      <Card className=\"p-6\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">System Alerts</h3>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              {systemAlerts.filter(alert => !alert.resolved).length} unresolved\r\n            </span>\r\n            <Shield className=\"h-5 w-5 text-gray-500\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"space-y-4\">\r\n          {systemAlerts.map((alert) => (\r\n            <div\r\n              key={alert.id}\r\n              className={`p-4 border rounded-lg ${getAlertColor(alert.type)} ${\r\n                alert.resolved ? 'opacity-60' : ''\r\n              }`}\r\n            >\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-start space-x-3\">\r\n                  {getAlertIcon(alert.type)}\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">{alert.title}</h4>\r\n                      {alert.resolved && (\r\n                        <span className=\"px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200 rounded-full text-xs font-medium\">\r\n                          Resolved\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{alert.description}</p>\r\n                    <div className=\"flex items-center space-x-4 mt-2 text-xs text-gray-500 dark:text-gray-400\">\r\n                      <span>Source: {alert.source}</span>\r\n                      <span>Time: {formatDate(alert.timestamp)}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {!alert.resolved && (\r\n                  <button className=\"px-3 py-1 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors text-sm\">\r\n                    Resolve\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Performance Chart Placeholder */}\r\n      <Card className=\"p-6\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Performance Trends</h3>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <TrendingUp className=\"h-5 w-5 text-gray-500\" />\r\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Last 24 hours</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"h-64 bg-gray-50 dark:bg-gray-800 rounded-lg flex items-center justify-center\">\r\n          <div className=\"text-center\">\r\n            <Activity className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n            <p className=\"text-gray-500 dark:text-gray-400\">Performance chart would be displayed here</p>\r\n            <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\r\n              Integration with monitoring tools like Grafana or custom charts\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}