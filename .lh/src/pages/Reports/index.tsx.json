{
    "sourceFile": "src/pages/Reports/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1761636689433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761638392650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,161 @@\n-import React from 'react';\r\n+import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n+import { FormInput } from '../../components/FormInput';\r\n+import { useApp } from '../../context/AppContext';\r\n \r\n+const STATIONS = [\r\n+  { name: 'Embu', min: 1, max: 300 },\r\n+  { name: 'Ugweri', min: 301, max: 600 },\r\n+  { name: 'Meka', min: 601, max: 900 },\r\n+  { name: 'Ena', min: 901, max: 1000 },\r\n+  { name: 'Gachuriri', min: 1001, max: 1100 },\r\n+] as const;\r\n+\r\n export const ReportsPage: React.FC = () => {\r\n+  const { packages } = useApp();\r\n+  const [dateQ, setDateQ] = useState(''); // YYYY-MM-DD filter optional\r\n+\r\n+  const filtered = useMemo(() => {\r\n+    if (!dateQ) return packages;\r\n+    return packages.filter(p => String(p.registeredAt || '').startsWith(dateQ));\r\n+  }, [packages, dateQ]);\r\n+\r\n+  const packagingTotals = useMemo(() => {\r\n+    let boxes = 0, basins = 0, smallSacks = 0;\r\n+    for (const p of filtered) {\r\n+      if (!p.notes) continue;\r\n+      for (const part of String(p.notes).split('|')) {\r\n+        const [k, v] = (part || '').split(':');\r\n+        const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n+        if (k === 'boxes') boxes += val;\r\n+        if (k === 'basins') basins += val;\r\n+        if (k === 'smallSacks') smallSacks += val;\r\n+      }\r\n+    }\r\n+    return { count: filtered.length, boxes, basins, smallSacks };\r\n+  }, [filtered]);\r\n+\r\n+  const perStation = useMemo(() => {\r\n+    return STATIONS.map(s => {\r\n+      let count = 0, boxes = 0, basins = 0, smallSacks = 0;\r\n+      for (const p of filtered) {\r\n+        const tn = String(p.trackingNumber || '');\r\n+        const dash = tn.lastIndexOf('-');\r\n+        if (dash === -1) continue;\r\n+        const stationName = tn.slice(0, dash);\r\n+        const code = Number(tn.slice(dash + 1));\r\n+        if (stationName === s.name && Number.isFinite(code) && code >= s.min && code <= s.max) {\r\n+          count += 1;\r\n+          if (p.notes) {\r\n+            for (const part of String(p.notes).split('|')) {\r\n+              const [k, v] = (part || '').split(':');\r\n+              const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n+              if (k === 'boxes') boxes += val;\r\n+              if (k === 'basins') basins += val;\r\n+              if (k === 'smallSacks') smallSacks += val;\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+      return { name: s.name, count, boxes, basins, smallSacks };\r\n+    });\r\n+  }, [filtered]);\r\n+\r\n+  const perDay = useMemo(() => {\r\n+    const map = new Map<string, { count: number; boxes: number; basins: number; smallSacks: number }>();\r\n+    for (const p of filtered) {\r\n+      const day = String(p.registeredAt || '').slice(0,10);\r\n+      if (!map.has(day)) map.set(day, { count: 0, boxes: 0, basins: 0, smallSacks: 0 });\r\n+      const agg = map.get(day)!;\r\n+      agg.count += 1;\r\n+      if (p.notes) {\r\n+        for (const part of String(p.notes).split('|')) {\r\n+          const [k, v] = (part || '').split(':');\r\n+          const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n+          if (k === 'boxes') agg.boxes += val;\r\n+          if (k === 'basins') agg.basins += val;\r\n+          if (k === 'smallSacks') agg.smallSacks += val;\r\n+        }\r\n+      }\r\n+    }\r\n+    return Array.from(map.entries()).sort((a,b)=>a[0].localeCompare(b[0]));\r\n+  }, [filtered]);\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Reports</h1>\r\n+\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <p className=\"text-gray-700 dark:text-gray-300\">Volume, supplier performance, and regional reports will appear here.</p>\r\n+        <FormInput label=\"Filter by date\" type=\"date\" value={dateQ} onChange={(v)=>setDateQ(String(v))} />\r\n+        <div className=\"mt-4 grid grid-cols-4 gap-3 text-center\">\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Packages</div>\r\n+            <div className=\"text-xl font-bold\">{packagingTotals.count}</div>\r\n+          </div>\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Boxes</div>\r\n+            <div className=\"text-xl font-bold\">{packagingTotals.boxes}</div>\r\n+          </div>\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Basins</div>\r\n+            <div className=\"text-xl font-bold\">{packagingTotals.basins}</div>\r\n+          </div>\r\n+          <div>\r\n+            <div className=\"text-xs text-gray-500\">Small Sacks</div>\r\n+            <div className=\"text-xl font-bold\">{packagingTotals.smallSacks}</div>\r\n+          </div>\r\n+        </div>\r\n       </Card>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <h2 className=\"text-lg font-semibold mb-3\">By Station</h2>\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4\">\r\n+          {perStation.map(s => (\r\n+            <div key={s.name} className=\"p-4 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800\">\r\n+              <div className=\"font-semibold text-gray-900 dark:text-gray-100\">{s.name}</div>\r\n+              <div className=\"mt-2 grid grid-cols-2 gap-2 text-sm\">\r\n+                <div className=\"text-gray-500\">Packages</div><div className=\"text-right font-semibold\">{s.count}</div>\r\n+                <div className=\"text-gray-500\">Boxes</div><div className=\"text-right font-semibold\">{s.boxes}</div>\r\n+                <div className=\"text-gray-500\">Basins</div><div className=\"text-right font-semibold\">{s.basins}</div>\r\n+                <div className=\"text-gray-500\">Small Sacks</div><div className=\"text-right font-semibold\">{s.smallSacks}</div>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </Card>\r\n+\r\n+      <Card padding=\"lg\" variant=\"enhanced\">\r\n+        <h2 className=\"text-lg font-semibold mb-3\">By Day</h2>\r\n+        <div className=\"overflow-x-auto\">\r\n+          <table className=\"min-w-full\">\r\n+            <thead>\r\n+              <tr className=\"text-left text-sm text-gray-600 dark:text-gray-300\">\r\n+                <th className=\"py-2 pr-4\">Date</th>\r\n+                <th className=\"py-2 pr-4\">Packages</th>\r\n+                <th className=\"py-2 pr-4\">Boxes</th>\r\n+                <th className=\"py-2 pr-4\">Basins</th>\r\n+                <th className=\"py-2 pr-4\">Small Sacks</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+              {perDay.map(([day, agg]) => (\r\n+                <tr key={day} className=\"border-t border-gray-200 dark:border-gray-700 text-sm\">\r\n+                  <td className=\"py-2 pr-4\">{day}</td>\r\n+                  <td className=\"py-2 pr-4\">{agg.count}</td>\r\n+                  <td className=\"py-2 pr-4\">{agg.boxes}</td>\r\n+                  <td className=\"py-2 pr-4\">{agg.basins}</td>\r\n+                  <td className=\"py-2 pr-4\">{agg.smallSacks}</td>\r\n+                </tr>\r\n+              ))}\r\n+              {perDay.length === 0 && (\r\n+                <tr>\r\n+                  <td colSpan={5} className=\"py-6 text-center text-gray-500 dark:text-gray-400\">No data</td>\r\n+                </tr>\r\n+              )}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n+      </Card>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1761638571215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n import { FormInput } from '../../components/FormInput';\r\n+import { Button } from '../../components/Button';\r\n import { useApp } from '../../context/AppContext';\r\n \r\n const STATIONS = [\r\n   { name: 'Embu', min: 1, max: 300 },\r\n@@ -80,8 +81,29 @@\n     }\r\n     return Array.from(map.entries()).sort((a,b)=>a[0].localeCompare(b[0]));\r\n   }, [filtered]);\r\n \r\n+  const exportTotalsCSV = () => {\r\n+    const rows = [['metric','value'],['packages',String(packagingTotals.count)],['boxes',String(packagingTotals.boxes)],['basins',String(packagingTotals.basins)],['smallSacks',String(packagingTotals.smallSacks)]];\r\n+    const csv = rows.map(r => r.join(',')).join('\\n');\r\n+    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n+    const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'totals.csv'; a.click(); URL.revokeObjectURL(url);\r\n+  };\r\n+\r\n+  const exportPerStationCSV = () => {\r\n+    const rows = [['station','packages','boxes','basins','smallSacks'], ...perStation.map(s=>[s.name,String(s.count),String(s.boxes),String(s.basins),String(s.smallSacks)])];\r\n+    const csv = rows.map(r => r.join(',')).join('\\n');\r\n+    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n+    const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'per-station.csv'; a.click(); URL.revokeObjectURL(url);\r\n+  };\r\n+\r\n+  const exportPerDayCSV = () => {\r\n+    const rows = [['date','packages','boxes','basins','smallSacks'], ...perDay.map(([d,a])=>[d,String(a.count),String(a.boxes),String(a.basins),String(a.smallSacks)])];\r\n+    const csv = rows.map(r => r.join(',')).join('\\n');\r\n+    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n+    const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'per-day.csv'; a.click(); URL.revokeObjectURL(url);\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Reports</h1>\r\n \r\n@@ -104,8 +126,13 @@\n             <div className=\"text-xs text-gray-500\">Small Sacks</div>\r\n             <div className=\"text-xl font-bold\">{packagingTotals.smallSacks}</div>\r\n           </div>\r\n         </div>\r\n+        <div className=\"mt-4 flex flex-wrap gap-2\">\r\n+          <Button variant=\"outline\" onClick={exportTotalsCSV}>Export Totals</Button>\r\n+          <Button variant=\"outline\" onClick={exportPerStationCSV}>Export Per Station</Button>\r\n+          <Button variant=\"outline\" onClick={exportPerDayCSV}>Export Per Day</Button>\r\n+        </div>\r\n       </Card>\r\n \r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n         <h2 className=\"text-lg font-semibold mb-3\">By Station</h2>\r\n"
                }
            ],
            "date": 1761636689433,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Card } from '../../components/Card';\r\n\r\nexport const ReportsPage: React.FC = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Reports</h1>\r\n      <Card padding=\"lg\" variant=\"enhanced\">\r\n        <p className=\"text-gray-700 dark:text-gray-300\">Volume, supplier performance, and regional reports will appear here.</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}