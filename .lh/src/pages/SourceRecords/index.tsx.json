{
    "sourceFile": "src/pages/SourceRecords/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1759566950933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759566964481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState } from 'react';\r\n import { Plus, Package } from 'lucide-react';\r\n-import { FormInput, FormSelect } from '../../components/FormInput';\r\n+import { FormInput } from '../../components/FormInput';\r\n+import { FormSelect } from '../../components/FormSelect';\r\n import { Modal } from '../../components/Modal';\r\n import { Card } from '../../components/Card';\r\n import { DataTable } from '../../components/DataTable';\r\n import { useApp } from '../../context/AppContext';\r\n@@ -338,6 +339,6 @@\n           </div>\r\n         </form>\r\n       </Modal>\r\n     </div>\r\n- d);\r\n+  );\r\n };\r\n"
                },
                {
                    "date": 1759568188129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,17 +21,37 @@\n   { value: 'mpesa', label: 'M-Pesa' },\r\n   { value: 'bank', label: 'Bank Transfer' },\r\n ];\r\n \r\n-const defaultRecord: Omit<SourceRecord, 'id' | 'totalCost'> = {\r\n+const defaultRecord: Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'> = {\r\n   date: new Date().toISOString().split('T')[0],\r\n   code: 100,\r\n   pickupPoint: 'A',\r\n   farmer: '',\r\n   farmerId: '',\r\n   quantitySold: 0,\r\n   itemPrice: 0,\r\n   paymentMethods: [],\r\n+  \r\n+  // Driver & Vehicle Info\r\n+  driverName: '',\r\n+  driverId: '',\r\n+  driverPhone: '',\r\n+  vehicleReg: '',\r\n+  vehicleMake: '',\r\n+  \r\n+  // Packaging Info\r\n+  packaging: {\r\n+    basins: 0,\r\n+    sacks: 0,\r\n+    boxes: 0,\r\n+  },\r\n+  packagingCosts: {\r\n+    basinCost: 0,\r\n+    sackCost: 0,\r\n+    boxCost: 0,\r\n+  },\r\n+  assignedBy: '',\r\n };\r\n \r\n export const SourceRecordsPage: React.FC = () => {\r\n   const { sourceRecords, setSourceRecords, user } = useApp();\r\n"
                },
                {
                    "date": 1759568202051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n export const SourceRecordsPage: React.FC = () => {\r\n   const { sourceRecords, setSourceRecords, user } = useApp();\r\n   const [isModalOpen, setIsModalOpen] = useState(false);\r\n   const [editingRecord, setEditingRecord] = useState<SourceRecord | null>(null);\r\n-  const [formData, setFormData] = useState<Omit<SourceRecord, 'id' | 'totalCost'>>(defaultRecord);\r\n+  const [formData, setFormData] = useState<Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'>>(defaultRecord);\r\n   const [errors, setErrors] = useState<Record<string, string>>({});\r\n \r\n   const resetForm = () => {\r\n     setFormData(defaultRecord);\r\n@@ -90,9 +90,13 @@\n     if (!formData.pickupPoint) newErrors.pickupPoint = 'Pickup point is required';\r\n     if (!formData.farmer?.trim()) newErrors.farmer = 'Farmer name is required';\r\n     if (!formData.farmerId?.trim()) newErrors.farmerId = 'Farmer ID is required';\r\n     if (!formData.quantitySold || formData.quantitySold <= 0) newErrors.quantitySold = 'Valid quantity is required';\r\n-    if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\r\n+    if (!formData.pricing is required';\r\n+    if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\r\n+    if (!formData.driverId?.trim()) newErrors.driverId = 'Driver ID is required';\r\n+    if (!formData.vehicleReg?.trim()) newErrors.vehicleReg = 'Vehicle registration is required';\r\n+    if (!formData.assignedBy?.trim()) newErrors.assignedBy = 'Data entry person is required';\r\n \r\n     const { min, max } = getPickupPointCode(formData.pickupPoint as 'A' | 'B' | 'C' | 'D');\r\n     if (formData.code < min || formData.code > max) {\r\n       newErrors.code = `Code must be between ${min} and ${max} for Point ${formData.pickupPoint}`;\r\n"
                },
                {
                    "date": 1759568216487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n     if (!formData.pickupPoint) newErrors.pickupPoint = 'Pickup point is required';\r\n     if (!formData.farmer?.trim()) newErrors.farmer = 'Farmer name is required';\r\n     if (!formData.farmerId?.trim()) newErrors.farmerId = 'Farmer ID is required';\r\n     if (!formData.quantitySold || formData.quantitySold <= 0) newErrors.quantitySold = 'Valid quantity is required';\r\n-    if (!formData.pricing is required';\r\n+    if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\r\n     if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\r\n     if (!formData.driverId?.trim()) newErrors.driverId = 'Driver ID is required';\r\n     if (!formData.vehicleReg?.trim()) newErrors.vehicleReg = 'Vehicle registration is required';\r\n     if (!formData.assignedBy?.trim()) newErrors.assignedBy = 'Data entry person is required';\r\n@@ -111,12 +111,19 @@\n     \r\n     if (!validateForm()) return;\r\n \r\n     const totalCost = formData.quantitySold * formData.itemPrice;\r\n+    const totalPackagingCost = \r\n+      (formData.packaging.basins * formData.packagingCosts.basinCost) +\r\n+      (formData.packaging.sacks * formData.packagingCosts.sackCost) +\r\n+      (formData.packaging.boxes * formData.packagingCosts.boxCost);\r\n+    \r\n     const newRecord = {\r\n       ...formData,\r\n       totalCost,\r\n+      totalPackagingCost,\r\n       farmerId: formData.farmerId || `FAR-${Date.now()}`,\r\n+      assignedBy: formData.assignedBy || user?.name || 'Unknown',\r\n     };\r\n \r\n     if (editingRecord) {\r\n       setSourceRecords(\r\n"
                },
                {
                    "date": 1759568233529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,37 +152,49 @@\n       render: (value: string) => formatDate(value),\r\n       sortable: true,\r\n     },\r\n     {\r\n-      key: 'code' as keyof SourceRecord,\r\n-      label: 'Code',\r\n+      key: 'pickupPoint' as keyof SourceRecord,\r\n+      label: 'Pickup',\r\n+    },\r\n+    {\r\n+      key: 'driverName' as keyof SourceRecord,\r\n+      label: 'Driver',\r\n       sortable: true,\r\n     },\r\n     {\r\n-      key: 'pickupPoint' as keyof SourceRecord,\r\n-      label: 'Pickup Point',\r\n+      key: 'vehicleReg' as keyof SourceRecord,\r\n+      label: 'Vehicle',\r\n+      render: (value: string, row: SourceRecord) => `${value} ${row.vehicleMake ? `(${row.vehicleMake})` : ''}`,\r\n     },\r\n     {\r\n-      key: 'farmer' as keyof SourceRecord,\r\n-      label: 'Farmer',\r\n-      sortable: true,\r\n+      key: 'packaging' as keyof SourceRecord,\r\n+      label: 'Packaging',\r\n+      render: (value: any) => {\r\n+        const { basins, sacks, boxes } = value;\r\n+        const parts = [];\r\n+        if (basins > 0) parts.push(`${basins}B`);\r\n+        if (sacks > 0) parts.push(`${sacks}S`);\r\n+        if (boxes > 0) parts.push(`${boxes}BG`);\r\n+        return parts.join(', ') || 'None';\r\n+      },\r\n     },\r\n     {\r\n       key: 'quantitySold' as keyof SourceRecord,\r\n       label: 'Quantity (kg)',\r\n       render: (value: number) => `${value} kg`,\r\n     },\r\n     {\r\n-      key: 'itemPrice' as keyof SourceRecord,\r\n-      label: 'Price/kg',\r\n-      render: (value: number) => formatCurrency(value),\r\n-    },\r\n-    {\r\n       key: 'totalCost' as keyof SourceRecord,\r\n       label: 'Total Cost',\r\n       render: (value: number) => formatCurrency(value),\r\n       sortable: true,\r\n     },\r\n+    {\r\n+      key: 'assignedBy' as keyof SourceRecord,\r\n+      label: 'Entered By',\r\n+      sortable: true,\r\n+    },\r\n   ];\r\n \r\n   const totalGoodsIn = sourceRecords.reduce((sum, record) => sum + record.quantitySold, 0);\r\n   const totalCostValue = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\r\n"
                },
                {
                    "date": 1759568332340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,89 +274,210 @@\n         onClose={handleCloseModal}\r\n         title={editingRecord ? 'Edit Source Record' : 'Add Source Record'}\r\n         size=\"lg\"\r\n       >\r\n-        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n-          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-            <FormInput\r\n-              label=\"Date\"\r\n-              type=\"date\"\r\n-              value={formData.date}\r\n-              onChange={(value) => setFormData({ ...formData, date: value as string })}\r\n-              error={errors.date}\r\n-              required\r\n-            />\r\n+        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n+          {/* Basic Info */}\r\n+          <div>\r\n+            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Basic Information</h4>\r\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+              <FormInput\r\n+                label=\"Date\"\r\n+                type=\"date\"\r\n+                value={formData.date}\r\n+                onChange={(value) => setFormData({ ...formData, date: value as string })}\r\n+                error={errors.date}\r\n+                required\r\n+              />\r\n \r\n-            <FormInput\r\n-              label=\"Code\"\r\n-              type=\"number\"\r\n-              value={formData.code}\r\n-              onChange={(value) => setFormData({ ...formData, code: value as number })}\r\n-              error={errors.code}\r\n-              required\r\n-              placeholder=\"Pickup point code\"\r\n-            />\r\n+              <FormSelect\r\n+                label=\"Pickup Point\"\r\n+                value={formData.pickupPoint}\r\n+                onChange={(value) => setFormData({ ...formData, pickupPoint: value as any })}\r\n+                options={pickupPoints}\r\n+                error={errors.pickupPoint}\r\n+                required\r\n+              />\r\n \r\n-            <FormSelect\r\n-              label=\"Pickup Point\"\r\n-              value={formData.pickupPoint}\r\n-              onChange={(value) => setFormData({ ...formData, pickupPoint: value as any })}\r\n-              options={pickupPoints}\r\n-              error={errors.pickupPoint}\r\n-              required\r\n-            />\r\n+              <FormInput\r\n+                label=\"Farmer Name\"\r\n+                type=\"text\"\r\n+                value={formData.farmer || ''}\r\n+                onChange={(value) => setFormData({ ...formData, farmer: value as string })}\r\n+                error={errors.farmer}\r\n+                required\r\n+                placeholder=\"Farmer full name\"\r\n+              />\r\n \r\n-            <FormInput\r\n-              label=\"Farmer ID\"\r\n-              type=\"text\"\r\n-              value={formData.farmerId}\r\n-              onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\r\n-              error={errors.farmerId}\r\n-              required\r\n-              placeholder=\"Farmer identification\"\r\n-            />\r\n+              <FormInput\r\n+                label=\"Farmer ID\"\r\n+                type=\"text\"\r\n+                value={formData.farmerId}\r\n+                onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\r\n+                error={errors.farmerId}\r\n+                required\r\n+                placeholder=\"Farmer identification\"\r\n+              />\r\n \r\n-            <FormInput\r\n-              label=\"Farmer Name\"\r\n-              type=\"text\"\r\n-              value={formData.farmer || ''}\r\n-              onChange={(value) => setFormData({ ...formData, farmer: value as string })}\r\n-              error={errors.farmer}\r\n-              required\r\n-              placeholder=\"Farmer full name\"\r\n-            />\r\n+              <FormInput\r\n+                label=\"Quantity (kg)\"\r\n+                type=\"number\"\r\n+                value={formData.quantitySold}\r\n+                onChange={(value) => setFormData({ ...formData, quantitySold: value as number })}\r\n+                error={errors.quantitySold}\r\n+                required\r\n+                placeholder=\"Weight in kilograms\"\r\n+              />\r\n \r\n-            <FormInput\r\n-              label=\"Payment Methods\"\r\n-              type=\"text\"\r\n-              value={formData.paymentMethods?.join(', ') || ''}\r\n-              onChange={(value) => {\r\n-                const methods = (value as string).split(',').map(m => m.trim()).filter(Boolean);\r\n-                setFormData({ ...formData, paymentMethods: methods as any });\r\n-              }}\r\n-              placeholder=\"Cash, M-Pesa, Bank\"\r\n-            />\r\n+              <FormInput\r\n+                label=\"Price per kg\"\r\n+                type=\"number\"\r\n+                value={formData.itemPrice}\r\n+                onChange={(value) => setFormData({ ...formData, itemPrice: value as number })}\r\n+                error={errors.itemPrice}\r\n+                required\r\n+                placeholder=\"Price per kilogram\"\r\n+              />\r\n+            </div>\r\n           </div>\r\n \r\n-          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-            <FormInput\r\n-              label=\"Quantity (kg)\"\r\n-              type=\"number\"\r\n-              value={formData.quantitySold}\r\n-              onChange={(value) => setFormData({ ...formData, quantitySold: value as number })}\r\n-              error={errors.quantitySold}\r\n-              required\r\n-              placeholder=\"Weight in kilograms\"\r\n-            />\r\n+          {/* Driver & Vehicle Info */}\r\n+          <div>\r\n+            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Driver & Vehicle Details</h4>\r\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+              <FormInput\r\n+                label=\"Driver Name\"\r\n+                type=\"text\"\r\n+                value={formData.driverName}\r\n+                onChange={(value) => setFormData({ ...formData, driverName: value as string })}\r\n+                error={errors.driverName}\r\n+                required\r\n+                placeholder=\"Driver full name\"\r\n+              />\r\n \r\n+              <FormInput\r\n+                label=\"Driver ID\"\r\n+                type=\"text\"\r\n+                value={formData.driverId}\r\n+                onChange={(value) => setFormData({ ...formData, driverId: value as string })}\r\n+                error={errors.driverId}\r\n+                required\r\n+                placeholder=\"Driver identification\"\r\n+              />\r\n+\r\n+              <FormInput\r\n+                label=\"Driver Phone\"\r\n+                type=\"tel\"\r\n+                value={formData.driverPhone}\r\n+                onChange={(value) => setFormData({ ...formData, driverPhone: value as string })}\r\n+                placeholder=\"Driver phone number\"\r\n+              />\r\n+\r\n+              <FormInput\r\n+                label=\"Vehicle Registration\"\r\n+                type=\"text\"\r\n+                value={formData.vehicleReg}\r\n+                onChange={(value) => setFormData({ ...formData, vehicleReg: value as string })}\r\n+                error={errors.vehicleReg}\r\n+                required\r\n+                placeholder=\"e.g., KAA 123A\"\r\n+              />\r\n+\r\n+              <FormInput\r\n+                label=\"Vehicle Make\"\r\n+                type=\"text\"\r\n+                value={formData.vehicleMake || ''}\r\n+                onChange={(value) => setFormData({ ...formData, vehicleMake: value as string })}\r\n+                placeholder=\"e.g., Toyota Hiace\"\r\n+                className=\"md:col-span-1\"\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+\r\n+          {/* Packaging Info */}\r\n+          <div>\r\n+            <h4 className=\"text-lg font-semibold text-gray-json dark:text-gray-100 mb-3\">Packaging Details</h4>\r\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n+              <FormInput\r\n+                label=\"Basins\"\r\n+                type=\"number\"\r\n+                value={formData.packaging.basins}\r\n+                onChange={(value) => setFormData({\r\n+                  ...formData,\r\n+                  packaging: { ...formData.packaging, basins: value as number }\r\n+                })}\r\n+                placeholder=\"Number of basins\"\r\n+              />\r\n+\r\n+              <FormInput\r\n+                label=\"Sacks\"\r\n+                type=\"number\"\r\n+                value={formData.packaging.sacks}\r\n+                onChange={(value) => setFormData({\r\n+                  ...formData,\r\n+                  packaging: { ...formData.packaging, sacks: value as number }\r\n+                })}\r\n+                placeholder=\"Number of sacks\"\r\n+              />\r\n+\r\n+              <FormInput\r\n+                label=\"Boxes\"\r\n+                type=\"number\"\r\n+                value={formData.packaging.boxes}\r\n+                onChange={(value) => setFormData({\r\n+                  ...formData,\r\n+                  packaging: { ...formData.packaging, boxes: value. number }\r\n+                })}\r\n+                placeholder=\"Number of boxes\"\r\n+              />\r\n+            </div>\r\n+\r\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n+              <FormInput\r\n+                label=\"Basin Cost (each)\"\r\n+                type=\"number\"\r\n+                value={formData.packagingCosts.ckupPrice}\r\n+                onChange={(value) => setFormData({\r\n+                  ...formData,\r\n+                  packagingCosts: { ...formData.packagingCosts, basinCost: value as number }\r\n+                })}\r\n+                placeholder=\"Cost per basin\"\r\n+              />\r\n+\r\n+              <FormInput\r\n+                label=\"Sack Cost (each)\"\r\n+                type=\"number\"\r\n+                value={formData.packagingCosts.sackCost}\r\n+                onChange={(value) => setFormData({\r\n+                  ...formData,\r\n+                  packagingCosts: { ...formData.packagingCosts, sackCost: value as number }\r\n+                })}\r\n+                placeholder=\"Cost per sack\"\r\n+              />\r\n+\r\n+              <FormInput\r\n+                label=\"Box Cost (each)\"\r\n+                type=\"number\"\r\n+                value={formData.packagingCosts.boxCost}\r\n+                onChange={(value) => setFormData({\r\n+                  ...formData,\r\n+                  packagingCosts: { ...formData.packagingCosts, boxCost: value as number }\r\n+                })}\r\n+                placeholder=\"Cost per box\"\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+\r\n+          {/* Data Entry Info */}\r\n+          <div>\r\n             <FormInput\r\n-              label=\"Price per kg\"\r\n-              type=\"number\"\r\n-              value={formData.itemPrice}\r\n-              onChange={(value) => setFormData({ ...formData, itemPrice: value as number })}\r\n-              error={errors.itemPrice}\r\n+              label=\"Entered By\"\r\n+              type=\"text\"\r\n+              value={formData.assignedBy || user?.name || ''}\r\n+              onChange={(value) => setFormData({ ...formData, assignedBy: value as string })}\r\n+              error={errors.assignedBy}\r\n               required\r\n-              placeholder=\"Price per kilogram\"\r\n+              placeholder=\"Person entering this data\"\r\n             />\r\n           </div>\r\n \r\n           {/* Auto-calculated total */}\r\n"
                },
                {
                    "date": 1759568344522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,9 +424,9 @@\n                 type=\"number\"\r\n                 value={formData.packaging.boxes}\r\n                 onChange={(value) => setFormData({\r\n                   ...formData,\r\n-                  packaging: { ...formData.packaging, boxes: value. number }\r\n+                  packaging: { ...formData.packaging, boxes: value as number }\r\n                 })}\r\n                 placeholder=\"Number of boxes\"\r\n               />\r\n             </div>\r\n@@ -434,9 +434,9 @@\n             <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n               <FormInput\r\n                 label=\"Basin Cost (each)\"\r\n                 type=\"number\"\r\n-                value={formData.packagingCosts.ckupPrice}\r\n+                value={formData.packagingCosts.basinCost}\r\n                 onChange={(value) => setFormData({\r\n                   ...formData,\r\n                   packagingCosts: { ...formData.packagingCosts, basinCost: value as number }\r\n                 })}\r\n"
                },
                {
                    "date": 1759568362924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,9 +394,9 @@\n           </div>\r\n \r\n           {/* Packaging Info */}\r\n           <div>\r\n-            <h4 className=\"text-lg font-semibold text-gray-json dark:text-gray-100 mb-3\">Packaging Details</h4>\r\n+            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Packaging Details</h4>\r\n             <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n               <FormInput\r\n                 label=\"Basins\"\r\n                 type=\"number\"\r\n"
                },
                {
                    "date": 1759568376451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -479,16 +479,49 @@\n               placeholder=\"Person entering this data\"\r\n             />\r\n           </div>\r\n \r\n-          {/* Auto-calculated total */}\r\n-          {formData.quantitySold > 0 && formData.itemPrice > 0 && (\r\n-            <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\r\n-              <p className=\"text-sm text-green-800 dark:text-green-200\">\r\n-                <strong>Total Cost:</strong> {formatCurrency(formData.quantitySold * formData.itemPrice)}\r\n-              </p>\r\n+          {/* Auto-calculated totals */}\r\n+          {(formData.quantitySold > 0 && formData.itemPrice > 0) || formData.packaging.basins > 0 || formData.packaging.sacks > 0 || formData.packaging.boxes > 0 ? (\r\n+            <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg space-y-2\">\r\n+              {formData.quantitySold > 0 && formData.itemPrice > 0 && (\r\n+                <p className=\"text-sm text-green-800 dark:text-green-200\">\r\n+                  <strong>Goods Cost:</strong> {formatCurrency(formData.quantitySold * formData.itemPrice)}\r\n+                </p>\r\n+              )}\r\n+              \r\n+              <div className=\"text-sm text-green-800 dark:text-green-200\">\r\n+                <strong>Packaging Cost:</strong>\r\n+                <div className=\"ml-4 space-y-1\">\r\n+                  {formData.packaging.basins > 0 && (\r\n+                    <div>Basins: {formData.packaging.basins} × {formatCurrency(formData.packagingCosts.basinCost)} = {formatCurrency(formData.packaging.basins * formData.packagingCosts.basinCost)}</div>\r\n+                  )}\r\n+                  {formData.packaging.sacks > 0 && (\r\n+                    <div>Sacks: {formData.packaging.sacks} × {formatCurrency(formData.packagingCosts.sackCost)} = {formatCurrency(formData.packaging.sacks * formData.packagingCosts.sackCost)}</div>\r\n+                  )}\r\n+                  {formData.packaging.boxes > 0 && (\r\n+                    <div>Boxes: {formData.packaging.boxes} × {formatCurrency(formData.packagingCosts.boxCost)} = {formatCurrency(formData.packaging.boxes * formData.packagingCosts.boxCost)}</div>\r\n+                  )}\r\n+                  <div className=\"font-bold border-t pt-1 mt-1\">\r\n+                    Total Packaging: {formatCurrency(\r\n+                      (formData.packaging.basins * formData.packagingCosts.basinCost) +\r\n+                      (formData.packaging.sacks * formData.packagingCosts.sackCost) +\r\n+                      (formData.packaging.boxes * formData.packagingCosts.boxCost)\r\n+                    )}\r\n+                  </div>\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              <div className=\"text-sm font-bold text-green-800 dark:text-green-200 border-t pt-2\">\r\n+                <strong>Grand Total:</strong> {formatCurrency(\r\n+                  (formData.quantitySold * formData.itemPrice) +\r\n+                  (formData.packaging.basins * formData.packagingCosts.basinCost) +\r\n+                  (formData.packaging.sacks * formData.packagingCosts.sackCost) +\r\n+                  (formData.packaging.boxes * formData.packagingCosts.boxCost)\r\n+                )}\r\n+              </div>\r\n             </div>\r\n-          )}\r\n+          ) : null}\r\n \r\n           <div className=\"flex justify-end space-x-3 pt-4\">\r\n             <button\r\n               type=\"button\"\r\n"
                },
                {
                    "date": 1759568653495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,18 +298,8 @@\n                 required\r\n               />\r\n \r\n               <FormInput\r\n-                label=\"Farmer Name\"\r\n-                type=\"text\"\r\n-                value={formData.farmer || ''}\r\n-                onChange={(value) => setFormData({ ...formData, farmer: value as string })}\r\n-                error={errors.farmer}\r\n-                required\r\n-                placeholder=\"Farmer full name\"\r\n-              />\r\n-\r\n-              <FormInput\r\n                 label=\"Farmer ID\"\r\n                 type=\"text\"\r\n                 value={formData.farmerId}\r\n                 onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\r\n"
                },
                {
                    "date": 1759568659198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,8 @@\n \r\n     if (!formData.date) newErrors.date = 'Date is required';\r\n     if (!formData.code || formData.code < 100) newErrors.code = 'Valid code is required';\r\n     if (!formData.pickupPoint) newErrors.pickupPoint = 'Pickup point is required';\r\n-    if (!formData.farmer?.trim()) newErrors.farmer = 'Farmer name is required';\r\n     if (!formData.farmerId?.trim()) newErrors.farmerId = 'Farmer ID is required';\r\n     if (!formData.quantitySold || formData.quantitySold <= 0) newErrors.quantitySold = 'Valid quantity is required';\r\n     if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\r\n     if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\r\n"
                },
                {
                    "date": 1759568836776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,530 +1,541 @@\n-import React, { useState } from 'react';\r\n-import { Plus, Package } from 'lucide-react';\r\n-import { FormInput } from '../../components/FormInput';\r\n-import { FormSelect } from '../../components/FormSelect';\r\n-import { Modal } from '../../components/Modal';\r\n-import { Card } from '../../components/Card';\r\n-import { DataTable } from '../../components/DataTable';\r\n-import { useApp } from '../../context/AppContext';\r\n-import { SourceRecord } from '../../types';\r\n-import { formatDate, formatCurrency, getPickupPointCode } from '../../utils/helpers';\r\n-\r\n-const pickupPoints = [\r\n-  { value: 'A', label: 'Point A (100-300)' },\r\n-  { value: 'B', label: 'Point B (400-600)' },\r\n-  { value: 'C', label: 'Point C (700-900)' },\r\n-  { value: 'D', label: 'Point D (1000-1200)' },\r\n-] as const;\r\n-\r\n-const paymentMethods = [\r\n-  { value: 'cash', label: 'Cash' },\r\n-  { value: 'mpesa', label: 'M-Pesa' },\r\n-  { value: 'bank', label: 'Bank Transfer' },\r\n-];\r\n-\r\n-const defaultRecord: Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'> = {\r\n-  date: new Date().toISOString().split('T')[0],\r\n-  code: 100,\r\n-  pickupPoint: 'A',\r\n-  farmer: '',\r\n-  farmerId: '',\r\n-  quantitySold: 0,\r\n-  itemPrice: 0,\r\n-  paymentMethods: [],\r\n-  \r\n-  // Driver & Vehicle Info\r\n-  driverName: '',\r\n-  driverId: '',\r\n-  driverPhone: '',\r\n-  vehicleReg: '',\r\n-  vehicleMake: '',\r\n-  \r\n-  // Packaging Info\r\n-  packaging: {\r\n-    basins: 0,\r\n-    sacks: 0,\r\n-    boxes: 0,\r\n-  },\r\n-  packagingCosts: {\r\n-    basinCost: 0,\r\n-    sackCost: 0,\r\n-    boxCost: 0,\r\n-  },\r\n-  assignedBy: '',\r\n-};\r\n-\r\n-export const SourceRecordsPage: React.FC = () => {\r\n-  const { sourceRecords, setSourceRecords, user } = useApp();\r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const [editingRecord, setEditingRecord] = useState<SourceRecord | null>(null);\r\n-  const [formData, setFormData] = useState<Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'>>(defaultRecord);\r\n-  const [errors, setErrors] = useState<Record<string, string>>({});\r\n-\r\n-  const resetForm = () => {\r\n-    setFormData(defaultRecord);\r\n-    setErrors({});\r\n-    setEditingRecord(null);\r\n-  };\r\n-\r\n-  const handleOpenModal = (record?: SourceRecord) => {\r\n-    if (record) {\r\n-      setEditingRecord(record);\r\n-      const { id, totalCost, ...recordData } = record;\r\n-      setFormData(recordData);\r\n-    } else {\r\n-      resetForm();\r\n-    }\r\n-    setIsModalOpen(true);\r\n-  };\r\n-\r\n-  const handleCloseModal = () => {\r\n-    setIsModalOpen(false);\r\n-    resetForm();\r\n-  };\r\n-\r\n-  const validateForm = (): boolean => {\r\n-    const newErrors: Record<string, string> = {};\r\n-\r\n-    if (!formData.date) newErrors.date = 'Date is required';\r\n-    if (!formData.code || formData.code < 100) newErrors.code = 'Valid code is required';\r\n-    if (!formData.pickupPoint) newErrors.pickupPoint = 'Pickup point is required';\r\n-    if (!formData.farmerId?.trim()) newErrors.farmerId = 'Farmer ID is required';\r\n-    if (!formData.quantitySold || formData.quantitySold <= 0) newErrors.quantitySold = 'Valid quantity is required';\r\n-    if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\r\n-    if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\r\n-    if (!formData.driverId?.trim()) newErrors.driverId = 'Driver ID is required';\r\n-    if (!formData.vehicleReg?.trim()) newErrors.vehicleReg = 'Vehicle registration is required';\r\n-    if (!formData.assignedBy?.trim()) newErrors.assignedBy = 'Data entry person is required';\r\n-\r\n-    const { min, max } = getPickupPointCode(formData.pickupPoint as 'A' | 'B' | 'C' | 'D');\r\n-    if (formData.code < min || formData.code > max) {\r\n-      newErrors.code = `Code must be between ${min} and ${max} for Point ${formData.pickupPoint}`;\r\n-    }\r\n-\r\n-    setErrors(newErrors);\r\n-    return Object.keys(newErrors).length === 0;\r\n-  };\r\n-\r\n-  const handleSubmit = (e: React.FormEvent) => {\r\n-    e.preventDefault();\r\n-    \r\n-    if (!validateForm()) return;\r\n-\r\n-    const totalCost = formData.quantitySold * formData.itemPrice;\r\n-    const totalPackagingCost = \r\n-      (formData.packaging.basins * formData.packagingCosts.basinCost) +\r\n-      (formData.packaging.sacks * formData.packagingCosts.sackCost) +\r\n-      (formData.packaging.boxes * formData.packagingCosts.boxCost);\r\n-    \r\n-    const newRecord = {\r\n-      ...formData,\r\n-      totalCost,\r\n-      totalPackagingCost,\r\n-      farmerId: formData.farmerId || `FAR-${Date.now()}`,\r\n-      assignedBy: formData.assignedBy || user?.name || 'Unknown',\r\n-    };\r\n-\r\n-    if (editingRecord) {\r\n-      setSourceRecords(\r\n-        sourceRecords.map((record) =>\r\n-          record.id === editingRecord.id ? { ...newRecord, id: editingRecord.id } : record\r\n-        )\r\n-      );\r\n-    } else {\r\n-      const id = `SRC-${Date.now()}`;\r\n-      setSourceRecords([...sourceRecords, { ...newRecord, id }]);\r\n-    }\r\n-\r\n-    handleCloseModal();\r\n-  };\r\n-\r\n-  const handleDelete = (record: SourceRecord) => {\r\n-    if (window.confirm('Are you sure you want to delete this record?')) {\r\n-      setSourceRecords(sourceRecords.filter((r) => r.id !== record.id));\r\n-    }\r\n-  };\r\n-\r\n-  const columns = [\r\n-    {\r\n-      key: 'date' as keyof SourceRecord,\r\n-      label: 'Date',\r\n-      render: (value: string) => formatDate(value),\r\n-      sortable: true,\r\n-    },\r\n-    {\r\n-      key: 'pickupPoint' as keyof SourceRecord,\r\n-      label: 'Pickup',\r\n-    },\r\n-    {\r\n-      key: 'driverName' as keyof SourceRecord,\r\n-      label: 'Driver',\r\n-      sortable: true,\r\n-    },\r\n-    {\r\n-      key: 'vehicleReg' as keyof SourceRecord,\r\n-      label: 'Vehicle',\r\n-      render: (value: string, row: SourceRecord) => `${value} ${row.vehicleMake ? `(${row.vehicleMake})` : ''}`,\r\n-    },\r\n-    {\r\n-      key: 'packaging' as keyof SourceRecord,\r\n-      label: 'Packaging',\r\n-      render: (value: any) => {\r\n-        const { basins, sacks, boxes } = value;\r\n-        const parts = [];\r\n-        if (basins > 0) parts.push(`${basins}B`);\r\n-        if (sacks > 0) parts.push(`${sacks}S`);\r\n-        if (boxes > 0) parts.push(`${boxes}BG`);\r\n-        return parts.join(', ') || 'None';\r\n-      },\r\n-    },\r\n-    {\r\n-      key: 'quantitySold' as keyof SourceRecord,\r\n-      label: 'Quantity (kg)',\r\n-      render: (value: number) => `${value} kg`,\r\n-    },\r\n-    {\r\n-      key: 'totalCost' as keyof SourceRecord,\r\n-      label: 'Total Cost',\r\n-      render: (value: number) => formatCurrency(value),\r\n-      sortable: true,\r\n-    },\r\n-    {\r\n-      key: 'assignedBy' as keyof SourceRecord,\r\n-      label: 'Entered By',\r\n-      sortable: true,\r\n-    },\r\n-  ];\r\n-\r\n-  const totalGoodsIn = sourceRecords.reduce((sum, record) => sum + record.quantitySold, 0);\r\n-  const totalCostValue = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\r\n-\r\n-  return (\r\n-    <div className=\"space-y-6\">\r\n-      {/* Header */}\r\n-      <div className=\"flex items-center justify-between\">\r\n-        <div>\r\n-          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Source Records</h1>\r\n-          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n-            Track miraa goods received from pickup points\r\n-          </p>\r\n-        </div>\r\n-        <button\r\n-          onClick={() => handleOpenModal()}\r\n-          className=\"btn-primary flex items-center space-x-2\"\r\n-        >\r\n-          <Plus className=\"h-5 w-5\" />\r\n-          <span>Add Record</span>\r\n-        </button>\r\n-      </div>\r\n-\r\n-      {/* Summary Cards */}\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n-        <Card className=\"p-6\">\r\n-          <div className=\"flex items-center\">\r\n-            <div className=\"p-3 rounded-lg bg-bright-green\">\r\n-              <Package className=\"h-6 w-6 text-white\" />\r\n-            </div>\r\n-            <div className=\"ml-4\">\r\n-              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Records</p>\r\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{sourceRecords.length}</p>\r\n-            </div>\r\n-          </div>\r\n-        </Card>\r\n-\r\n-        <Card className=\"p-6\">\r\n-          <div className=\"flex items-center\">\r\n-            <div className=\"p-3 rounded-lg bg-yellow-500\">\r\n-              <Package className=\"h-6 w-6 text-white\" />\r\n-            </div>\r\n-            <div className=\"ml-4\">\r\n-              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Goods In</p>\r\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{totalGoodsIn} kg</p>\r\n-            </div>\r\n-          </div>\r\n-        </Card>\r\n-\r\n-        <Card className=\"p-6\">\r\n-          <div className=\"flex items-center\">\r\n-            <div className=\"p-3 rounded-lg bg-red-500\">\r\n-              <Package className=\"h-6 w-6 text-white\" />\r\n-            </div>\r\n-            <div className=\"ml-4\">\r\n-              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Cost</p>\r\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{formatCurrency(totalCostValue)}</p>\r\n-            </div>\r\n-          </div>\r\n-        </Card>\r\n-      </div>\r\n-\r\n-      {/* Data Table */}\r\n-      <Card className=\"p-6\">\r\n-        <DataTable\r\n-          data={sourceRecords}\r\n-          columns={columns}\r\n-          onEdit={handleOpenModal}\r\n-          onDelete={handleDelete}\r\n-          emptyMessage=\"No source records yet. Click 'Add Record' to get started.\"\r\n-        />\r\n-      </Card>\r\n-\r\n-      {/* Modal */}\r\n-      <Modal\r\n-        isOpen={isModalOpen}\r\n-        onClose={handleCloseModal}\r\n-        title={editingRecord ? 'Edit Source Record' : 'Add Source Record'}\r\n-        size=\"lg\"\r\n-      >\r\n-        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n-          {/* Basic Info */}\r\n-          <div>\r\n-            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Basic Information</h4>\r\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-              <FormInput\r\n-                label=\"Date\"\r\n-                type=\"date\"\r\n-                value={formData.date}\r\n-                onChange={(value) => setFormData({ ...formData, date: value as string })}\r\n-                error={errors.date}\r\n-                required\r\n-              />\r\n-\r\n-              <FormSelect\r\n-                label=\"Pickup Point\"\r\n-                value={formData.pickupPoint}\r\n-                onChange={(value) => setFormData({ ...formData, pickupPoint: value as any })}\r\n-                options={pickupPoints}\r\n-                error={errors.pickupPoint}\r\n-                required\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Farmer ID\"\r\n-                type=\"text\"\r\n-                value={formData.farmerId}\r\n-                onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\r\n-                error={errors.farmerId}\r\n-                required\r\n-                placeholder=\"Farmer identification\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Quantity (kg)\"\r\n-                type=\"number\"\r\n-                value={formData.quantitySold}\r\n-                onChange={(value) => setFormData({ ...formData, quantitySold: value as number })}\r\n-                error={errors.quantitySold}\r\n-                required\r\n-                placeholder=\"Weight in kilograms\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Price per kg\"\r\n-                type=\"number\"\r\n-                value={formData.itemPrice}\r\n-                onChange={(value) => setFormData({ ...formData, itemPrice: value as number })}\r\n-                error={errors.itemPrice}\r\n-                required\r\n-                placeholder=\"Price per kilogram\"\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-\r\n-          {/* Driver & Vehicle Info */}\r\n-          <div>\r\n-            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Driver & Vehicle Details</h4>\r\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-              <FormInput\r\n-                label=\"Driver Name\"\r\n-                type=\"text\"\r\n-                value={formData.driverName}\r\n-                onChange={(value) => setFormData({ ...formData, driverName: value as string })}\r\n-                error={errors.driverName}\r\n-                required\r\n-                placeholder=\"Driver full name\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Driver ID\"\r\n-                type=\"text\"\r\n-                value={formData.driverId}\r\n-                onChange={(value) => setFormData({ ...formData, driverId: value as string })}\r\n-                error={errors.driverId}\r\n-                required\r\n-                placeholder=\"Driver identification\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Driver Phone\"\r\n-                type=\"tel\"\r\n-                value={formData.driverPhone}\r\n-                onChange={(value) => setFormData({ ...formData, driverPhone: value as string })}\r\n-                placeholder=\"Driver phone number\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Vehicle Registration\"\r\n-                type=\"text\"\r\n-                value={formData.vehicleReg}\r\n-                onChange={(value) => setFormData({ ...formData, vehicleReg: value as string })}\r\n-                error={errors.vehicleReg}\r\n-                required\r\n-                placeholder=\"e.g., KAA 123A\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Vehicle Make\"\r\n-                type=\"text\"\r\n-                value={formData.vehicleMake || ''}\r\n-                onChange={(value) => setFormData({ ...formData, vehicleMake: value as string })}\r\n-                placeholder=\"e.g., Toyota Hiace\"\r\n-                className=\"md:col-span-1\"\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-\r\n-          {/* Packaging Info */}\r\n-          <div>\r\n-            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Packaging Details</h4>\r\n-            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n-              <FormInput\r\n-                label=\"Basins\"\r\n-                type=\"number\"\r\n-                value={formData.packaging.basins}\r\n-                onChange={(value) => setFormData({\r\n-                  ...formData,\r\n-                  packaging: { ...formData.packaging, basins: value as number }\r\n-                })}\r\n-                placeholder=\"Number of basins\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Sacks\"\r\n-                type=\"number\"\r\n-                value={formData.packaging.sacks}\r\n-                onChange={(value) => setFormData({\r\n-                  ...formData,\r\n-                  packaging: { ...formData.packaging, sacks: value as number }\r\n-                })}\r\n-                placeholder=\"Number of sacks\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Boxes\"\r\n-                type=\"number\"\r\n-                value={formData.packaging.boxes}\r\n-                onChange={(value) => setFormData({\r\n-                  ...formData,\r\n-                  packaging: { ...formData.packaging, boxes: value as number }\r\n-                })}\r\n-                placeholder=\"Number of boxes\"\r\n-              />\r\n-            </div>\r\n-\r\n-            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n-              <FormInput\r\n-                label=\"Basin Cost (each)\"\r\n-                type=\"number\"\r\n-                value={formData.packagingCosts.basinCost}\r\n-                onChange={(value) => setFormData({\r\n-                  ...formData,\r\n-                  packagingCosts: { ...formData.packagingCosts, basinCost: value as number }\r\n-                })}\r\n-                placeholder=\"Cost per basin\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Sack Cost (each)\"\r\n-                type=\"number\"\r\n-                value={formData.packagingCosts.sackCost}\r\n-                onChange={(value) => setFormData({\r\n-                  ...formData,\r\n-                  packagingCosts: { ...formData.packagingCosts, sackCost: value as number }\r\n-                })}\r\n-                placeholder=\"Cost per sack\"\r\n-              />\r\n-\r\n-              <FormInput\r\n-                label=\"Box Cost (each)\"\r\n-                type=\"number\"\r\n-                value={formData.packagingCosts.boxCost}\r\n-                onChange={(value) => setFormData({\r\n-                  ...formData,\r\n-                  packagingCosts: { ...formData.packagingCosts, boxCost: value as number }\r\n-                })}\r\n-                placeholder=\"Cost per box\"\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-\r\n-          {/* Data Entry Info */}\r\n-          <div>\r\n-            <FormInput\r\n-              label=\"Entered By\"\r\n-              type=\"text\"\r\n-              value={formData.assignedBy || user?.name || ''}\r\n-              onChange={(value) => setFormData({ ...formData, assignedBy: value as string })}\r\n-              error={errors.assignedBy}\r\n-              required\r\n-              placeholder=\"Person entering this data\"\r\n-            />\r\n-          </div>\r\n-\r\n-          {/* Auto-calculated totals */}\r\n-          {(formData.quantitySold > 0 && formData.itemPrice > 0) || formData.packaging.basins > 0 || formData.packaging.sacks > 0 || formData.packaging.boxes > 0 ? (\r\n-            <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg space-y-2\">\r\n-              {formData.quantitySold > 0 && formData.itemPrice > 0 && (\r\n-                <p className=\"text-sm text-green-800 dark:text-green-200\">\r\n-                  <strong>Goods Cost:</strong> {formatCurrency(formData.quantitySold * formData.itemPrice)}\r\n-                </p>\r\n-              )}\r\n-              \r\n-              <div className=\"text-sm text-green-800 dark:text-green-200\">\r\n-                <strong>Packaging Cost:</strong>\r\n-                <div className=\"ml-4 space-y-1\">\r\n-                  {formData.packaging.basins > 0 && (\r\n-                    <div>Basins: {formData.packaging.basins} × {formatCurrency(formData.packagingCosts.basinCost)} = {formatCurrency(formData.packaging.basins * formData.packagingCosts.basinCost)}</div>\r\n-                  )}\r\n-                  {formData.packaging.sacks > 0 && (\r\n-                    <div>Sacks: {formData.packaging.sacks} × {formatCurrency(formData.packagingCosts.sackCost)} = {formatCurrency(formData.packaging.sacks * formData.packagingCosts.sackCost)}</div>\r\n-                  )}\r\n-                  {formData.packaging.boxes > 0 && (\r\n-                    <div>Boxes: {formData.packaging.boxes} × {formatCurrency(formData.packagingCosts.boxCost)} = {formatCurrency(formData.packaging.boxes * formData.packagingCosts.boxCost)}</div>\r\n-                  )}\r\n-                  <div className=\"font-bold border-t pt-1 mt-1\">\r\n-                    Total Packaging: {formatCurrency(\r\n-                      (formData.packaging.basins * formData.packagingCosts.basinCost) +\r\n-                      (formData.packaging.sacks * formData.packagingCosts.sackCost) +\r\n-                      (formData.packaging.boxes * formData.packagingCosts.boxCost)\r\n-                    )}\r\n-                  </div>\r\n-                </div>\r\n-              </div>\r\n-              \r\n-              <div className=\"text-sm font-bold text-green-800 dark:text-green-200 border-t pt-2\">\r\n-                <strong>Grand Total:</strong> {formatCurrency(\r\n-                  (formData.quantitySold * formData.itemPrice) +\r\n-                  (formData.packaging.basins * formData.packagingCosts.basinCost) +\r\n-                  (formData.packaging.sacks * formData.packagingCosts.sackCost) +\r\n-                  (formData.packaging.boxes * formData.packagingCosts.boxCost)\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ) : null}\r\n-\r\n-          <div className=\"flex justify-end space-x-3 pt-4\">\r\n-            <button\r\n-              type=\"button\"\r\n-              onClick={handleCloseModal}\r\n-              className=\"btn-secondary\"\r\n-            >\r\n-              Cancel\r\n-            </button>\r\n-            <button type=\"submit\" className=\"btn-primary\">\r\n-              {editingRecord ? 'Update Record' : 'Add Record'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </Modal>\r\n-    </div>\r\n-  );\r\n-};\r\n+import React, { useState } from 'react';\n+import { Plus, Package } from 'lucide-react';\n+import { FormInput } from '../../components/FormInput';\n+import { FormSelect } from '../../components/FormSelect';\n+import { Modal } from '../../components/Modal';\n+import { Card } from '../../components/Card';\n+import { DataTable } from '../../components/DataTable';\n+import { useApp } from '../../context/AppContext';\n+import { SourceRecord } from '../../types';\n+import { formatDate, formatCurrency, getPickupPointCode } from '../../utils/helpers';\n+\n+const pickupPoints = [\n+  { value: 'A', label: 'Point A (100-300)' },\n+  { value: 'B', label: 'Point B (400-600)' },\n+  { value: 'C', label: 'Point C (700-900)' },\n+  { value: 'D', label: 'Point D (1000-1200)' },\n+] as const;\n+\n+const paymentMethods = [\n+  { value: 'cash', label: 'Cash' },\n+  { value: 'mpesa', label: 'M-Pesa' },\n+  { value: 'bank', label: 'Bank Transfer' },\n+];\n+\n+const defaultRecord: Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'> = {\n+  date: new Date().toISOString().split('T')[0],\n+  code: 100,\n+  pickupPoint: 'A',\n+  farmer: '',\n+  farmerId: '',\n+  quantitySold: 0,\n+  itemPrice: 0,\n+  paymentMethods: [],\n+  \n+  // Driver & Vehicle Info\n+  driverName: '',\n+  driverId: '',\n+  driverPhone: '',\n+  vehicleReg: '',\n+  vehicleMake: '',\n+  \n+  // Packaging Info\n+  packaging: {\n+    basins: 0,\n+    sacks: 0,\n+    boxes: 0,\n+  },\n+  packagingCosts: {\n+    basinCost: 0,\n+    sackCost: 0,\n+    boxCost: 0,\n+  },\n+  assignedBy: '',\n+};\n+\n+export const SourceRecordsPage: React.FC = () => {\n+  const { sourceRecords, setSourceRecords, user } = useApp();\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [editingRecord, setEditingRecord] = useState<SourceRecord | null>(null);\n+  const [formData, setFormData] = useState<Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'>>(defaultRecord);\n+  const [errors, setErrors] = useState<Record<string, string>>({});\n+\n+  const resetForm = () => {\n+    setFormData(defaultRecord);\n+    setErrors({});\n+    setEditingRecord(null);\n+  };\n+\n+  const handleOpenModal = (record?: SourceRecord) => {\n+    if (record) {\n+      setEditingRecord(record);\n+      const { id, totalCost, ...recordData } = record;\n+      setFormData(recordData);\n+    } else {\n+      resetForm();\n+    }\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleCloseModal = () => {\n+    setIsModalOpen(false);\n+    resetForm();\n+  };\n+\n+  const validateForm = (): boolean => {\n+    const newErrors: Record<string, string> = {};\n+\n+    if (!formData.date) newErrors.date = 'Date is required';\n+    if (!formData.code || formData.code < 100) newErrors.code = 'Valid code is required';\n+    if (!formData.pickupPoint) newErrors.pickupPoint = 'Pickup point is required';\n+    if (!formData.farmer?.trim()) newErrors.farmer = 'Farmer name is required';\n+    if (!formData.farmerId?.trim()) newErrors.farmerId = 'Farmer ID is required';\n+    if (!formData.quantitySold || formData.quantitySold <= 0) newErrors.quantitySold = 'Valid quantity is required';\n+    if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\n+    if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\n+    if (!formData.driverId?.trim()) newErrors.driverId = 'Driver ID is required';\n+    if (!formData.vehicleReg?.trim()) newErrors.vehicleReg = 'Vehicle registration is required';\n+    if (!formData.assignedBy?.trim()) newErrors.assignedBy = 'Data entry person is required';\n+\n+    const { min, max } = getPickupPointCode(formData.pickupPoint as 'A' | 'B' | 'C' | 'D');\n+    if (formData.code < min || formData.code > max) {\n+      newErrors.code = `Code must be between ${min} and ${max} for Point ${formData.pickupPoint}`;\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleSubmit = (e: React.FormEvent) => {\n+    e.preventDefault();\n+    \n+    if (!validateForm()) return;\n+\n+    const totalCost = formData.quantitySold * formData.itemPrice;\n+    const totalPackagingCost = \n+      (formData.packaging.basins * formData.packagingCosts.basinCost) +\n+      (formData.packaging.sacks * formData.packagingCosts.sackCost) +\n+      (formData.packaging.boxes * formData.packagingCosts.boxCost);\n+    \n+    const newRecord = {\n+      ...formData,\n+      totalCost,\n+      totalPackagingCost,\n+      farmerId: formData.farmerId || `FAR-${Date.now()}`,\n+      assignedBy: formData.assignedBy || user?.name || 'Unknown',\n+    };\n+\n+    if (editingRecord) {\n+      setSourceRecords(\n+        sourceRecords.map((record) =>\n+          record.id === editingRecord.id ? { ...newRecord, id: editingRecord.id } : record\n+        )\n+      );\n+    } else {\n+      const id = `SRC-${Date.now()}`;\n+      setSourceRecords([...sourceRecords, { ...newRecord, id }]);\n+    }\n+\n+    handleCloseModal();\n+  };\n+\n+  const handleDelete = (record: SourceRecord) => {\n+    if (window.confirm('Are you sure you want to delete this record?')) {\n+      setSourceRecords(sourceRecords.filter((r) => r.id !== record.id));\n+    }\n+  };\n+\n+  const columns = [\n+    {\n+      key: 'date' as keyof SourceRecord,\n+      label: 'Date',\n+      render: (value: string) => formatDate(value),\n+      sortable: true,\n+    },\n+    {\n+      key: 'pickupPoint' as keyof SourceRecord,\n+      label: 'Pickup',\n+    },\n+    {\n+      key: 'driverName' as keyof SourceRecord,\n+      label: 'Driver',\n+      sortable: true,\n+    },\n+    {\n+      key: 'vehicleReg' as keyof SourceRecord,\n+      label: 'Vehicle',\n+      render: (value: string, row: SourceRecord) => `${value} ${row.vehicleMake ? `(${row.vehicleMake})` : ''}`,\n+    },\n+    {\n+      key: 'packaging' as keyof SourceRecord,\n+      label: 'Packaging',\n+      render: (value: any) => {\n+        const { basins, sacks, boxes } = value;\n+        const parts = [];\n+        if (basins > 0) parts.push(`${basins}B`);\n+        if (sacks > 0) parts.push(`${sacks}S`);\n+        if (boxes > 0) parts.push(`${boxes}BG`);\n+        return parts.join(', ') || 'None';\n+      },\n+    },\n+    {\n+      key: 'quantitySold' as keyof SourceRecord,\n+      label: 'Quantity (kg)',\n+      render: (value: number) => `${value} kg`,\n+    },\n+    {\n+      key: 'totalCost' as keyof SourceRecord,\n+      label: 'Total Cost',\n+      render: (value: number) => formatCurrency(value),\n+      sortable: true,\n+    },\n+    {\n+      key: 'assignedBy' as keyof SourceRecord,\n+      label: 'Entered By',\n+      sortable: true,\n+    },\n+  ];\n+\n+  const totalGoodsIn = sourceRecords.reduce((sum, record) => sum + record.quantitySold, 0);\n+  const totalCostValue = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\n+\n+  return (\n+    <div className=\"space-y-6\">\n+      {/* Header */}\n+      <div className=\"flex items-center justify-between\">\n+        <div>\n+          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Source Records</h1>\n+          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n+            Track miraa goods received from pickup points\n+          </p>\n+        </div>\n+        <button\n+          onClick={() => handleOpenModal()}\n+          className=\"btn-primary flex items-center space-x-2\"\n+        >\n+          <Plus className=\"h-5 w-5\" />\n+          <span>Add Record</span>\n+        </button>\n+      </div>\n+\n+      {/* Summary Cards */}\n+      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n+        <Card className=\"p-6\">\n+          <div className=\"flex items-center\">\n+            <div className=\"p-3 rounded-lg bg-bright-green\">\n+              <Package className=\"h-6 w-6 text-white\" />\n+            </div>\n+            <div className=\"ml-4\">\n+              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Records</p>\n+              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{sourceRecords.length}</p>\n+            </div>\n+          </div>\n+        </Card>\n+\n+        <Card className=\"p-6\">\n+          <div className=\"flex items-center\">\n+            <div className=\"p-3 rounded-lg bg-yellow-500\">\n+              <Package className=\"h-6 w-6 text-white\" />\n+            </div>\n+            <div className=\"ml-4\">\n+              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Goods In</p>\n+              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{totalGoodsIn} kg</p>\n+            </div>\n+          </div>\n+        </Card>\n+\n+        <Card className=\"p-6\">\n+          <div className=\"flex items-center\">\n+            <div className=\"p-3 rounded-lg bg-red-500\">\n+              <Package className=\"h-6 w-6 text-white\" />\n+            </div>\n+            <div className=\"ml-4\">\n+              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Cost</p>\n+              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{formatCurrency(totalCostValue)}</p>\n+            </div>\n+          </div>\n+        </Card>\n+      </div>\n+\n+      {/* Data Table */}\n+      <Card className=\"p-6\">\n+        <DataTable\n+          data={sourceRecords}\n+          columns={columns}\n+          onEdit={handleOpenModal}\n+          onDelete={handleDelete}\n+          emptyMessage=\"No source records yet. Click 'Add Record' to get started.\"\n+        />\n+      </Card>\n+\n+      {/* Modal */}\n+      <Modal\n+        isOpen={isModalOpen}\n+        onClose={handleCloseModal}\n+        title={editingRecord ? 'Edit Source Record' : 'Add Source Record'}\n+        size=\"lg\"\n+      >\n+        <form onSubmit={handleSubmit} className=\"space-y-6\">\n+          {/* Basic Info */}\n+          <div>\n+            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Basic Information</h4>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <FormInput\n+                label=\"Date\"\n+                type=\"date\"\n+                value={formData.date}\n+                onChange={(value) => setFormData({ ...formData, date: value as string })}\n+                error={errors.date}\n+                required\n+              />\n+\n+              <FormSelect\n+                label=\"Pickup Point\"\n+                value={formData.pickupPoint}\n+                onChange={(value) => setFormData({ ...formData, pickupPoint: value as any })}\n+                options={pickupPoints}\n+                error={errors.pickupPoint}\n+                required\n+              />\n+\n+              <FormInput\n+                label=\"Farmer Name\"\n+                type=\"text\"\n+                value={formData.farmer || ''}\n+                onChange={(value) => setFormData({ ...formData, farmer: value as string })}\n+                error={errors.farmer}\n+                required\n+                placeholder=\"Farmer full name\"\n+              />\n+\n+              <FormInput\n+                label=\"Farmer ID\"\n+                type=\"text\"\n+                value={formData.farmerId}\n+                onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\n+                error={errors.farmerId}\n+                required\n+                placeholder=\"Farmer identification\"\n+              />\n+\n+              <FormInput\n+                label=\"Quantity (kg)\"\n+                type=\"number\"\n+                value={formData.quantitySold}\n+                onChange={(value) => setFormData({ ...formData, quantitySold: value as number })}\n+                error={errors.quantitySold}\n+                required\n+                placeholder=\"Weight in kilograms\"\n+              />\n+\n+              <FormInput\n+                label=\"Price per kg\"\n+                type=\"number\"\n+                value={formData.itemPrice}\n+                onChange={(value) => setFormData({ ...formData, itemPrice: value as number })}\n+                error={errors.itemPrice}\n+                required\n+                placeholder=\"Price per kilogram\"\n+              />\n+            </div>\n+          </div>\n+\n+          {/* Driver & Vehicle Info */}\n+          <div>\n+            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Driver & Vehicle Details</h4>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <FormInput\n+                label=\"Driver Name\"\n+                type=\"text\"\n+                value={formData.driverName}\n+                onChange={(value) => setFormData({ ...formData, driverName: value as string })}\n+                error={errors.driverName}\n+                required\n+                placeholder=\"Driver full name\"\n+              />\n+\n+              <FormInput\n+                label=\"Driver ID\"\n+                type=\"text\"\n+                value={formData.driverId}\n+                onChange={(value) => setFormData({ ...formData, driverId: value as string })}\n+                error={errors.driverId}\n+                required\n+                placeholder=\"Driver identification\"\n+              />\n+\n+              <FormInput\n+                label=\"Driver Phone\"\n+                type=\"tel\"\n+                value={formData.driverPhone}\n+                onChange={(value) => setFormData({ ...formData, driverPhone: value as string })}\n+                placeholder=\"Driver phone number\"\n+              />\n+\n+              <FormInput\n+                label=\"Vehicle Registration\"\n+                type=\"text\"\n+                value={formData.vehicleReg}\n+                onChange={(value) => setFormData({ ...formData, vehicleReg: value as string })}\n+                error={errors.vehicleReg}\n+                required\n+                placeholder=\"e.g., KAA 123A\"\n+              />\n+\n+              <FormInput\n+                label=\"Vehicle Make\"\n+                type=\"text\"\n+                value={formData.vehicleMake || ''}\n+                onChange={(value) => setFormData({ ...formData, vehicleMake: value as string })}\n+                placeholder=\"e.g., Toyota Hiace\"\n+                className=\"md:col-span-1\"\n+              />\n+            </div>\n+          </div>\n+\n+          {/* Packaging Info */}\n+          <div>\n+            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Packaging Details</h4>\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n+              <FormInput\n+                label=\"Basins\"\n+                type=\"number\"\n+                value={formData.packaging.basins}\n+                onChange={(value) => setFormData({\n+                  ...formData,\n+                  packaging: { ...formData.packaging, basins: value as number }\n+                })}\n+                placeholder=\"Number of basins\"\n+              />\n+\n+              <FormInput\n+                label=\"Sacks\"\n+                type=\"number\"\n+                value={formData.packaging.sacks}\n+                onChange={(value) => setFormData({\n+                  ...formData,\n+                  packaging: { ...formData.packaging, sacks: value as number }\n+                })}\n+                placeholder=\"Number of sacks\"\n+              />\n+\n+              <FormInput\n+                label=\"Boxes\"\n+                type=\"number\"\n+                value={formData.packaging.boxes}\n+                onChange={(value) => setFormData({\n+                  ...formData,\n+                  packaging: { ...formData.packaging, boxes: value as number }\n+                })}\n+                placeholder=\"Number of boxes\"\n+              />\n+            </div>\n+\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+              <FormInput\n+                label=\"Basin Cost (each)\"\n+                type=\"number\"\n+                value={formData.packagingCosts.basinCost}\n+                onChange={(value) => setFormData({\n+                  ...formData,\n+                  packagingCosts: { ...formData.packagingCosts, basinCost: value as number }\n+                })}\n+                placeholder=\"Cost per basin\"\n+              />\n+\n+              <FormInput\n+                label=\"Sack Cost (each)\"\n+                type=\"number\"\n+                value={formData.packagingCosts.sackCost}\n+                onChange={(value) => setFormData({\n+                  ...formData,\n+                  packagingCosts: { ...formData.packagingCosts, sackCost: value as number }\n+                })}\n+                placeholder=\"Cost per sack\"\n+              />\n+\n+              <FormInput\n+                label=\"Box Cost (each)\"\n+                type=\"number\"\n+                value={formData.packagingCosts.boxCost}\n+                onChange={(value) => setFormData({\n+                  ...formData,\n+                  packagingCosts: { ...formData.packagingCosts, boxCost: value as number }\n+                })}\n+                placeholder=\"Cost per box\"\n+              />\n+            </div>\n+          </div>\n+\n+          {/* Data Entry Info */}\n+          <div>\n+            <FormInput\n+              label=\"Entered By\"\n+              type=\"text\"\n+              value={formData.assignedBy || user?.name || ''}\n+              onChange={(value) => setFormData({ ...formData, assignedBy: value as string })}\n+              error={errors.assignedBy}\n+              required\n+              placeholder=\"Person entering this data\"\n+            />\n+          </div>\n+\n+          {/* Auto-calculated totals */}\n+          {(formData.quantitySold > 0 && formData.itemPrice > 0) || formData.packaging.basins > 0 || formData.packaging.sacks > 0 || formData.packaging.boxes > 0 ? (\n+            <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg space-y-2\">\n+              {formData.quantitySold > 0 && formData.itemPrice > 0 && (\n+                <p className=\"text-sm text-green-800 dark:text-green-200\">\n+                  <strong>Goods Cost:</strong> {formatCurrency(formData.quantitySold * formData.itemPrice)}\n+                </p>\n+              )}\n+              \n+              <div className=\"text-sm text-green-800 dark:text-green-200\">\n+                <strong>Packaging Cost:</strong>\n+                <div className=\"ml-4 space-y-1\">\n+                  {formData.packaging.basins > 0 && (\n+                    <div>Basins: {formData.packaging.basins} × {formatCurrency(formData.packagingCosts.basinCost)} = {formatCurrency(formData.packaging.basins * formData.packagingCosts.basinCost)}</div>\n+                  )}\n+                  {formData.packaging.sacks > 0 && (\n+                    <div>Sacks: {formData.packaging.sacks} × {formatCurrency(formData.packagingCosts.sackCost)} = {formatCurrency(formData.packaging.sacks * formData.packagingCosts.sackCost)}</div>\n+                  )}\n+                  {formData.packaging.boxes > 0 && (\n+                    <div>Boxes: {formData.packaging.boxes} × {formatCurrency(formData.packagingCosts.boxCost)} = {formatCurrency(formData.packaging.boxes * formData.packagingCosts.boxCost)}</div>\n+                  )}\n+                  <div className=\"font-bold border-t pt-1 mt-1\">\n+                    Total Packaging: {formatCurrency(\n+                      (formData.packaging.basins * formData.packagingCosts.basinCost) +\n+                      (formData.packaging.sacks * formData.packagingCosts.sackCost) +\n+                      (formData.packaging.boxes * formData.packagingCosts.boxCost)\n+                    )}\n+                  </div>\n+                </div>\n+              </div>\n+              \n+              <div className=\"text-sm font-bold text-green-800 dark:text-green-200 border-t pt-2\">\n+                <strong>Grand Total:</strong> {formatCurrency(\n+                  (formData.quantitySold * formData.itemPrice) +\n+                  (formData.packaging.basins * formData.packagingCosts.basinCost) +\n+                  (formData.packaging.sacks * formData.packagingCosts.sackCost) +\n+                  (formData.packaging.boxes * formData.packagingCosts.boxCost)\n+                )}\n+              </div>\n+            </div>\n+          ) : null}\n+\n+          <div className=\"flex justify-end space-x-3 pt-4\">\n+            <button\n+              type=\"button\"\n+              onClick={handleCloseModal}\n+              className=\"btn-secondary\"\n+            >\n+              Cancel\n+            </button>\n+            <button type=\"submit\" className=\"btn-primary\">\n+              {editingRecord ? 'Update Record' : 'Add Record'}\n+            </button>\n+          </div>\n+        </form>\n+      </Modal>\n+    </div>\n+  );\n+};\n"
                },
                {
                    "date": 1759586191394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,12 +10,12 @@\n import { formatDate, formatCurrency, getPickupPointCode } from '../../utils/helpers';\n \n const pickupPoints = [\n   { value: 'A', label: 'Point A (100-300)' },\n-  { value: 'B', label: 'Point B (400-600)' },\n+  { value: 'B', label: 'Point B (400-600) ' },\n   { value: 'C', label: 'Point C (700-900)' },\n   { value: 'D', label: 'Point D (1000-1200)' },\n-] as const;\n+];\n \n const paymentMethods = [\n   { value: 'cash', label: 'Cash' },\n   { value: 'mpesa', label: 'M-Pesa' },\n@@ -310,9 +310,9 @@\n \n               <FormInput\n                 label=\"Farmer ID\"\n                 type=\"text\"\n-                value={formData.farmerId}\n+                value={formData.farmerId || ''}\n                 onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\n                 error={errors.farmerId}\n                 required\n                 placeholder=\"Farmer identification\"\n"
                },
                {
                    "date": 1759586220885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,8 @@\n   { value: 'C', label: 'Point C (700-900)' },\n   { value: 'D', label: 'Point D (1000-1200)' },\n ];\n \n-const paymentMethods = [\n-  { value: 'cash', label: 'Cash' },\n-  { value: 'mpesa', label: 'M-Pesa' },\n-  { value: 'bank', label: 'Bank Transfer' },\n-];\n \n const defaultRecord: Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'> = {\n   date: new Date().toISOString().split('T')[0],\n   code: 100,\n"
                },
                {
                    "date": 1759901068004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,25 +8,88 @@\n import { useApp } from '../../context/AppContext';\n import { SourceRecord } from '../../types';\n import { formatDate, formatCurrency, getPickupPointCode } from '../../utils/helpers';\n \n-const pickupPoints = [\n-  { value: 'A', label: 'Point A (100-300)' },\n-  { value: 'B', label: 'Point B (400-600) ' },\n-  { value: 'C', label: 'Point C (700-900)' },\n-  { value: 'D', label: 'Point D (1000-1200)' },\n+// 5 Key Area Codes with their pickup stations\n+const areaCodes = [\n+  {\n+    code: 'AC001',\n+    name: 'Central Highlands',\n+    region: 'Meru County',\n+    pickupStations: [\n+      { code: 'ST001', name: 'Meru Central Station', location: 'Meru Town Center' },\n+      { code: 'ST002', name: 'Maua Station', location: 'Maua Market' },\n+      { code: 'ST003', name: 'Chuka Station', location: 'Chuka Town' },\n+    ]\n+  },\n+  {\n+    code: 'AC002', \n+    name: 'Eastern Plains',\n+    region: 'Kitui County',\n+    pickupStations: [\n+      { code: 'ST004', name: 'Kitui Central Station', location: 'Kitui Town' },\n+      { code: 'ST005', name: 'Mwingi Station', location: 'Mwingi Market' },\n+      { code: 'ST006', name: 'Mutomo Station', location: 'Mutomo Center' },\n+    ]\n+  },\n+  {\n+    code: 'AC003',\n+    name: 'Coastal Region', \n+    region: 'Mombasa County',\n+    pickupStations: [\n+      { code: 'ST007', name: 'Mombasa Port Station', location: 'Port Area' },\n+      { code: 'ST008', name: 'Kilifi Station', location: 'Kilifi Town' },\n+      { code: 'ST009', name: 'Malindi Station', location: 'Malindi Center' },\n+    ]\n+  },\n+  {\n+    code: 'AC004',\n+    name: 'Northern Frontier',\n+    region: 'Garissa County', \n+    pickupStations: [\n+      { code: 'ST010', name: 'Garissa Central Station', location: 'Garissa Town' },\n+      { code: 'ST011', name: 'Dadaab Station', location: 'Dadaab Area' },\n+      { code: 'ST012', name: 'Fafi Station', location: 'Fafi Center' },\n+    ]\n+  },\n+  {\n+    code: 'AC005',\n+    name: 'Metropolitan Area',\n+    region: 'Nairobi County',\n+    pickupStations: [\n+      { code: 'ST013', name: 'Nairobi CBD Station', location: 'City Center' },\n+      { code: 'ST014', name: 'Eastleigh Station', location: 'Eastleigh Market' },\n+      { code: 'ST015', name: 'Kasarani Station', location: 'Kasarani Area' },\n+    ]\n+  }\n ];\n \n+// Flatten pickup stations for easier selection\n+const pickupStations = areaCodes.flatMap(area => \n+  area.pickupStations.map(station => ({\n+    value: station.code,\n+    label: `${station.code} - ${station.name}`,\n+    areaCode: area.code,\n+    areaName: area.name\n+  }))\n+);\n \n+// Drop-off points for each area\n+const dropOffPoints = {\n+  'AC001': ['Meru Town', 'Maua Market', 'Chuka Center', 'Nkubu', 'Mitunguu'],\n+  'AC002': ['Kitui Town', 'Mwingi Market', 'Mutomo', 'Kibwezi', 'Makindu'],\n+  'AC003': ['Mombasa CBD', 'Kilifi Town', 'Malindi', 'Watamu', 'Diani'],\n+  'AC004': ['Garissa Town', 'Dadaab', 'Fafi', 'Hulugho', 'Ijara'],\n+  'AC005': ['Nairobi CBD', 'Eastleigh', 'Kasarani', 'Ruaraka', 'Kahawa']\n+};\n+\n+\n const defaultRecord: Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'> = {\n   date: new Date().toISOString().split('T')[0],\n-  code: 100,\n-  pickupPoint: 'A',\n-  farmer: '',\n-  farmerId: '',\n+  pickupStationCode: 'ST001',\n+  areaCode: 'AC001',\n   quantitySold: 0,\n   itemPrice: 0,\n-  paymentMethods: [],\n   \n   // Driver & Vehicle Info\n   driverName: '',\n   driverId: '',\n@@ -44,9 +107,15 @@\n     basinCost: 0,\n     sackCost: 0,\n     boxCost: 0,\n   },\n+  \n+  // Drop-off information\n+  dropOffPoint: '',\n+  estimatedDeliveryTime: '',\n+  \n   assignedBy: '',\n+  status: 'loaded',\n };\n \n export const SourceRecordsPage: React.FC = () => {\n   const { sourceRecords, setSourceRecords, user } = useApp();\n@@ -80,24 +149,20 @@\n   const validateForm = (): boolean => {\n     const newErrors: Record<string, string> = {};\n \n     if (!formData.date) newErrors.date = 'Date is required';\n-    if (!formData.code || formData.code < 100) newErrors.code = 'Valid code is required';\n-    if (!formData.pickupPoint) newErrors.pickupPoint = 'Pickup point is required';\n-    if (!formData.farmer?.trim()) newErrors.farmer = 'Farmer name is required';\n-    if (!formData.farmerId?.trim()) newErrors.farmerId = 'Farmer ID is required';\n+    if (!formData.pickupStationCode) newErrors.pickupStationCode = 'Pickup station is required';\n+    if (!formData.areaCode) newErrors.areaCode = 'Area code is required';\n     if (!formData.quantitySold || formData.quantitySold <= 0) newErrors.quantitySold = 'Valid quantity is required';\n     if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\n     if (!formData.driverName?.trim()) newErrors.driverName = 'Driver name is required';\n     if (!formData.driverId?.trim()) newErrors.driverId = 'Driver ID is required';\n+    if (!formData.driverPhone?.trim()) newErrors.driverPhone = 'Driver phone is required';\n     if (!formData.vehicleReg?.trim()) newErrors.vehicleReg = 'Vehicle registration is required';\n+    if (!formData.dropOffPoint?.trim()) newErrors.dropOffPoint = 'Drop-off point is required';\n+    if (!formData.estimatedDeliveryTime?.trim()) newErrors.estimatedDeliveryTime = 'Estimated delivery time is required';\n     if (!formData.assignedBy?.trim()) newErrors.assignedBy = 'Data entry person is required';\n \n-    const { min, max } = getPickupPointCode(formData.pickupPoint as 'A' | 'B' | 'C' | 'D');\n-    if (formData.code < min || formData.code > max) {\n-      newErrors.code = `Code must be between ${min} and ${max} for Point ${formData.pickupPoint}`;\n-    }\n-\n     setErrors(newErrors);\n     return Object.keys(newErrors).length === 0;\n   };\n \n@@ -115,9 +180,8 @@\n     const newRecord = {\n       ...formData,\n       totalCost,\n       totalPackagingCost,\n-      farmerId: formData.farmerId || `FAR-${Date.now()}`,\n       assignedBy: formData.assignedBy || user?.name || 'Unknown',\n     };\n \n     if (editingRecord) {\n@@ -147,22 +211,42 @@\n       render: (value: string) => formatDate(value),\n       sortable: true,\n     },\n     {\n-      key: 'pickupPoint' as keyof SourceRecord,\n-      label: 'Pickup',\n+      key: 'pickupStationCode' as keyof SourceRecord,\n+      label: 'Station Code',\n+      sortable: true,\n     },\n     {\n+      key: 'areaCode' as keyof SourceRecord,\n+      label: 'Area Code',\n+      sortable: true,\n+    },\n+    {\n       key: 'driverName' as keyof SourceRecord,\n       label: 'Driver',\n       sortable: true,\n     },\n     {\n-      key: 'vehicleReg' as keyof SourceRecord,\n-      label: 'Vehicle',\n-      render: (value: string, row: SourceRecord) => `${value} ${row.vehicleMake ? `(${row.vehicleMake})` : ''}`,\n+      key: 'dropOffPoint' as keyof SourceRecord,\n+      label: 'Drop-off Point',\n+      sortable: true,\n     },\n     {\n+      key: 'status' as keyof SourceRecord,\n+      label: 'Status',\n+      render: (value: string) => (\n+        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n+          value === 'delivered' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\n+          value === 'in-transit' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200' :\n+          'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-200'\n+        }`}>\n+          {value}\n+        </span>\n+      ),\n+      sortable: true,\n+    },\n+    {\n       key: 'packaging' as keyof SourceRecord,\n       label: 'Packaging',\n       render: (value: any) => {\n         const { basins, sacks, boxes } = value;\n@@ -284,34 +368,54 @@\n                 required\n               />\n \n               <FormSelect\n-                label=\"Pickup Point\"\n-                value={formData.pickupPoint}\n-                onChange={(value) => setFormData({ ...formData, pickupPoint: value as any })}\n-                options={pickupPoints}\n-                error={errors.pickupPoint}\n+                label=\"Area Code\"\n+                value={formData.areaCode}\n+                onChange={(value) => {\n+                  const selectedArea = areaCodes.find(area => area.code === value);\n+                  setFormData({ \n+                    ...formData, \n+                    areaCode: value as string,\n+                    pickupStationCode: selectedArea?.pickupStations[0]?.code || ''\n+                  });\n+                }}\n+                options={areaCodes.map(area => ({\n+                  value: area.code,\n+                  label: `${area.code} - ${area.name} (${area.region})`\n+                }))}\n+                error={errors.areaCode}\n                 required\n               />\n \n-              <FormInput\n-                label=\"Farmer Name\"\n-                type=\"text\"\n-                value={formData.farmer || ''}\n-                onChange={(value) => setFormData({ ...formData, farmer: value as string })}\n-                error={errors.farmer}\n+              <FormSelect\n+                label=\"Pickup Station\"\n+                value={formData.pickupStationCode}\n+                onChange={(value) => setFormData({ ...formData, pickupStationCode: value as string })}\n+                options={pickupStations.filter(station => station.areaCode === formData.areaCode)}\n+                error={errors.pickupStationCode}\n                 required\n-                placeholder=\"Farmer full name\"\n               />\n \n+              <FormSelect\n+                label=\"Drop-off Point\"\n+                value={formData.dropOffPoint}\n+                onChange={(value) => setFormData({ ...formData, dropOffPoint: value as string })}\n+                options={formData.areaCode ? dropOffPoints[formData.areaCode as keyof typeof dropOffPoints]?.map(point => ({\n+                  value: point,\n+                  label: point\n+                })) || [] : []}\n+                error={errors.dropOffPoint}\n+                required\n+              />\n+\n               <FormInput\n-                label=\"Farmer ID\"\n-                type=\"text\"\n-                value={formData.farmerId || ''}\n-                onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\n-                error={errors.farmerId}\n+                label=\"Estimated Delivery Time\"\n+                type=\"datetime-local\"\n+                value={formData.estimatedDeliveryTime}\n+                onChange={(value) => setFormData({ ...formData, estimatedDeliveryTime: value as string })}\n+                error={errors.estimatedDeliveryTime}\n                 required\n-                placeholder=\"Farmer identification\"\n               />\n \n               <FormInput\n                 label=\"Quantity (kg)\"\n"
                },
                {
                    "date": 1759901355202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { Card } from '../../components/Card';\n import { DataTable } from '../../components/DataTable';\n import { useApp } from '../../context/AppContext';\n import { SourceRecord } from '../../types';\n-import { formatDate, formatCurrency, getPickupPointCode } from '../../utils/helpers';\n+import { formatDate, formatCurrency } from '../../utils/helpers';\n \n // 5 Key Area Codes with their pickup stations\n const areaCodes = [\n   {\n"
                },
                {
                    "date": 1759915615111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n-import React, { useState } from 'react';\n-import { Plus, Package } from 'lucide-react';\n+import React, { useState, useMemo } from 'react';\n+import { Plus, Package, Search, Filter, Download, TrendingUp, TrendingDown, MapPin, Truck, User, Calendar, BarChart3, AlertCircle, CheckCircle, Clock, Edit, Trash2, Eye, RefreshCw } from 'lucide-react';\n import { FormInput } from '../../components/FormInput';\n import { FormSelect } from '../../components/FormSelect';\n import { Modal } from '../../components/Modal';\n import { Card } from '../../components/Card';\n import { DataTable } from '../../components/DataTable';\n import { useApp } from '../../context/AppContext';\n import { SourceRecord } from '../../types';\n import { formatDate, formatCurrency } from '../../utils/helpers';\n+import { useNotificationService } from '../../services/notificationService';\n \n // 5 Key Area Codes with their pickup stations\n const areaCodes = [\n   {\n@@ -118,12 +119,28 @@\n };\n \n export const SourceRecordsPage: React.FC = () => {\n   const { sourceRecords, setSourceRecords, user } = useApp();\n+  const { showSuccessNotification, showErrorNotification } = useNotificationService();\n+  \n+  // Enhanced state management\n   const [isModalOpen, setIsModalOpen] = useState(false);\n   const [editingRecord, setEditingRecord] = useState<SourceRecord | null>(null);\n   const [formData, setFormData] = useState<Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'>>(defaultRecord);\n   const [errors, setErrors] = useState<Record<string, string>>({});\n+  \n+  // Filter and search state\n+  const [searchTerm, setSearchTerm] = useState('');\n+  const [statusFilter, setStatusFilter] = useState<string>('all');\n+  const [areaFilter, setAreaFilter] = useState<string>('all');\n+  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n+  const [sortBy, setSortBy] = useState<string>('date');\n+  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n+  \n+  // View state\n+  const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');\n+  const [isRefreshing, setIsRefreshing] = useState(false);\n+  const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\n \n   const resetForm = () => {\n     setFormData(defaultRecord);\n     setErrors({});\n@@ -200,11 +217,153 @@\n \n   const handleDelete = (record: SourceRecord) => {\n     if (window.confirm('Are you sure you want to delete this record?')) {\n       setSourceRecords(sourceRecords.filter((r) => r.id !== record.id));\n+      showSuccessNotification('Success', 'Record deleted successfully');\n     }\n   };\n \n+  // Enhanced functionality functions\n+  const handleRefresh = async () => {\n+    setIsRefreshing(true);\n+    try {\n+      await new Promise(resolve => setTimeout(resolve, 1000));\n+      showSuccessNotification('Success', 'Data refreshed successfully');\n+    } catch (error) {\n+      showErrorNotification('Error', 'Failed to refresh data');\n+    } finally {\n+      setIsRefreshing(false);\n+    }\n+  };\n+\n+  const handleExport = async (format: 'csv' | 'excel' | 'pdf') => {\n+    try {\n+      await new Promise(resolve => setTimeout(resolve, 2000));\n+      showSuccessNotification('Success', `${format.toUpperCase()} export completed`);\n+    } catch (error) {\n+      showErrorNotification('Error', `Failed to export ${format.toUpperCase()}`);\n+    }\n+  };\n+\n+  const handleBulkDelete = () => {\n+    if (selectedRecords.length === 0) {\n+      showErrorNotification('Error', 'No records selected');\n+      return;\n+    }\n+    \n+    if (window.confirm(`Are you sure you want to delete ${selectedRecords.length} records?`)) {\n+      setSourceRecords(sourceRecords.filter(record => !selectedRecords.includes(record.id)));\n+      setSelectedRecords([]);\n+      showSuccessNotification('Success', `${selectedRecords.length} records deleted successfully`);\n+    }\n+  };\n+\n+  const handleBulkStatusUpdate = (newStatus: string) => {\n+    if (selectedRecords.length === 0) {\n+      showErrorNotification('Error', 'No records selected');\n+      return;\n+    }\n+    \n+    setSourceRecords(sourceRecords.map(record => \n+      selectedRecords.includes(record.id) \n+        ? { ...record, status: newStatus as any }\n+        : record\n+    ));\n+    setSelectedRecords([]);\n+    showSuccessNotification('Success', `${selectedRecords.length} records updated to ${newStatus}`);\n+  };\n+\n+  // Enhanced data processing\n+  const filteredRecords = useMemo(() => {\n+    let filtered = sourceRecords;\n+\n+    // Search filter\n+    if (searchTerm) {\n+      filtered = filtered.filter(record =>\n+        record.driverName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        record.vehicleReg.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        record.pickupStationCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        record.dropOffPoint.toLowerCase().includes(searchTerm.toLowerCase())\n+      );\n+    }\n+\n+    // Status filter\n+    if (statusFilter !== 'all') {\n+      filtered = filtered.filter(record => record.status === statusFilter);\n+    }\n+\n+    // Area filter\n+    if (areaFilter !== 'all') {\n+      filtered = filtered.filter(record => record.areaCode === areaFilter);\n+    }\n+\n+    // Date range filter\n+    if (dateRange.start && dateRange.end) {\n+      filtered = filtered.filter(record => {\n+        const recordDate = new Date(record.date);\n+        const startDate = new Date(dateRange.start);\n+        const endDate = new Date(dateRange.end);\n+        return recordDate >= startDate && recordDate <= endDate;\n+      });\n+    }\n+\n+    // Sorting\n+    filtered.sort((a, b) => {\n+      let aValue: any = a[sortBy as keyof SourceRecord];\n+      let bValue: any = b[sortBy as keyof SourceRecord];\n+\n+      if (sortBy === 'date') {\n+        aValue = new Date(aValue);\n+        bValue = new Date(bValue);\n+      }\n+\n+      if (sortOrder === 'asc') {\n+        return aValue > bValue ? 1 : -1;\n+      } else {\n+        return aValue < bValue ? 1 : -1;\n+      }\n+    });\n+\n+    return filtered;\n+  }, [sourceRecords, searchTerm, statusFilter, areaFilter, dateRange, sortBy, sortOrder]);\n+\n+  // Enhanced statistics\n+  const stats = useMemo(() => {\n+    const totalRecords = sourceRecords.length;\n+    const totalGoodsIn = sourceRecords.reduce((sum, record) => sum + record.quantitySold, 0);\n+    const totalCostValue = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\n+    const totalPackagingCost = sourceRecords.reduce((sum, record) => sum + record.totalPackagingCost, 0);\n+    \n+    // Status breakdown\n+    const statusBreakdown = sourceRecords.reduce((acc, record) => {\n+      acc[record.status] = (acc[record.status] || 0) + 1;\n+      return acc;\n+    }, {} as Record<string, number>);\n+\n+    // Area breakdown\n+    const areaBreakdown = sourceRecords.reduce((acc, record) => {\n+      acc[record.areaCode] = (acc[record.areaCode] || 0) + 1;\n+      return acc;\n+    }, {} as Record<string, number>);\n+\n+    // Recent activity (last 7 days)\n+    const sevenDaysAgo = new Date();\n+    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n+    const recentRecords = sourceRecords.filter(record => new Date(record.date) >= sevenDaysAgo);\n+\n+    return {\n+      totalRecords,\n+      totalGoodsIn,\n+      totalCostValue,\n+      totalPackagingCost,\n+      statusBreakdown,\n+      areaBreakdown,\n+      recentRecords: recentRecords.length,\n+      avgCostPerKg: totalGoodsIn > 0 ? totalCostValue / totalGoodsIn : 0,\n+      avgPackagingPerRecord: totalRecords > 0 ? totalPackagingCost / totalRecords : 0\n+    };\n+  }, [sourceRecords]);\n+\n   const columns = [\n     {\n       key: 'date' as keyof SourceRecord,\n       label: 'Date',\n"
                },
                {
                    "date": 1759915629952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -433,67 +433,95 @@\n       sortable: true,\n     },\n   ];\n \n-  const totalGoodsIn = sourceRecords.reduce((sum, record) => sum + record.quantitySold, 0);\n-  const totalCostValue = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\n-\n   return (\n     <div className=\"space-y-6\">\n-      {/* Header */}\n-      <div className=\"flex items-center justify-between\">\n+      {/* Enhanced Header */}\n+      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n         <div>\n-          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Source Records</h1>\n+          <h1 className=\"text-3xl font-bold text-gradient-emerald\">Source Records</h1>\n           <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n-            Track miraa goods received from pickup points\n+            Track miraa goods received from pickup points with enhanced analytics\n           </p>\n+          <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500 dark:text-gray-400\">\n+            <span>Last updated: {new Date().toLocaleString()}</span>\n+            <span>•</span>\n+            <span>{filteredRecords.length} of {sourceRecords.length} records</span>\n+          </div>\n         </div>\n-        <button\n-          onClick={() => handleOpenModal()}\n-          className=\"btn-primary flex items-center space-x-2\"\n-        >\n-          <Plus className=\"h-5 w-5\" />\n-          <span>Add Record</span>\n-        </button>\n+        <div className=\"flex items-center gap-3\">\n+          <button\n+            onClick={handleRefresh}\n+            disabled={isRefreshing}\n+            className=\"btn-teal flex items-center gap-2\"\n+          >\n+            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n+            Refresh\n+          </button>\n+          <button\n+            onClick={() => handleOpenModal()}\n+            className=\"btn-emerald flex items-center space-x-2\"\n+          >\n+            <Plus className=\"h-5 w-5\" />\n+            <span>Add Record</span>\n+          </button>\n+        </div>\n       </div>\n \n-      {/* Summary Cards */}\n-      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n-        <Card className=\"p-6\">\n-          <div className=\"flex items-center\">\n-            <div className=\"p-3 rounded-lg bg-bright-green\">\n+      {/* Enhanced Summary Cards */}\n+      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n+        <Card variant=\"emerald\" className=\"p-6\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"p-3 rounded-lg gradient-emerald\">\n               <Package className=\"h-6 w-6 text-white\" />\n             </div>\n-            <div className=\"ml-4\">\n+            <div className=\"text-right\">\n               <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Records</p>\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{sourceRecords.length}</p>\n+              <p className=\"text-2xl font-bold text-gradient-emerald\">{stats.totalRecords}</p>\n+              <p className=\"text-xs text-gray-500 dark:text-gray-400\">+{stats.recentRecords} this week</p>\n             </div>\n           </div>\n         </Card>\n \n-        <Card className=\"p-6\">\n-          <div className=\"flex items-center\">\n-            <div className=\"p-3 rounded-lg bg-yellow-500\">\n+        <Card variant=\"teal\" className=\"p-6\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"p-3 rounded-lg gradient-teal\">\n               <Package className=\"h-6 w-6 text-white\" />\n             </div>\n-            <div className=\"ml-4\">\n+            <div className=\"text-right\">\n               <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Goods In</p>\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{totalGoodsIn} kg</p>\n+              <p className=\"text-2xl font-bold text-gradient-teal\">{stats.totalGoodsIn} kg</p>\n+              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Avg: {stats.avgCostPerKg.toFixed(0)}/kg</p>\n             </div>\n           </div>\n         </Card>\n \n-        <Card className=\"p-6\">\n-          <div className=\"flex items-center\">\n-            <div className=\"p-3 rounded-lg bg-red-500\">\n-              <Package className=\"h-6 w-6 text-white\" />\n+        <Card variant=\"purple\" className=\"p-6\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"p-3 rounded-lg gradient-purple\">\n+              <BarChart3 className=\"h-6 w-6 text-white\" />\n             </div>\n-            <div className=\"ml-4\">\n+            <div className=\"text-right\">\n               <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Cost</p>\n-              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{formatCurrency(totalCostValue)}</p>\n+              <p className=\"text-2xl font-bold text-gradient-purple\">{formatCurrency(stats.totalCostValue)}</p>\n+              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Investment</p>\n             </div>\n           </div>\n         </Card>\n+\n+        <Card variant=\"red\" className=\"p-6\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"p-3 rounded-lg gradient-red\">\n+              <Package className=\"h-6 w-6 text-white\" />\n+            </div>\n+            <div className=\"text-right\">\n+              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Packaging Cost</p>\n+              <p className=\"text-2xl font-bold text-gradient-red\">{formatCurrency(stats.totalPackagingCost)}</p>\n+              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Avg: {formatCurrency(stats.avgPackagingPerRecord)}</p>\n+            </div>\n+          </div>\n+        </Card>\n       </div>\n \n       {/* Data Table */}\n       <Card className=\"p-6\">\n"
                },
                {
                    "date": 1759915667902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -522,16 +522,158 @@\n           </div>\n         </Card>\n       </div>\n \n-      {/* Data Table */}\n-      <Card className=\"p-6\">\n+      {/* Enhanced Filters and Controls */}\n+      <Card variant=\"blue\" className=\"p-6\">\n+        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6\">\n+          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Filters & Controls</h3>\n+          <div className=\"flex items-center gap-2\">\n+            <button\n+              onClick={() => setViewMode(viewMode === 'table' ? 'cards' : 'table')}\n+              className=\"btn-blue flex items-center gap-2\"\n+            >\n+              {viewMode === 'table' ? <Eye className=\"h-4 w-4\" /> : <BarChart3 className=\"h-4 w-4\" />}\n+              {viewMode === 'table' ? 'Card View' : 'Table View'}\n+            </button>\n+            <div className=\"relative\">\n+              <button\n+                onClick={() => setSelectedRecords([])}\n+                className=\"btn-purple flex items-center gap-2\"\n+              >\n+                <Download className=\"h-4 w-4\" />\n+                Export\n+              </button>\n+            </div>\n+          </div>\n+        </div>\n+\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n+          <FormInput\n+            label=\"Search\"\n+            type=\"text\"\n+            value={searchTerm}\n+            onChange={(value) => setSearchTerm(value as string)}\n+            placeholder=\"Search drivers, vehicles, stations...\"\n+            icon={<Search className=\"h-4 w-4\" />}\n+          />\n+\n+          <FormSelect\n+            label=\"Status Filter\"\n+            value={statusFilter}\n+            onChange={(value) => setStatusFilter(value as string)}\n+            options={[\n+              { value: 'all', label: 'All Status' },\n+              { value: 'loaded', label: 'Loaded' },\n+              { value: 'in-transit', label: 'In Transit' },\n+              { value: 'delivered', label: 'Delivered' }\n+            ]}\n+          />\n+\n+          <FormSelect\n+            label=\"Area Filter\"\n+            value={areaFilter}\n+            onChange={(value) => setAreaFilter(value as string)}\n+            options={[\n+              { value: 'all', label: 'All Areas' },\n+              ...areaCodes.map(area => ({\n+                value: area.code,\n+                label: `${area.code} - ${area.name}`\n+              }))\n+            ]}\n+          />\n+\n+          <FormSelect\n+            label=\"Sort By\"\n+            value={sortBy}\n+            onChange={(value) => setSortBy(value as string)}\n+            options={[\n+              { value: 'date', label: 'Date' },\n+              { value: 'driverName', label: 'Driver' },\n+              { value: 'quantitySold', label: 'Quantity' },\n+              { value: 'totalCost', label: 'Total Cost' },\n+              { value: 'status', label: 'Status' }\n+            ]}\n+          />\n+        </div>\n+\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n+          <div className=\"flex items-center gap-2\">\n+            <Calendar className=\"h-4 w-4 text-gray-500\" />\n+            <FormInput\n+              label=\"Start Date\"\n+              type=\"date\"\n+              value={dateRange.start}\n+              onChange={(value) => setDateRange({ ...dateRange, start: value as string })}\n+            />\n+            <FormInput\n+              label=\"End Date\"\n+              type=\"date\"\n+              value={dateRange.end}\n+              onChange={(value) => setDateRange({ ...dateRange, end: value as string })}\n+            />\n+          </div>\n+\n+          <div className=\"flex items-center gap-2\">\n+            <button\n+              onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n+              className=\"btn-lime flex items-center gap-2\"\n+            >\n+              {sortOrder === 'asc' ? <TrendingUp className=\"h-4 w-4\" /> : <TrendingDown className=\"h-4 w-4\" />}\n+              {sortOrder === 'asc' ? 'Ascending' : 'Descending'}\n+            </button>\n+          </div>\n+        </div>\n+\n+        {/* Bulk Actions */}\n+        {selectedRecords.length > 0 && (\n+          <div className=\"mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n+            <div className=\"flex items-center justify-between\">\n+              <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n+                {selectedRecords.length} record(s) selected\n+              </span>\n+              <div className=\"flex items-center gap-2\">\n+                <button\n+                  onClick={() => handleBulkStatusUpdate('loaded')}\n+                  className=\"btn-emerald text-xs\"\n+                >\n+                  Mark as Loaded\n+                </button>\n+                <button\n+                  onClick={() => handleBulkStatusUpdate('in-transit')}\n+                  className=\"btn-teal text-xs\"\n+                >\n+                  Mark as In Transit\n+                </button>\n+                <button\n+                  onClick={() => handleBulkStatusUpdate('delivered')}\n+                  className=\"btn-lime text-xs\"\n+                >\n+                  Mark as Delivered\n+                </button>\n+                <button\n+                  onClick={handleBulkDelete}\n+                  className=\"btn-red text-xs\"\n+                >\n+                  Delete Selected\n+                </button>\n+              </div>\n+            </div>\n+          </div>\n+        )}\n+      </Card>\n+\n+      {/* Enhanced Data Table */}\n+      <Card variant=\"green\" className=\"p-6\">\n         <DataTable\n-          data={sourceRecords}\n+          data={filteredRecords}\n           columns={columns}\n           onEdit={handleOpenModal}\n           onDelete={handleDelete}\n-          emptyMessage=\"No source records yet. Click 'Add Record' to get started.\"\n+          emptyMessage=\"No source records found. Try adjusting your filters or click 'Add Record' to get started.\"\n+          searchable={false}\n+          selectable={true}\n+          onSelectionChange={setSelectedRecords}\n         />\n       </Card>\n \n       {/* Modal */}\n"
                },
                {
                    "date": 1759915713098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -953,13 +953,13 @@\n           <div className=\"flex justify-end space-x-3 pt-4\">\n             <button\n               type=\"button\"\n               onClick={handleCloseModal}\n-              className=\"btn-secondary\"\n+              className=\"btn-blue\"\n             >\n               Cancel\n             </button>\n-            <button type=\"submit\" className=\"btn-primary\">\n+            <button type=\"submit\" className=\"btn-emerald\">\n               {editingRecord ? 'Update Record' : 'Add Record'}\n             </button>\n           </div>\n         </form>\n"
                },
                {
                    "date": 1759915833002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useMemo } from 'react';\n-import { Plus, Package, Search, Filter, Download, TrendingUp, TrendingDown, MapPin, Truck, User, Calendar, BarChart3, AlertCircle, CheckCircle, Clock, Edit, Trash2, Eye, RefreshCw } from 'lucide-react';\n+import { Plus, Package, Search, Download, TrendingUp, TrendingDown, Calendar, BarChart3, Eye, RefreshCw } from 'lucide-react';\n import { FormInput } from '../../components/FormInput';\n import { FormSelect } from '../../components/FormSelect';\n import { Modal } from '../../components/Modal';\n import { Card } from '../../components/Card';\n"
                },
                {
                    "date": 1759915972851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -553,9 +553,8 @@\n             type=\"text\"\n             value={searchTerm}\n             onChange={(value) => setSearchTerm(value as string)}\n             placeholder=\"Search drivers, vehicles, stations...\"\n-            icon={<Search className=\"h-4 w-4\" />}\n           />\n \n           <FormSelect\n             label=\"Status Filter\"\n@@ -669,11 +668,8 @@\n           columns={columns}\n           onEdit={handleOpenModal}\n           onDelete={handleDelete}\n           emptyMessage=\"No source records found. Try adjusting your filters or click 'Add Record' to get started.\"\n-          searchable={false}\n-          selectable={true}\n-          onSelectionChange={setSelectedRecords}\n         />\n       </Card>\n \n       {/* Modal */}\n"
                },
                {
                    "date": 1759916012781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,16 +234,8 @@\n       setIsRefreshing(false);\n     }\n   };\n \n-  const handleExport = async (format: 'csv' | 'excel' | 'pdf') => {\n-    try {\n-      await new Promise(resolve => setTimeout(resolve, 2000));\n-      showSuccessNotification('Success', `${format.toUpperCase()} export completed`);\n-    } catch (error) {\n-      showErrorNotification('Error', `Failed to export ${format.toUpperCase()}`);\n-    }\n-  };\n \n   const handleBulkDelete = () => {\n     if (selectedRecords.length === 0) {\n       showErrorNotification('Error', 'No records selected');\n"
                },
                {
                    "date": 1759916036673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useMemo } from 'react';\n-import { Plus, Package, Search, Download, TrendingUp, TrendingDown, Calendar, BarChart3, Eye, RefreshCw } from 'lucide-react';\n+import { Plus, Package, Download, TrendingUp, TrendingDown, Calendar, BarChart3, Eye, RefreshCw } from 'lucide-react';\n import { FormInput } from '../../components/FormInput';\n import { FormSelect } from '../../components/FormSelect';\n import { Modal } from '../../components/Modal';\n import { Card } from '../../components/Card';\n"
                },
                {
                    "date": 1759917703441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -668,9 +668,11 @@\n       <Modal\n         isOpen={isModalOpen}\n         onClose={handleCloseModal}\n         title={editingRecord ? 'Edit Source Record' : 'Add Source Record'}\n-        size=\"lg\"\n+        size=\"xl\"\n+        type=\"success\"\n+        icon={<Package className=\"h-6 w-6\" />}\n       >\n         <form onSubmit={handleSubmit} className=\"space-y-6\">\n           {/* Basic Info */}\n           <div>\n"
                },
                {
                    "date": 1760598523046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,59 +9,41 @@\n import { SourceRecord } from '../../types';\n import { formatDate, formatCurrency } from '../../utils/helpers';\n import { useNotificationService } from '../../services/notificationService';\n \n-// 5 Key Area Codes with their pickup stations\n+// 4 Key Area Codes with their pickup stations\n const areaCodes = [\n   {\n     code: 'AC001',\n-    name: 'Central Highlands',\n-    region: 'Meru County',\n+    name: 'Embu Area',\n+    region: 'Embu County',\n     pickupStations: [\n-      { code: 'ST001', name: 'Meru Central Station', location: 'Meru Town Center' },\n-      { code: 'ST002', name: 'Maua Station', location: 'Maua Market' },\n-      { code: 'ST003', name: 'Chuka Station', location: 'Chuka Town' },\n+      { code: 'ST001', name: 'Embu Town Station', location: 'Embu Town Center' },\n     ]\n   },\n   {\n     code: 'AC002', \n-    name: 'Eastern Plains',\n-    region: 'Kitui County',\n+    name: 'Mecca Area',\n+    region: 'Mecca Region',\n     pickupStations: [\n-      { code: 'ST004', name: 'Kitui Central Station', location: 'Kitui Town' },\n-      { code: 'ST005', name: 'Mwingi Station', location: 'Mwingi Market' },\n-      { code: 'ST006', name: 'Mutomo Station', location: 'Mutomo Center' },\n+      { code: 'ST002', name: 'Mecca Station', location: 'Mecca Center' },\n     ]\n   },\n   {\n     code: 'AC003',\n-    name: 'Coastal Region', \n-    region: 'Mombasa County',\n+    name: 'Ena Area', \n+    region: 'Ena Region',\n     pickupStations: [\n-      { code: 'ST007', name: 'Mombasa Port Station', location: 'Port Area' },\n-      { code: 'ST008', name: 'Kilifi Station', location: 'Kilifi Town' },\n-      { code: 'ST009', name: 'Malindi Station', location: 'Malindi Center' },\n+      { code: 'ST003', name: 'Ena Station', location: 'Ena Center' },\n     ]\n   },\n   {\n     code: 'AC004',\n-    name: 'Northern Frontier',\n-    region: 'Garissa County', \n+    name: 'Ugweri Area',\n+    region: 'Ugweri Region', \n     pickupStations: [\n-      { code: 'ST010', name: 'Garissa Central Station', location: 'Garissa Town' },\n-      { code: 'ST011', name: 'Dadaab Station', location: 'Dadaab Area' },\n-      { code: 'ST012', name: 'Fafi Station', location: 'Fafi Center' },\n+      { code: 'ST004', name: 'Ugweri Station', location: 'Ugweri Center' },\n     ]\n-  },\n-  {\n-    code: 'AC005',\n-    name: 'Metropolitan Area',\n-    region: 'Nairobi County',\n-    pickupStations: [\n-      { code: 'ST013', name: 'Nairobi CBD Station', location: 'City Center' },\n-      { code: 'ST014', name: 'Eastleigh Station', location: 'Eastleigh Market' },\n-      { code: 'ST015', name: 'Kasarani Station', location: 'Kasarani Area' },\n-    ]\n   }\n ];\n \n // Flatten pickup stations for easier selection\n"
                },
                {
                    "date": 1760598529219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,13 +57,12 @@\n );\n \n // Drop-off points for each area\n const dropOffPoints = {\n-  'AC001': ['Meru Town', 'Maua Market', 'Chuka Center', 'Nkubu', 'Mitunguu'],\n-  'AC002': ['Kitui Town', 'Mwingi Market', 'Mutomo', 'Kibwezi', 'Makindu'],\n-  'AC003': ['Mombasa CBD', 'Kilifi Town', 'Malindi', 'Watamu', 'Diani'],\n-  'AC004': ['Garissa Town', 'Dadaab', 'Fafi', 'Hulugho', 'Ijara'],\n-  'AC005': ['Nairobi CBD', 'Eastleigh', 'Kasarani', 'Ruaraka', 'Kahawa']\n+  'AC001': ['Embu Town Center', 'Embu Market', 'Embu Industrial Area'],\n+  'AC002': ['Mecca Center', 'Mecca Market', 'Mecca Business District'],\n+  'AC003': ['Ena Center', 'Ena Market', 'Ena Commercial Area'],\n+  'AC004': ['Ugweri Center', 'Ugweri Market', 'Ugweri Business Hub']\n };\n \n \n const defaultRecord: Omit<SourceRecord, 'id' | 'totalCost' | 'totalPackagingCost'> = {\n"
                }
            ],
            "date": 1759566950933,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { Plus, Package } from 'lucide-react';\r\nimport { FormInput, FormSelect } from '../../components/FormInput';\r\nimport { Modal } from '../../components/Modal';\r\nimport { Card } from '../../components/Card';\r\nimport { DataTable } from '../../components/DataTable';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { SourceRecord } from '../../types';\r\nimport { formatDate, formatCurrency, getPickupPointCode } from '../../utils/helpers';\r\n\r\nconst pickupPoints = [\r\n  { value: 'A', label: 'Point A (100-300)' },\r\n  { value: 'B', label: 'Point B (400-600)' },\r\n  { value: 'C', label: 'Point C (700-900)' },\r\n  { value: 'D', label: 'Point D (1000-1200)' },\r\n] as const;\r\n\r\nconst paymentMethods = [\r\n  { value: 'cash', label: 'Cash' },\r\n  { value: 'mpesa', label: 'M-Pesa' },\r\n  { value: 'bank', label: 'Bank Transfer' },\r\n];\r\n\r\nconst defaultRecord: Omit<SourceRecord, 'id' | 'totalCost'> = {\r\n  date: new Date().toISOString().split('T')[0],\r\n  code: 100,\r\n  pickupPoint: 'A',\r\n  farmer: '',\r\n  farmerId: '',\r\n  quantitySold: 0,\r\n  itemPrice: 0,\r\n  paymentMethods: [],\r\n};\r\n\r\nexport const SourceRecordsPage: React.FC = () => {\r\n  const { sourceRecords, setSourceRecords, user } = useApp();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingRecord, setEditingRecord] = useState<SourceRecord | null>(null);\r\n  const [formData, setFormData] = useState<Omit<SourceRecord, 'id' | 'totalCost'>>(defaultRecord);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const resetForm = () => {\r\n    setFormData(defaultRecord);\r\n    setErrors({});\r\n    setEditingRecord(null);\r\n  };\r\n\r\n  const handleOpenModal = (record?: SourceRecord) => {\r\n    if (record) {\r\n      setEditingRecord(record);\r\n      const { id, totalCost, ...recordData } = record;\r\n      setFormData(recordData);\r\n    } else {\r\n      resetForm();\r\n    }\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    resetForm();\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.date) newErrors.date = 'Date is required';\r\n    if (!formData.code || formData.code < 100) newErrors.code = 'Valid code is required';\r\n    if (!formData.pickupPoint) newErrors.pickupPoint = 'Pickup point is required';\r\n    if (!formData.farmer?.trim()) newErrors.farmer = 'Farmer name is required';\r\n    if (!formData.farmerId?.trim()) newErrors.farmerId = 'Farmer ID is required';\r\n    if (!formData.quantitySold || formData.quantitySold <= 0) newErrors.quantitySold = 'Valid quantity is required';\r\n    if (!formData.itemPrice || formData.itemPrice <= 0) newErrors.itemPrice = 'Valid price is required';\r\n\r\n    const { min, max } = getPickupPointCode(formData.pickupPoint as 'A' | 'B' | 'C' | 'D');\r\n    if (formData.code < min || formData.code > max) {\r\n      newErrors.code = `Code must be between ${min} and ${max} for Point ${formData.pickupPoint}`;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) return;\r\n\r\n    const totalCost = formData.quantitySold * formData.itemPrice;\r\n    const newRecord = {\r\n      ...formData,\r\n      totalCost,\r\n      farmerId: formData.farmerId || `FAR-${Date.now()}`,\r\n    };\r\n\r\n    if (editingRecord) {\r\n      setSourceRecords(\r\n        sourceRecords.map((record) =>\r\n          record.id === editingRecord.id ? { ...newRecord, id: editingRecord.id } : record\r\n        )\r\n      );\r\n    } else {\r\n      const id = `SRC-${Date.now()}`;\r\n      setSourceRecords([...sourceRecords, { ...newRecord, id }]);\r\n    }\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleDelete = (record: SourceRecord) => {\r\n    if (window.confirm('Are you sure you want to delete this record?')) {\r\n      setSourceRecords(sourceRecords.filter((r) => r.id !== record.id));\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      key: 'date' as keyof SourceRecord,\r\n      label: 'Date',\r\n      render: (value: string) => formatDate(value),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'code' as keyof SourceRecord,\r\n      label: 'Code',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'pickupPoint' as keyof SourceRecord,\r\n      label: 'Pickup Point',\r\n    },\r\n    {\r\n      key: 'farmer' as keyof SourceRecord,\r\n      label: 'Farmer',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'quantitySold' as keyof SourceRecord,\r\n      label: 'Quantity (kg)',\r\n      render: (value: number) => `${value} kg`,\r\n    },\r\n    {\r\n      key: 'itemPrice' as keyof SourceRecord,\r\n      label: 'Price/kg',\r\n      render: (value: number) => formatCurrency(value),\r\n    },\r\n    {\r\n      key: 'totalCost' as keyof SourceRecord,\r\n      label: 'Total Cost',\r\n      render: (value: number) => formatCurrency(value),\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  const totalGoodsIn = sourceRecords.reduce((sum, record) => sum + record.quantitySold, 0);\r\n  const totalCostValue = sourceRecords.reduce((sum, record) => sum + record.totalCost, 0);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Source Records</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Track miraa goods received from pickup points\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => handleOpenModal()}\r\n          className=\"btn-primary flex items-center space-x-2\"\r\n        >\r\n          <Plus className=\"h-5 w-5\" />\r\n          <span>Add Record</span>\r\n        </button>\r\n      </div>\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"p-3 rounded-lg bg-bright-green\">\r\n              <Package className=\"h-6 w-6 text-white\" />\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Records</p>\r\n              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{sourceRecords.length}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"p-3 rounded-lg bg-yellow-500\">\r\n              <Package className=\"h-6 w-6 text-white\" />\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Goods In</p>\r\n              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{totalGoodsIn} kg</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"p-3 rounded-lg bg-red-500\">\r\n              <Package className=\"h-6 w-6 text-white\" />\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Cost</p>\r\n              <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{formatCurrency(totalCostValue)}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Data Table */}\r\n      <Card className=\"p-6\">\r\n        <DataTable\r\n          data={sourceRecords}\r\n          columns={columns}\r\n          onEdit={handleOpenModal}\r\n          onDelete={handleDelete}\r\n          emptyMessage=\"No source records yet. Click 'Add Record' to get started.\"\r\n        />\r\n      </Card>\r\n\r\n      {/* Modal */}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        title={editingRecord ? 'Edit Source Record' : 'Add Source Record'}\r\n        size=\"lg\"\r\n      >\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormInput\r\n              label=\"Date\"\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(value) => setFormData({ ...formData, date: value as string })}\r\n              error={errors.date}\r\n              required\r\n            />\r\n\r\n            <FormInput\r\n              label=\"Code\"\r\n              type=\"number\"\r\n              value={formData.code}\r\n              onChange={(value) => setFormData({ ...formData, code: value as number })}\r\n              error={errors.code}\r\n              required\r\n              placeholder=\"Pickup point code\"\r\n            />\r\n\r\n            <FormSelect\r\n              label=\"Pickup Point\"\r\n              value={formData.pickupPoint}\r\n              onChange={(value) => setFormData({ ...formData, pickupPoint: value as any })}\r\n              options={pickupPoints}\r\n              error={errors.pickupPoint}\r\n              required\r\n            />\r\n\r\n            <FormInput\r\n              label=\"Farmer ID\"\r\n              type=\"text\"\r\n              value={formData.farmerId}\r\n              onChange={(value) => setFormData({ ...formData, farmerId: value as string })}\r\n              error={errors.farmerId}\r\n              required\r\n              placeholder=\"Farmer identification\"\r\n            />\r\n\r\n            <FormInput\r\n              label=\"Farmer Name\"\r\n              type=\"text\"\r\n              value={formData.farmer || ''}\r\n              onChange={(value) => setFormData({ ...formData, farmer: value as string })}\r\n              error={errors.farmer}\r\n              required\r\n              placeholder=\"Farmer full name\"\r\n            />\r\n\r\n            <FormInput\r\n              label=\"Payment Methods\"\r\n              type=\"text\"\r\n              value={formData.paymentMethods?.join(', ') || ''}\r\n              onChange={(value) => {\r\n                const methods = (value as string).split(',').map(m => m.trim()).filter(Boolean);\r\n                setFormData({ ...formData, paymentMethods: methods as any });\r\n              }}\r\n              placeholder=\"Cash, M-Pesa, Bank\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormInput\r\n              label=\"Quantity (kg)\"\r\n              type=\"number\"\r\n              value={formData.quantitySold}\r\n              onChange={(value) => setFormData({ ...formData, quantitySold: value as number })}\r\n              error={errors.quantitySold}\r\n              required\r\n              placeholder=\"Weight in kilograms\"\r\n            />\r\n\r\n            <FormInput\r\n              label=\"Price per kg\"\r\n              type=\"number\"\r\n              value={formData.itemPrice}\r\n              onChange={(value) => setFormData({ ...formData, itemPrice: value as number })}\r\n              error={errors.itemPrice}\r\n              required\r\n              placeholder=\"Price per kilogram\"\r\n            />\r\n          </div>\r\n\r\n          {/* Auto-calculated total */}\r\n          {formData.quantitySold > 0 && formData.itemPrice > 0 && (\r\n            <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\r\n              <p className=\"text-sm text-green-800 dark:text-green-200\">\r\n                <strong>Total Cost:</strong> {formatCurrency(formData.quantitySold * formData.itemPrice)}\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex justify-end space-x-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCloseModal}\r\n              className=\"btn-secondary\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button type=\"submit\" className=\"btn-primary\">\r\n              {editingRecord ? 'Update Record' : 'Add Record'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n d);\r\n};\r\n"
        }
    ]
}