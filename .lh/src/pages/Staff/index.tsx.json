{
    "sourceFile": "src/pages/Staff/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759902972383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759903165622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useMemo } from 'react';\r\n-import { Plus, Search, Filter, Edit, Trash2, Eye, UserCheck, UserX, MapPin, Truck, Phone, Mail, Calendar, Award, AlertTriangle } from 'lucide-react';\r\n+import { Plus, Search, Filter, UserCheck, MapPin, Truck, Award } from 'lucide-react';\r\n import { Card } from '../../components/Card';\r\n import { Modal } from '../../components/Modal';\r\n import { FormInput } from '../../components/FormInput';\r\n import { FormSelect } from '../../components/FormSelect';\r\n@@ -226,16 +226,8 @@\n       setStaffMembers(staffMembers.filter((s) => s.id !== staff.id));\r\n     }\r\n   };\r\n \r\n-  const handleStatusChange = (staffId: string, newStatus: StaffMember['status']) => {\r\n-    setStaffMembers(\r\n-      staffMembers.map((staff) =>\r\n-        staff.id === staffId ? { ...staff, status: newStatus, updatedAt: new Date().toISOString() } : staff\r\n-      )\r\n-    );\r\n-  };\r\n-\r\n   // Filter staff members\r\n   const filteredStaff = useMemo(() => {\r\n     return staffMembers.filter((staff) => {\r\n       const matchesSearch = filters.search === '' || \r\n@@ -278,9 +270,9 @@\n     },\r\n     {\r\n       key: 'firstName' as keyof StaffMember,\r\n       label: 'Name',\r\n-      render: (value: string, row: StaffMember) => (\r\n+      render: (_: string, row: StaffMember) => (\r\n         <div>\r\n           <p className=\"font-medium text-gray-900 dark:text-gray-100\">{row.firstName} {row.lastName}</p>\r\n           <p className=\"text-xs text-gray-500\">{row.email}</p>\r\n         </div>\r\n"
                }
            ],
            "date": 1759902972383,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react';\r\nimport { Plus, Search, Filter, Edit, Trash2, Eye, UserCheck, UserX, MapPin, Truck, Phone, Mail, Calendar, Award, AlertTriangle } from 'lucide-react';\r\nimport { Card } from '../../components/Card';\r\nimport { Modal } from '../../components/Modal';\r\nimport { FormInput } from '../../components/FormInput';\r\nimport { FormSelect } from '../../components/FormSelect';\r\nimport { DataTable } from '../../components/DataTable';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { formatDate } from '../../utils/helpers';\r\n\r\ninterface StaffMember {\r\n  id: string;\r\n  employeeId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  role: 'driver' | 'supervisor' | 'coordinator' | 'manager' | 'admin';\r\n  department: 'transport' | 'operations' | 'logistics' | 'management';\r\n  status: 'active' | 'inactive' | 'suspended' | 'on-leave';\r\n  hireDate: string;\r\n  salary: number;\r\n  licenseNumber?: string;\r\n  licenseExpiry?: string;\r\n  assignedRoutes: string[];\r\n  assignedVehicles: string[];\r\n  performance: {\r\n    rating: number; // 1-5\r\n    tripsCompleted: number;\r\n    onTimeDelivery: number; // percentage\r\n    customerSatisfaction: number; // percentage\r\n    safetyScore: number; // 1-5\r\n  };\r\n  emergencyContact: {\r\n    name: string;\r\n    phone: string;\r\n    relationship: string;\r\n  };\r\n  address: string;\r\n  notes?: string;\r\n  lastLogin?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nconst defaultStaff: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'> = {\r\n  employeeId: '',\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  phone: '',\r\n  role: 'driver',\r\n  department: 'transport',\r\n  status: 'active',\r\n  hireDate: new Date().toISOString().split('T')[0],\r\n  salary: 0,\r\n  licenseNumber: '',\r\n  licenseExpiry: '',\r\n  assignedRoutes: [],\r\n  assignedVehicles: [],\r\n  performance: {\r\n    rating: 5,\r\n    tripsCompleted: 0,\r\n    onTimeDelivery: 100,\r\n    customerSatisfaction: 100,\r\n    safetyScore: 5,\r\n  },\r\n  emergencyContact: {\r\n    name: '',\r\n    phone: '',\r\n    relationship: '',\r\n  },\r\n  address: '',\r\n  notes: '',\r\n};\r\n\r\nexport const StaffManagementPage: React.FC = () => {\r\n  const { user } = useApp();\r\n  const [staffMembers, setStaffMembers] = useState<StaffMember[]>([\r\n    {\r\n      id: '1',\r\n      employeeId: 'EMP001',\r\n      firstName: 'John',\r\n      lastName: 'Kimani',\r\n      email: 'john.kimani@mwalimu.com',\r\n      phone: '+254 712 345678',\r\n      role: 'driver',\r\n      department: 'transport',\r\n      status: 'active',\r\n      hireDate: '2023-01-15',\r\n      salary: 45000,\r\n      licenseNumber: 'DL123456',\r\n      licenseExpiry: '2025-12-31',\r\n      assignedRoutes: ['Nairobi-Mombasa', 'Nairobi-Garissa'],\r\n      assignedVehicles: ['KAA 123A', 'KBB 456B'],\r\n      performance: {\r\n        rating: 4.5,\r\n        tripsCompleted: 156,\r\n        onTimeDelivery: 92,\r\n        customerSatisfaction: 88,\r\n        safetyScore: 4.8,\r\n      },\r\n      emergencyContact: {\r\n        name: 'Mary Kimani',\r\n        phone: '+254 723 456789',\r\n        relationship: 'Spouse',\r\n      },\r\n      address: 'Nairobi, Kenya',\r\n      notes: 'Excellent driver with clean record',\r\n      lastLogin: '2024-01-15T08:30:00Z',\r\n      createdAt: '2023-01-15T00:00:00Z',\r\n      updatedAt: '2024-01-15T08:30:00Z',\r\n    },\r\n    {\r\n      id: '2',\r\n      employeeId: 'EMP002',\r\n      firstName: 'Sarah',\r\n      lastName: 'Mwangi',\r\n      email: 'sarah.mwangi@mwalimu.com',\r\n      phone: '+254 734 567890',\r\n      role: 'supervisor',\r\n      department: 'operations',\r\n      status: 'active',\r\n      hireDate: '2022-06-01',\r\n      salary: 65000,\r\n      assignedRoutes: ['All Routes'],\r\n      assignedVehicles: [],\r\n      performance: {\r\n        rating: 4.8,\r\n        tripsCompleted: 0,\r\n        onTimeDelivery: 95,\r\n        customerSatisfaction: 92,\r\n        safetyScore: 5.0,\r\n      },\r\n      emergencyContact: {\r\n        name: 'Peter Mwangi',\r\n        phone: '+254 745 678901',\r\n        relationship: 'Brother',\r\n      },\r\n      address: 'Meru, Kenya',\r\n      notes: 'Team supervisor with excellent leadership skills',\r\n      lastLogin: '2024-01-15T09:15:00Z',\r\n      createdAt: '2022-06-01T00:00:00Z',\r\n      updatedAt: '2024-01-15T09:15:00Z',\r\n    },\r\n  ]);\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingStaff, setEditingStaff] = useState<StaffMember | null>(null);\r\n  const [formData, setFormData] = useState<Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>>(defaultStaff);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  \r\n  // Filter states\r\n  const [filters, setFilters] = useState({\r\n    search: '',\r\n    role: 'all',\r\n    department: 'all',\r\n    status: 'all',\r\n    performance: 'all',\r\n  });\r\n\r\n  const resetForm = () => {\r\n    setFormData(defaultStaff);\r\n    setErrors({});\r\n    setEditingStaff(null);\r\n  };\r\n\r\n  const handleOpenModal = (staff?: StaffMember) => {\r\n    if (staff) {\r\n      setEditingStaff(staff);\r\n      const { id, createdAt, updatedAt, ...staffData } = staff;\r\n      setFormData(staffData);\r\n    } else {\r\n      resetForm();\r\n    }\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    resetForm();\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.employeeId) newErrors.employeeId = 'Employee ID is required';\r\n    if (!formData.firstName) newErrors.firstName = 'First name is required';\r\n    if (!formData.lastName) newErrors.lastName = 'Last name is required';\r\n    if (!formData.email) newErrors.email = 'Email is required';\r\n    if (!formData.phone) newErrors.phone = 'Phone number is required';\r\n    if (!formData.hireDate) newErrors.hireDate = 'Hire date is required';\r\n    if (!formData.salary || formData.salary <= 0) newErrors.salary = 'Valid salary is required';\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) return;\r\n\r\n    const now = new Date().toISOString();\r\n    const newStaff = {\r\n      ...formData,\r\n      updatedAt: now,\r\n    };\r\n\r\n    if (editingStaff) {\r\n      setStaffMembers(\r\n        staffMembers.map((staff) =>\r\n          staff.id === editingStaff.id ? { ...newStaff, id: editingStaff.id, createdAt: editingStaff.createdAt } : staff\r\n        )\r\n      );\r\n    } else {\r\n      const id = Date.now().toString();\r\n      setStaffMembers([...staffMembers, { ...newStaff, id, createdAt: now }]);\r\n    }\r\n\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleDelete = (staff: StaffMember) => {\r\n    if (window.confirm(`Are you sure you want to delete ${staff.firstName} ${staff.lastName}?`)) {\r\n      setStaffMembers(staffMembers.filter((s) => s.id !== staff.id));\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = (staffId: string, newStatus: StaffMember['status']) => {\r\n    setStaffMembers(\r\n      staffMembers.map((staff) =>\r\n        staff.id === staffId ? { ...staff, status: newStatus, updatedAt: new Date().toISOString() } : staff\r\n      )\r\n    );\r\n  };\r\n\r\n  // Filter staff members\r\n  const filteredStaff = useMemo(() => {\r\n    return staffMembers.filter((staff) => {\r\n      const matchesSearch = filters.search === '' || \r\n        `${staff.firstName} ${staff.lastName}`.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n        staff.employeeId.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n        staff.email.toLowerCase().includes(filters.search.toLowerCase());\r\n      \r\n      const matchesRole = filters.role === 'all' || staff.role === filters.role;\r\n      const matchesDepartment = filters.department === 'all' || staff.department === filters.department;\r\n      const matchesStatus = filters.status === 'all' || staff.status === filters.status;\r\n      \r\n      let matchesPerformance = true;\r\n      if (filters.performance !== 'all') {\r\n        const rating = staff.performance.rating;\r\n        switch (filters.performance) {\r\n          case 'excellent':\r\n            matchesPerformance = rating >= 4.5;\r\n            break;\r\n          case 'good':\r\n            matchesPerformance = rating >= 3.5 && rating < 4.5;\r\n            break;\r\n          case 'average':\r\n            matchesPerformance = rating >= 2.5 && rating < 3.5;\r\n            break;\r\n          case 'poor':\r\n            matchesPerformance = rating < 2.5;\r\n            break;\r\n        }\r\n      }\r\n\r\n      return matchesSearch && matchesRole && matchesDepartment && matchesStatus && matchesPerformance;\r\n    });\r\n  }, [staffMembers, filters]);\r\n\r\n  const columns = [\r\n    {\r\n      key: 'employeeId' as keyof StaffMember,\r\n      label: 'Employee ID',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'firstName' as keyof StaffMember,\r\n      label: 'Name',\r\n      render: (value: string, row: StaffMember) => (\r\n        <div>\r\n          <p className=\"font-medium text-gray-900 dark:text-gray-100\">{row.firstName} {row.lastName}</p>\r\n          <p className=\"text-xs text-gray-500\">{row.email}</p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'role' as keyof StaffMember,\r\n      label: 'Role',\r\n      render: (value: string) => (\r\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n          value === 'admin' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-200' :\r\n          value === 'manager' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-200' :\r\n          value === 'supervisor' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\r\n          value === 'coordinator' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200' :\r\n          'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-200'\r\n        }`}>\r\n          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'department' as keyof StaffMember,\r\n      label: 'Department',\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'status' as keyof StaffMember,\r\n      label: 'Status',\r\n      render: (value: string) => (\r\n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n          value === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200' :\r\n          value === 'inactive' ? 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-200' :\r\n          value === 'suspended' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200' :\r\n          'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200'\r\n        }`}>\r\n          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      key: 'performance' as keyof StaffMember,\r\n      label: 'Performance',\r\n      render: (value: any) => (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"flex items-center\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <Award\r\n                key={i}\r\n                className={`h-3 w-3 ${\r\n                  i < Math.floor(value.rating) ? 'text-yellow-400' : 'text-gray-300'\r\n                }`}\r\n              />\r\n            ))}\r\n          </div>\r\n          <span className=\"text-sm font-medium\">{value.rating.toFixed(1)}</span>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: 'hireDate' as keyof StaffMember,\r\n      label: 'Hire Date',\r\n      render: (value: string) => formatDate(value),\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  // Calculate summary statistics\r\n  const summaryStats = useMemo(() => {\r\n    const totalStaff = staffMembers.length;\r\n    const activeStaff = staffMembers.filter(s => s.status === 'active').length;\r\n    const drivers = staffMembers.filter(s => s.role === 'driver').length;\r\n    const avgPerformance = staffMembers.reduce((sum, s) => sum + s.performance.rating, 0) / totalStaff;\r\n    const totalTrips = staffMembers.reduce((sum, s) => sum + s.performance.tripsCompleted, 0);\r\n\r\n    return {\r\n      totalStaff,\r\n      activeStaff,\r\n      drivers,\r\n      avgPerformance: avgPerformance || 0,\r\n      totalTrips,\r\n    };\r\n  }, [staffMembers]);\r\n\r\n  if (user?.role !== 'admin') {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <p className=\"text-xl text-red-500\">Access Denied: Admins only.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Staff Management</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            Manage staff members, roles, and performance\r\n          </p>\r\n        </div>\r\n        \r\n        <button\r\n          onClick={() => handleOpenModal()}\r\n          className=\"flex items-center space-x-2 px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n        >\r\n          <Plus className=\"h-4 w-4\" />\r\n          <span>Add Staff</span>\r\n        </button>\r\n      </div>\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-blue-500\">\r\n              <UserCheck className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Staff</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.totalStaff}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-green-500\">\r\n              <UserCheck className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Active Staff</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.activeStaff}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-purple-500\">\r\n              <Truck className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Drivers</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.drivers}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-yellow-500\">\r\n              <Award className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Avg Performance</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.avgPerformance.toFixed(1)}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"p-2 rounded-lg bg-orange-500\">\r\n              <MapPin className=\"h-4 w-4 text-white\" />\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <p className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Total Trips</p>\r\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{summaryStats.totalTrips}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <Card className=\"p-4\">\r\n        <div className=\"flex items-center space-x-4 mb-4\">\r\n          <Filter className=\"h-5 w-5 text-gray-500\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Filters</h3>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search staff...\"\r\n              value={filters.search}\r\n              onChange={(e) => setFilters({ ...filters, search: e.target.value })}\r\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-bright-green focus:border-bright-green\"\r\n            />\r\n          </div>\r\n          \r\n          <FormSelect\r\n            label=\"Role\"\r\n            value={filters.role}\r\n            onChange={(value) => setFilters({ ...filters, role: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Roles' },\r\n              { value: 'driver', label: 'Driver' },\r\n              { value: 'supervisor', label: 'Supervisor' },\r\n              { value: 'coordinator', label: 'Coordinator' },\r\n              { value: 'manager', label: 'Manager' },\r\n              { value: 'admin', label: 'Admin' },\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Department\"\r\n            value={filters.department}\r\n            onChange={(value) => setFilters({ ...filters, department: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Departments' },\r\n              { value: 'transport', label: 'Transport' },\r\n              { value: 'operations', label: 'Operations' },\r\n              { value: 'logistics', label: 'Logistics' },\r\n              { value: 'management', label: 'Management' },\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Status\"\r\n            value={filters.status}\r\n            onChange={(value) => setFilters({ ...filters, status: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Status' },\r\n              { value: 'active', label: 'Active' },\r\n              { value: 'inactive', label: 'Inactive' },\r\n              { value: 'suspended', label: 'Suspended' },\r\n              { value: 'on-leave', label: 'On Leave' },\r\n            ]}\r\n          />\r\n          \r\n          <FormSelect\r\n            label=\"Performance\"\r\n            value={filters.performance}\r\n            onChange={(value) => setFilters({ ...filters, performance: value as string })}\r\n            options={[\r\n              { value: 'all', label: 'All Performance' },\r\n              { value: 'excellent', label: 'Excellent (4.5+)' },\r\n              { value: 'good', label: 'Good (3.5-4.4)' },\r\n              { value: 'average', label: 'Average (2.5-3.4)' },\r\n              { value: 'poor', label: 'Poor (<2.5)' },\r\n            ]}\r\n          />\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Data Table */}\r\n      <Card className=\"p-6\">\r\n        <DataTable\r\n          data={filteredStaff}\r\n          columns={columns}\r\n          onEdit={handleOpenModal}\r\n          onDelete={handleDelete}\r\n          emptyMessage=\"No staff members found. Click 'Add Staff' to get started.\"\r\n        />\r\n      </Card>\r\n\r\n      {/* Add/Edit Modal */}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        title={editingStaff ? 'Edit Staff Member' : 'Add Staff Member'}\r\n        size=\"lg\"\r\n      >\r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          {/* Basic Information */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Basic Information</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormInput\r\n                label=\"Employee ID\"\r\n                type=\"text\"\r\n                value={formData.employeeId}\r\n                onChange={(value) => setFormData({ ...formData, employeeId: value as string })}\r\n                error={errors.employeeId}\r\n                required\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"Hire Date\"\r\n                type=\"date\"\r\n                value={formData.hireDate}\r\n                onChange={(value) => setFormData({ ...formData, hireDate: value as string })}\r\n                error={errors.hireDate}\r\n                required\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"First Name\"\r\n                type=\"text\"\r\n                value={formData.firstName}\r\n                onChange={(value) => setFormData({ ...formData, firstName: value as string })}\r\n                error={errors.firstName}\r\n                required\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"Last Name\"\r\n                type=\"text\"\r\n                value={formData.lastName}\r\n                onChange={(value) => setFormData({ ...formData, lastName: value as string })}\r\n                error={errors.lastName}\r\n                required\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                value={formData.email}\r\n                onChange={(value) => setFormData({ ...formData, email: value as string })}\r\n                error={errors.email}\r\n                required\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"Phone\"\r\n                type=\"tel\"\r\n                value={formData.phone}\r\n                onChange={(value) => setFormData({ ...formData, phone: value as string })}\r\n                error={errors.phone}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Role & Department */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Role & Department</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormSelect\r\n                label=\"Role\"\r\n                value={formData.role}\r\n                onChange={(value) => setFormData({ ...formData, role: value as any })}\r\n                options={[\r\n                  { value: 'driver', label: 'Driver' },\r\n                  { value: 'supervisor', label: 'Supervisor' },\r\n                  { value: 'coordinator', label: 'Coordinator' },\r\n                  { value: 'manager', label: 'Manager' },\r\n                  { value: 'admin', label: 'Admin' },\r\n                ]}\r\n                required\r\n              />\r\n              \r\n              <FormSelect\r\n                label=\"Department\"\r\n                value={formData.department}\r\n                onChange={(value) => setFormData({ ...formData, department: value as any })}\r\n                options={[\r\n                  { value: 'transport', label: 'Transport' },\r\n                  { value: 'operations', label: 'Operations' },\r\n                  { value: 'logistics', label: 'Logistics' },\r\n                  { value: 'management', label: 'Management' },\r\n                ]}\r\n                required\r\n              />\r\n              \r\n              <FormSelect\r\n                label=\"Status\"\r\n                value={formData.status}\r\n                onChange={(value) => setFormData({ ...formData, status: value as any })}\r\n                options={[\r\n                  { value: 'active', label: 'Active' },\r\n                  { value: 'inactive', label: 'Inactive' },\r\n                  { value: 'suspended', label: 'Suspended' },\r\n                  { value: 'on-leave', label: 'On Leave' },\r\n                ]}\r\n                required\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"Salary\"\r\n                type=\"number\"\r\n                value={formData.salary}\r\n                onChange={(value) => setFormData({ ...formData, salary: value as number })}\r\n                error={errors.salary}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Driver-specific fields */}\r\n          {formData.role === 'driver' && (\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Driver Information</h4>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <FormInput\r\n                  label=\"License Number\"\r\n                  type=\"text\"\r\n                  value={formData.licenseNumber || ''}\r\n                  onChange={(value) => setFormData({ ...formData, licenseNumber: value as string })}\r\n                />\r\n                \r\n                <FormInput\r\n                  label=\"License Expiry\"\r\n                  type=\"date\"\r\n                  value={formData.licenseExpiry || ''}\r\n                  onChange={(value) => setFormData({ ...formData, licenseExpiry: value as string })}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Emergency Contact */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Emergency Contact</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <FormInput\r\n                label=\"Contact Name\"\r\n                type=\"text\"\r\n                value={formData.emergencyContact.name}\r\n                onChange={(value) => setFormData({ \r\n                  ...formData, \r\n                  emergencyContact: { ...formData.emergencyContact, name: value as string }\r\n                })}\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"Contact Phone\"\r\n                type=\"tel\"\r\n                value={formData.emergencyContact.phone}\r\n                onChange={(value) => setFormData({ \r\n                  ...formData, \r\n                  emergencyContact: { ...formData.emergencyContact, phone: value as string }\r\n                })}\r\n              />\r\n              \r\n              <FormInput\r\n                label=\"Relationship\"\r\n                type=\"text\"\r\n                value={formData.emergencyContact.relationship}\r\n                onChange={(value) => setFormData({ \r\n                  ...formData, \r\n                  emergencyContact: { ...formData.emergencyContact, relationship: value as string }\r\n                })}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Additional Information */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3\">Additional Information</h4>\r\n            <div className=\"space-y-4\">\r\n              <FormInput\r\n                label=\"Address\"\r\n                type=\"text\"\r\n                value={formData.address}\r\n                onChange={(value) => setFormData({ ...formData, address: value as string })}\r\n              />\r\n              \r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Notes\r\n                </label>\r\n                <textarea\r\n                  value={formData.notes || ''}\r\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\r\n                  className=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                  rows={3}\r\n                  placeholder=\"Additional notes about the staff member...\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCloseModal}\r\n              className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-bright-green text-white rounded-lg hover:bg-green-600 transition-colors\"\r\n            >\r\n              {editingStaff ? 'Update Staff' : 'Add Staff'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}