{
    "sourceFile": "src/pages/Stations/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1761636667626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761638370569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,110 @@\n-import React from 'react';\r\n+import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n+import { FormInput } from '../../components/FormInput';\r\n+import { useApp } from '../../context/AppContext';\r\n \r\n export const StationsPage: React.FC = () => {\r\n+  const { pickupStations, packages } = useApp();\r\n+  const [q, setQ] = useState('');\r\n+\r\n+  const stations = useMemo(() => {\r\n+    const query = q.trim().toLowerCase();\r\n+    return pickupStations.filter(s => !query || s.name.toLowerCase().includes(query) || s.location.toLowerCase().includes(query));\r\n+  }, [pickupStations, q]);\r\n+\r\n+  const stationPackages = useMemo(() => {\r\n+    const map: Record<string, typeof packages> = {};\r\n+    for (const s of pickupStations) map[s.name] = [];\r\n+    for (const p of packages) {\r\n+      if (!map[p.station]) map[p.station] = [] as any;\r\n+      map[p.station].push(p);\r\n+    }\r\n+    return map;\r\n+  }, [pickupStations, packages]);\r\n+\r\n+  const totalsFor = (name: string) => {\r\n+    const list = stationPackages[name] || [];\r\n+    let boxes = 0, basins = 0, smallSacks = 0;\r\n+    for (const p of list) {\r\n+      if (!p.notes) continue;\r\n+      for (const part of String(p.notes).split('|')) {\r\n+        const [k, v] = (part || '').split(':');\r\n+        const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n+        if (k === 'boxes') boxes += val;\r\n+        if (k === 'basins') basins += val;\r\n+        if (k === 'smallSacks') smallSacks += val;\r\n+      }\r\n+    }\r\n+    return { count: list.length, boxes, basins, smallSacks };\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Pickup Stations</h1>\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <p className=\"text-gray-700 dark:text-gray-300\">Stations list with filtering by region/status will appear here.</p>\r\n+        <FormInput label=\"Search stations\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Name or location\" />\r\n       </Card>\r\n+\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+        {stations.map(st => {\r\n+          const t = totalsFor(st.name);\r\n+          const recent = (stationPackages[st.name] || []).slice().sort((a,b)=>String(b.registeredAt).localeCompare(String(a.registeredAt))).slice(0,5);\r\n+          return (\r\n+            <Card key={st.id} padding=\"lg\" variant=\"enhanced\">\r\n+              <div className=\"flex items-center justify-between\">\r\n+                <div>\r\n+                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">{st.name}</h3>\r\n+                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{st.location}</p>\r\n+                </div>\r\n+                <div className=\"text-right\">\r\n+                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">Status</div>\r\n+                  <div className=\"font-semibold\">{st.status}</div>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <div className=\"mt-4 grid grid-cols-4 gap-3 text-center\">\r\n+                <div>\r\n+                  <div className=\"text-xs text-gray-500\">Packages</div>\r\n+                  <div className=\"text-xl font-bold\">{t.count}</div>\r\n+                </div>\r\n+                <div>\r\n+                  <div className=\"text-xs text-gray-500\">Boxes</div>\r\n+                  <div className=\"text-xl font-bold\">{t.boxes}</div>\r\n+                </div>\r\n+                <div>\r\n+                  <div className=\"text-xs text-gray-500\">Basins</div>\r\n+                  <div className=\"text-xl font-bold\">{t.basins}</div>\r\n+                </div>\r\n+                <div>\r\n+                  <div className=\"text-xs text-gray-500\">Small Sacks</div>\r\n+                  <div className=\"text-xl font-bold\">{t.smallSacks}</div>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <div className=\"mt-6\">\r\n+                <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100 mb-2\">Recent Packages</div>\r\n+                <div className=\"space-y-2\">\r\n+                  {recent.map(p => (\r\n+                    <div key={p.id} className=\"p-2 rounded bg-gray-50 dark:bg-gray-800 flex items-center justify-between\">\r\n+                      <div className=\"min-w-0\">\r\n+                        <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100 truncate\">{p.trackingNumber}</div>\r\n+                        <div className=\"text-xs text-gray-600 dark:text-gray-400 truncate\">{p.recipientName}</div>\r\n+                      </div>\r\n+                      <div className=\"text-xs text-gray-500 dark:text-gray-400 ml-2 whitespace-nowrap\">{p.registeredAt ? new Date(p.registeredAt).toLocaleString() : 'N/A'}</div>\r\n+                    </div>\r\n+                  ))}\r\n+                  {recent.length === 0 && (\r\n+                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">No recent packages</p>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+            </Card>\r\n+          );\r\n+        })}\r\n+        {stations.length === 0 && (\r\n+          <Card padding=\"lg\" variant=\"enhanced\"><p className=\"text-center text-gray-500 dark:text-gray-400\">No stations</p></Card>\r\n+        )}\r\n+      </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1761638567671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,18 @@\n import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n import { FormInput } from '../../components/FormInput';\r\n+import { Button } from '../../components/Button';\r\n import { useApp } from '../../context/AppContext';\r\n \r\n+const STATION_RANGES: Record<string, { min: number; max: number }> = {\r\n+  Embu: { min: 1, max: 300 },\r\n+  Ugweri: { min: 301, max: 600 },\r\n+  Meka: { min: 601, max: 900 },\r\n+  Ena: { min: 901, max: 1000 },\r\n+  Gachuriri: { min: 1001, max: 1100 },\r\n+};\r\n+\r\n export const StationsPage: React.FC = () => {\r\n   const { pickupStations, packages } = useApp();\r\n   const [q, setQ] = useState('');\r\n \r\n@@ -21,21 +30,61 @@\n     }\r\n     return map;\r\n   }, [pickupStations, packages]);\r\n \r\n-  const totalsFor = (name: string) => {\r\n-    const list = stationPackages[name] || [];\r\n+  const parseQuantities = (notes?: string) => {\r\n     let boxes = 0, basins = 0, smallSacks = 0;\r\n-    for (const p of list) {\r\n-      if (!p.notes) continue;\r\n-      for (const part of String(p.notes).split('|')) {\r\n+    if (notes) {\r\n+      for (const part of String(notes).split('|')) {\r\n         const [k, v] = (part || '').split(':');\r\n         const n = Number(v); const val = Number.isFinite(n) ? n : 0;\r\n         if (k === 'boxes') boxes += val;\r\n         if (k === 'basins') basins += val;\r\n         if (k === 'smallSacks') smallSacks += val;\r\n       }\r\n     }\r\n+    return { boxes, basins, smallSacks };\r\n+  };\r\n+\r\n+  const nextCodeFor = (name: string) => {\r\n+    const range = STATION_RANGES[name as keyof typeof STATION_RANGES];\r\n+    if (!range) return undefined;\r\n+    const used = new Set<number>();\r\n+    for (const p of stationPackages[name] || []) {\r\n+      const tn = String(p.trackingNumber || '');\r\n+      const dash = tn.lastIndexOf('-');\r\n+      if (dash === -1) continue;\r\n+      const stationName = tn.slice(0, dash);\r\n+      const code = Number(tn.slice(dash + 1));\r\n+      if (stationName === name && Number.isFinite(code) && code >= range.min && code <= range.max) used.add(code);\r\n+    }\r\n+    for (let c = range.min; c <= range.max; c++) {\r\n+      if (!used.has(c)) return c;\r\n+    }\r\n+    return undefined;\r\n+  };\r\n+\r\n+  const exportStationCSV = (name: string) => {\r\n+    const rows = [['id','trackingNumber','recipientName','registeredAt','boxes','basins','smallSacks']];\r\n+    for (const p of (stationPackages[name] || [])) {\r\n+      const q = parseQuantities(p.notes);\r\n+      rows.push([p.id, p.trackingNumber, p.recipientName, p.registeredAt || '', String(q.boxes), String(q.basins), String(q.smallSacks)]);\r\n+    }\r\n+    const csv = rows.map(r => r.map(x => `\"${String(x).replace(/\"/g,'\"\"')}\"`).join(',')).join('\\n');\r\n+    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n+    const url = URL.createObjectURL(blob);\r\n+    const a = document.createElement('a');\r\n+    a.href = url; a.download = `${name}-packages.csv`; a.click();\r\n+    URL.revokeObjectURL(url);\r\n+  };\r\n+\r\n+  const totalsFor = (name: string) => {\r\n+    const list = stationPackages[name] || [];\r\n+    let boxes = 0, basins = 0, smallSacks = 0;\r\n+    for (const p of list) {\r\n+      const q = parseQuantities(p.notes);\r\n+      boxes += q.boxes; basins += q.basins; smallSacks += q.smallSacks;\r\n+    }\r\n     return { count: list.length, boxes, basins, smallSacks };\r\n   };\r\n \r\n   return (\r\n@@ -48,8 +97,9 @@\n       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n         {stations.map(st => {\r\n           const t = totalsFor(st.name);\r\n           const recent = (stationPackages[st.name] || []).slice().sort((a,b)=>String(b.registeredAt).localeCompare(String(a.registeredAt))).slice(0,5);\r\n+          const nextCode = nextCodeFor(st.name);\r\n           return (\r\n             <Card key={st.id} padding=\"lg\" variant=\"enhanced\">\r\n               <div className=\"flex items-center justify-between\">\r\n                 <div>\r\n@@ -61,9 +111,9 @@\n                   <div className=\"font-semibold\">{st.status}</div>\r\n                 </div>\r\n               </div>\r\n \r\n-              <div className=\"mt-4 grid grid-cols-4 gap-3 text-center\">\r\n+              <div className=\"mt-4 grid grid-cols-5 gap-3 text-center\">\r\n                 <div>\r\n                   <div className=\"text-xs text-gray-500\">Packages</div>\r\n                   <div className=\"text-xl font-bold\">{t.count}</div>\r\n                 </div>\r\n@@ -78,10 +128,18 @@\n                 <div>\r\n                   <div className=\"text-xs text-gray-500\">Small Sacks</div>\r\n                   <div className=\"text-xl font-bold\">{t.smallSacks}</div>\r\n                 </div>\r\n+                <div>\r\n+                  <div className=\"text-xs text-gray-500\">Next Code</div>\r\n+                  <div className=\"text-xl font-bold\">{nextCode ?? 'Full'}</div>\r\n+                </div>\r\n               </div>\r\n \r\n+              <div className=\"mt-4 flex justify-end\">\r\n+                <Button variant=\"outline\" onClick={()=>exportStationCSV(st.name)}>Export CSV</Button>\r\n+              </div>\r\n+\r\n               <div className=\"mt-6\">\r\n                 <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100 mb-2\">Recent Packages</div>\r\n                 <div className=\"space-y-2\">\r\n                   {recent.map(p => (\r\n"
                },
                {
                    "date": 1761649353182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,14 +14,11 @@\n \r\n export const StationsPage: React.FC = () => {\r\n   const { pickupStations, packages } = useApp();\r\n   const [q, setQ] = useState('');\r\n+  const [sortBy, setSortBy] = useState<'name' | 'count' | 'boxes'>('name');\r\n+  const [dateFilter, setDateFilter] = useState('');\r\n \r\n-  const stations = useMemo(() => {\r\n-    const query = q.trim().toLowerCase();\r\n-    return pickupStations.filter(s => !query || s.name.toLowerCase().includes(query) || s.location.toLowerCase().includes(query));\r\n-  }, [pickupStations, q]);\r\n-\r\n   const stationPackages = useMemo(() => {\r\n     const map: Record<string, typeof packages> = {};\r\n     for (const s of pickupStations) map[s.name] = [];\r\n     for (const p of packages) {\r\n"
                },
                {
                    "date": 1761649366775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,34 @@\n     }\r\n     return { count: list.length, boxes, basins, smallSacks };\r\n   };\r\n \r\n+  const stations = useMemo(() => {\r\n+    let result = [...pickupStations];\r\n+    const query = q.trim().toLowerCase();\r\n+    if (query) {\r\n+      result = result.filter(s => s.name.toLowerCase().includes(query) || s.location.toLowerCase().includes(query));\r\n+    }\r\n+    \r\n+    // Apply date filter to packages\r\n+    if (dateFilter) {\r\n+      const packagesForDate = packages.filter(p => String(p.registeredAt || '').startsWith(dateFilter));\r\n+      const hasDataOnDate = new Set(packagesForDate.map(p => p.station));\r\n+      result = result.filter(s => hasDataOnDate.has(s.name));\r\n+    }\r\n+    \r\n+    // Sort\r\n+    if (sortBy === 'name') {\r\n+      result.sort((a, b) => a.name.localeCompare(b.name));\r\n+    } else if (sortBy === 'count') {\r\n+      result.sort((a, b) => (stationPackages[b.name]?.length || 0) - (stationPackages[a.name]?.length || 0));\r\n+    } else if (sortBy === 'boxes') {\r\n+      result.sort((a, b) => totalsFor(b.name).boxes - totalsFor(a.name).boxes);\r\n+    }\r\n+    \r\n+    return result;\r\n+  }, [pickupStations, q, dateFilter, sortBy, packages, stationPackages]);\r\n+\r\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Pickup Stations</h1>\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n"
                },
                {
                    "date": 1761649382677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useMemo, useState } from 'react';\r\n import { Card } from '../../components/Card';\r\n import { FormInput } from '../../components/FormInput';\r\n+import { FormSelect } from '../../components/FormSelect';\r\n import { Button } from '../../components/Button';\r\n import { useApp } from '../../context/AppContext';\r\n \r\n const STATION_RANGES: Record<string, { min: number; max: number }> = {\r\n@@ -113,9 +114,17 @@\n   return (\r\n     <div className=\"space-y-6\">\r\n       <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Pickup Stations</h1>\r\n       <Card padding=\"lg\" variant=\"enhanced\">\r\n-        <FormInput label=\"Search stations\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Name or location\" />\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n+          <FormInput label=\"Search stations\" value={q} onChange={(v)=>setQ(String(v))} placeholder=\"Name or location\" />\r\n+          <FormInput label=\"Filter by date\" type=\"date\" value={dateFilter} onChange={(v)=>setDateFilter(String(v))} />\r\n+          <FormSelect label=\"Sort by\" value={sortBy} onChange={(v)=>setSortBy(v as any)} options={[\r\n+            { value: 'name', label: 'Name' },\r\n+            { value: 'count', label: 'Package Count' },\r\n+            { value: 'boxes', label: 'Total Boxes' },\r\n+          ]} />\r\n+        </div>\r\n       </Card>\r\n \r\n       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n         {stations.map(st => {\r\n"
                }
            ],
            "date": 1761636667626,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Card } from '../../components/Card';\r\n\r\nexport const StationsPage: React.FC = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Pickup Stations</h1>\r\n      <Card padding=\"lg\" variant=\"enhanced\">\r\n        <p className=\"text-gray-700 dark:text-gray-300\">Stations list with filtering by region/status will appear here.</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}